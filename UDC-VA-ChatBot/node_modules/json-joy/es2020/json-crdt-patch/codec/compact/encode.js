"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encode = void 0;
const ArrInsOp_1 = require("../../operations/ArrInsOp");
const ArrOp_1 = require("../../operations/ArrOp");
const BinInsOp_1 = require("../../operations/BinInsOp");
const BinOp_1 = require("../../operations/BinOp");
const ConstOp_1 = require("../../operations/ConstOp");
const DelOp_1 = require("../../operations/DelOp");
const clock_1 = require("../../clock");
const NoopOp_1 = require("../../operations/NoopOp");
const ObjOp_1 = require("../../operations/ObjOp");
const ObjSetOp_1 = require("../../operations/ObjSetOp");
const StrInsOp_1 = require("../../operations/StrInsOp");
const StrOp_1 = require("../../operations/StrOp");
const toBase64_1 = require("../../../util/base64/toBase64");
const ValOp_1 = require("../../operations/ValOp");
const ValSetOp_1 = require("../../operations/ValSetOp");
const TupOp_1 = require("../../operations/TupOp");
const encode = (patch) => {
    const id = patch.getId();
    if (!id)
        throw new Error('PATCH_EMPTY');
    const sessionId = id.sid;
    const { time } = id;
    const res = sessionId === 1 ? [time] : [[sessionId, time]];
    const pushTimestamp = (ts) => {
        const tsSessionId = ts.sid;
        if (tsSessionId === 1)
            res.push(ts.time);
        else if (tsSessionId === sessionId && ts.time >= time)
            res.push(time - ts.time - 1);
        else
            res.push([tsSessionId, ts.time]);
    };
    const pushTimespan = (span) => {
        pushTimestamp(span);
        res.push(span.span);
    };
    for (const op of patch.ops) {
        if (op instanceof ObjOp_1.ObjOp) {
            res.push(3);
        }
        else if (op instanceof ArrOp_1.ArrOp) {
            res.push(5);
        }
        else if (op instanceof StrOp_1.StrOp) {
            res.push(4);
            continue;
        }
        else if (op instanceof BinOp_1.BinOp) {
            res.push(6);
            continue;
        }
        else if (op instanceof ObjSetOp_1.ObjSetOp) {
            const { obj: object, data: tuples } = op;
            res.push(11, tuples.length);
            pushTimestamp(object);
            for (const [key, value] of tuples) {
                res.push(key);
                pushTimestamp(value);
            }
        }
        else if (op instanceof StrInsOp_1.StrInsOp) {
            const { obj, ref: after, data: substring } = op;
            res.push(9, substring);
            pushTimestamp(obj);
            pushTimestamp(after);
        }
        else if (op instanceof BinInsOp_1.BinInsOp) {
            const { obj, ref: after, data } = op;
            res.push(17, (0, toBase64_1.toBase64)(data));
            pushTimestamp(obj);
            pushTimestamp(after);
        }
        else if (op instanceof ArrInsOp_1.ArrInsOp) {
            const { obj: arr, ref: after, data: elements } = op;
            res.push(13, elements.length);
            pushTimestamp(arr);
            pushTimestamp(after);
            for (const element of elements)
                pushTimestamp(element);
        }
        else if (op instanceof DelOp_1.DelOp) {
            const { obj, what } = op;
            const length = what.length;
            if (length === 1) {
                res.push(14);
                pushTimestamp(obj);
                pushTimespan(what[0]);
            }
            else {
                res.push(10, length);
                pushTimestamp(obj);
                for (const span of what)
                    pushTimespan(span);
            }
        }
        else if (op instanceof NoopOp_1.NoopOp) {
            const { len: length } = op;
            if (length === 1)
                res.push(15);
            else
                res.push(16, length);
        }
        else if (op instanceof ConstOp_1.ConstOp) {
            if (op.val === undefined) {
                res.push(0);
            }
            else if (op.val instanceof clock_1.Timestamp) {
                res.push(8);
                pushTimestamp(op.val);
            }
            else {
                res.push(1);
                res.push(op.val);
            }
        }
        else if (op instanceof ValOp_1.ValOp) {
            res.push(2);
            pushTimestamp(op.val);
        }
        else if (op instanceof ValSetOp_1.ValSetOp) {
            res.push(12);
            pushTimestamp(op.obj);
            pushTimestamp(op.val);
        }
        else if (op instanceof TupOp_1.TupOp) {
            res.push(7);
            continue;
        }
    }
    return res;
};
exports.encode = encode;
