import { compare, toDisplayString } from '../../../json-crdt-patch/clock';
import { printTree } from '../../../util/print/printTree';
export class ObjectLww {
    doc;
    id;
    keys = new Map();
    constructor(doc, id) {
        this.doc = doc;
        this.id = id;
    }
    get(key) {
        const id = this.keys.get(key);
        if (!id)
            return undefined;
        return this.doc.index.get(id);
    }
    put(key, id) {
        const currentId = this.keys.get(key);
        if (currentId && compare(currentId, id) >= 0)
            return;
        this.keys.set(key, id);
        return currentId;
    }
    _view = {};
    view() {
        const _toJson = this._view;
        const obj = {};
        let useCache = true;
        const index = this.doc.index;
        for (const [key, id] of this.keys.entries()) {
            const value = index.get(id).view();
            if (value !== undefined) {
                if (_toJson[key] !== value)
                    useCache = false;
                obj[key] = value;
            }
            else {
                if (_toJson[key] !== undefined)
                    useCache = false;
            }
        }
        return useCache ? _toJson : (this._view = obj);
    }
    nodes(callback) {
        const index = this.doc.index;
        this.keys.forEach((id, key) => callback(index.get(id), key));
    }
    children(callback) {
        const index = this.doc.index;
        this.keys.forEach((id, key) => callback(index.get(id)));
    }
    child() {
        return undefined;
    }
    container() {
        return this;
    }
    toString(tab = '') {
        const header = this.constructor.name + ' ' + toDisplayString(this.id);
        return (header +
            printTree(tab, [...this.keys.entries()].map(([key, id]) => (tab) => JSON.stringify(key) + printTree(tab + ' ', [(tab) => this.doc.index.get(id).toString(tab)]))));
    }
}
