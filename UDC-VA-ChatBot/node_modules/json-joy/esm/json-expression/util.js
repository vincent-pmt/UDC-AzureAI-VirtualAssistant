import { deepEqual } from '../json-equal/deepEqual';
import { toPath, get as get_ } from '../json-pointer';
export const get = (path, data) => get_(data, toPath(path));
export const throwOnUndef = (value, def) => {
    if (value !== undefined)
        return value;
    if (def === undefined)
        throw new Error('NOT_FOUND');
    return def;
};
export const type = (value) => {
    if (value === null)
        return 'null';
    if (value instanceof Array)
        return 'array';
    return typeof value;
};
export const str = (value) => {
    if (typeof value !== 'object')
        return '' + value;
    return JSON.stringify(value);
};
export const starts = (outer, inner) => {
    return str(outer).indexOf(str(inner)) === 0;
};
export const contains = (outer, inner) => {
    return str(outer).indexOf(str(inner)) > -1;
};
export const ends = (outer, inner) => {
    const o = str(outer);
    const i = str(inner);
    return o.indexOf(i) === o.length - i.length;
};
export const isInContainer = (what, container) => {
    const length = container.length;
    for (let i = 0; i < length; i++)
        if (deepEqual(container[i], what))
            return true;
    return false;
};
export const num = (value) => +value || 0;
export const int = (value) => ~~value;
export const betweenNeNe = (val, min, max) => val > min && val < max;
export const betweenNeEq = (val, min, max) => val > min && val <= max;
export const betweenEqNe = (val, min, max) => val >= min && val < max;
export const betweenEqEq = (val, min, max) => val >= min && val <= max;
export const slash = (a, b) => {
    const res = num(a) / num(b);
    return Number.isFinite(res) ? res : 0;
};
export const substr = (probablyString, from, length) => str(probablyString).substr(int(from), int(length));
export const isLiteral = (value) => {
    if (value instanceof Array)
        return value.length === 1 && value[0] instanceof Array;
    else
        return true;
};
