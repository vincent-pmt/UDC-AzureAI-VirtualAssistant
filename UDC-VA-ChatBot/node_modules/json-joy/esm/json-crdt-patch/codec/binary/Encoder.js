import { ArrInsOp } from '../../operations/ArrInsOp';
import { ArrOp } from '../../operations/ArrOp';
import { BinInsOp } from '../../operations/BinInsOp';
import { BinOp } from '../../operations/BinOp';
import { CrdtWriter } from '../../util/binary/CrdtEncoder';
import { DelOp } from '../../operations/DelOp';
import { Timestamp } from '../../clock';
import { NoopOp } from '../../operations/NoopOp';
import { ObjOp } from '../../operations/ObjOp';
import { ObjSetOp } from '../../operations/ObjSetOp';
import { StrInsOp } from '../../operations/StrInsOp';
import { StrOp } from '../../operations/StrOp';
import { ValOp } from '../../operations/ValOp';
import { ValSetOp } from '../../operations/ValSetOp';
import { ConstOp } from '../../operations/ConstOp';
import { MsgPackEncoder } from '../../../json-pack/msgpack/MsgPackEncoder';
import { TupOp } from '../../operations/TupOp';
export class Encoder extends MsgPackEncoder {
    patchId;
    constructor() {
        super(new CrdtWriter());
    }
    encode(patch) {
        this.writer.reset();
        const id = (this.patchId = patch.getId());
        const isServerClock = id.sid === 1;
        if (isServerClock) {
            this.writer.b1vu56(true, id.time);
        }
        else {
            this.writer.b1vu56(false, id.sid);
            this.writer.vu57(id.time);
        }
        this.encodeOperations(patch);
        return this.writer.flush();
    }
    encodeOperations(patch) {
        const ops = patch.ops;
        for (let i = 0; i < ops.length; i++) {
            const op = ops[i];
            this.encodeOperation(op);
        }
    }
    encodeId(id) {
        const sessionId = id.sid;
        const time = id.time;
        if (sessionId === 1) {
            this.writer.b1vu56(true, id.time);
        }
        else {
            const patchId = this.patchId;
            if (sessionId === patchId.sid && time >= patchId.time) {
                this.writer.b1vu56(false, 1);
                this.writer.vu57(time - patchId.time);
            }
            else {
                this.writer.b1vu56(false, sessionId);
                this.writer.vu57(time);
            }
        }
    }
    encodeTss(span) {
        this.encodeId(span);
        this.writer.vu57(span.span);
    }
    encodeOperation(op) {
        if (op instanceof ObjOp)
            this.writer.u8(3);
        else if (op instanceof ArrOp)
            this.writer.u8(5);
        else if (op instanceof StrOp)
            this.writer.u8(4);
        else if (op instanceof ConstOp) {
            const val = op.val;
            if (val === undefined) {
                this.writer.u8(0);
            }
            else if (val instanceof Timestamp) {
                this.writer.u8(8);
                this.encodeId(val);
            }
            else {
                this.writer.u8(1);
                this.encodeAny(op.val);
            }
        }
        else if (op instanceof ValOp) {
            this.writer.u8(2);
            this.encodeId(op.val);
        }
        else if (op instanceof ObjSetOp) {
            this.writer.u8(11);
            this.encodeId(op.obj);
            this.writer.vu57(op.data.length);
            for (const [key, value] of op.data) {
                this.encodeId(value);
                if (typeof key === 'number')
                    this.encodeNumber(key);
                else
                    this.encodeString(key);
            }
        }
        else if (op instanceof ValSetOp) {
            this.writer.u8(12);
            this.encodeId(op.obj);
            this.encodeId(op.val);
        }
        else if (op instanceof StrInsOp) {
            this.writer.u8(9);
            this.encodeId(op.obj);
            this.encodeId(op.ref);
            this.encodeString(op.data);
        }
        else if (op instanceof ArrInsOp) {
            const { obj: arr, ref: after, data: elements } = op;
            const length = elements.length;
            this.writer.u8(13);
            this.encodeId(arr);
            this.encodeId(after);
            this.writer.vu57(length);
            for (let i = 0; i < length; i++)
                this.encodeId(elements[i]);
        }
        else if (op instanceof DelOp) {
            const { obj, what } = op;
            const length = what.length;
            if (length > 1) {
                this.writer.u8(10);
                this.encodeId(obj);
                this.writer.vu57(length);
                for (let i = 0; i < length; i++)
                    this.encodeTss(what[i]);
            }
            else {
                this.writer.u8(14);
                this.encodeId(obj);
                this.encodeTss(what[0]);
            }
        }
        else if (op instanceof NoopOp) {
            const { len: length } = op;
            if (length > 1) {
                this.writer.u8(16);
                this.writer.vu57(length);
            }
            else
                this.writer.u8(15);
        }
        else if (op instanceof BinOp)
            this.writer.u8(6);
        else if (op instanceof BinInsOp) {
            const buf = op.data;
            const length = buf.length;
            this.writer.u8(17);
            this.encodeId(op.obj);
            this.encodeId(op.ref);
            this.writer.vu57(length);
            this.writer.buf(buf, length);
        }
        else if (op instanceof TupOp)
            this.writer.u8(7);
        else
            throw new Error('UNKNOWN_OP');
    }
}
