import { ITimestampStruct, IVectorClock } from '../../clock';
import { CrdtDecoder } from '../../util/binary/CrdtDecoder';
import { CrdtWriter } from '../../util/binary/CrdtEncoder';
export declare class ClockTableEntry {
    index: number;
    id: ITimestampStruct;
    constructor(index: number, id: ITimestampStruct);
}
export declare class ClockTable {
    static from(clock: IVectorClock): ClockTable;
    static decode(reader: CrdtDecoder): ClockTable;
    readonly bySid: Map<number, ClockTableEntry>;
    readonly byIdx: ITimestampStruct[];
    reset(): void;
    parseField(field: `${string}_${string}`): ITimestampStruct;
    relative(id: ITimestampStruct): ITimestampStruct;
    push(id: ITimestampStruct): void;
    getBySid(sid: number): ClockTableEntry;
    getByIdx(index: number): ITimestampStruct;
    write(writer: CrdtWriter): void;
    read(reader: CrdtDecoder): void;
}
