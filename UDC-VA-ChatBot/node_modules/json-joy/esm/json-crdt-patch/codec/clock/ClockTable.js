import { Timestamp } from '../../clock';
export class ClockTableEntry {
    index;
    id;
    constructor(index, id) {
        this.index = index;
        this.id = id;
    }
}
export class ClockTable {
    static from(clock) {
        const table = new ClockTable();
        table.push(new Timestamp(clock.sid, clock.time - 1));
        clock.peers.forEach((id) => table.push(id));
        return table;
    }
    static decode(reader) {
        const clockTable = new ClockTable();
        const length = reader.vu57();
        const tuple = reader.u53vu39();
        clockTable.push(new Timestamp(tuple[0], tuple[1]));
        for (let i = 1; i < length; i++) {
            const tuple = reader.u53vu39();
            clockTable.push(new Timestamp(tuple[0], tuple[1]));
        }
        return clockTable;
    }
    bySid = new Map();
    byIdx = [];
    reset() {
        this.bySid.clear();
        this.byIdx.length = 0;
    }
    parseField(field) {
        const underscoreIndex = field.indexOf('_');
        const relativeSid = parseInt(field.slice(0, underscoreIndex), 36);
        const time = parseInt(field.slice(underscoreIndex + 1), 36);
        const clock = this.byIdx[relativeSid];
        return new Timestamp(clock.sid, time);
    }
    relative(id) {
        const relativeSid = this.getBySid(id.sid).index;
        return new Timestamp(relativeSid, id.time);
    }
    push(id) {
        const byIdx = this.byIdx;
        const index = byIdx.length;
        byIdx.push(id);
        this.bySid.set(id.sid, new ClockTableEntry(index, id));
    }
    getBySid(sid) {
        const entry = this.bySid.get(sid);
        if (!entry)
            throw new Error('CLOCK_NOT_FOUND');
        return entry;
    }
    getByIdx(index) {
        const clock = this.byIdx[index];
        if (!clock)
            throw new Error('CLOCK_NOT_FOUND');
        return clock;
    }
    write(writer) {
        const table = this.byIdx;
        const length = table.length;
        writer.vu39(length);
        for (let i = 0; i < length; i++) {
            const clock = table[i];
            writer.u53vu39(clock.sid, clock.time);
        }
    }
    read(reader) {
        const length = reader.vu39();
        const bySid = this.bySid;
        const byIdx = this.byIdx;
        for (let i = 0; i < length; i++) {
            const [sid, time] = reader.u53vu39();
            const index = byIdx.length;
            const clock = new Timestamp(sid, time);
            const entry = new ClockTableEntry(index, clock);
            byIdx.push(clock);
            bySid.set(sid, entry);
        }
    }
}
