import { ArrInsOp } from '../../operations/ArrInsOp';
import { ArrOp } from '../../operations/ArrOp';
import { BinInsOp } from '../../operations/BinInsOp';
import { BinOp } from '../../operations/BinOp';
import { ConstOp } from '../../operations/ConstOp';
import { DelOp } from '../../operations/DelOp';
import { Timestamp } from '../../clock';
import { NoopOp } from '../../operations/NoopOp';
import { ObjOp } from '../../operations/ObjOp';
import { ObjSetOp } from '../../operations/ObjSetOp';
import { StrInsOp } from '../../operations/StrInsOp';
import { StrOp } from '../../operations/StrOp';
import { toBase64 } from '../../../util/base64/toBase64';
import { ValOp } from '../../operations/ValOp';
import { ValSetOp } from '../../operations/ValSetOp';
import { TupOp } from '../../operations/TupOp';
export const encode = (patch) => {
    const id = patch.getId();
    if (!id)
        throw new Error('PATCH_EMPTY');
    const sessionId = id.sid;
    const { time } = id;
    const res = sessionId === 1 ? [time] : [[sessionId, time]];
    const pushTimestamp = (ts) => {
        const tsSessionId = ts.sid;
        if (tsSessionId === 1)
            res.push(ts.time);
        else if (tsSessionId === sessionId && ts.time >= time)
            res.push(time - ts.time - 1);
        else
            res.push([tsSessionId, ts.time]);
    };
    const pushTimespan = (span) => {
        pushTimestamp(span);
        res.push(span.span);
    };
    for (const op of patch.ops) {
        if (op instanceof ObjOp) {
            res.push(3);
        }
        else if (op instanceof ArrOp) {
            res.push(5);
        }
        else if (op instanceof StrOp) {
            res.push(4);
            continue;
        }
        else if (op instanceof BinOp) {
            res.push(6);
            continue;
        }
        else if (op instanceof ObjSetOp) {
            const { obj: object, data: tuples } = op;
            res.push(11, tuples.length);
            pushTimestamp(object);
            for (const [key, value] of tuples) {
                res.push(key);
                pushTimestamp(value);
            }
        }
        else if (op instanceof StrInsOp) {
            const { obj, ref: after, data: substring } = op;
            res.push(9, substring);
            pushTimestamp(obj);
            pushTimestamp(after);
        }
        else if (op instanceof BinInsOp) {
            const { obj, ref: after, data } = op;
            res.push(17, toBase64(data));
            pushTimestamp(obj);
            pushTimestamp(after);
        }
        else if (op instanceof ArrInsOp) {
            const { obj: arr, ref: after, data: elements } = op;
            res.push(13, elements.length);
            pushTimestamp(arr);
            pushTimestamp(after);
            for (const element of elements)
                pushTimestamp(element);
        }
        else if (op instanceof DelOp) {
            const { obj, what } = op;
            const length = what.length;
            if (length === 1) {
                res.push(14);
                pushTimestamp(obj);
                pushTimespan(what[0]);
            }
            else {
                res.push(10, length);
                pushTimestamp(obj);
                for (const span of what)
                    pushTimespan(span);
            }
        }
        else if (op instanceof NoopOp) {
            const { len: length } = op;
            if (length === 1)
                res.push(15);
            else
                res.push(16, length);
        }
        else if (op instanceof ConstOp) {
            if (op.val === undefined) {
                res.push(0);
            }
            else if (op.val instanceof Timestamp) {
                res.push(8);
                pushTimestamp(op.val);
            }
            else {
                res.push(1);
                res.push(op.val);
            }
        }
        else if (op instanceof ValOp) {
            res.push(2);
            pushTimestamp(op.val);
        }
        else if (op instanceof ValSetOp) {
            res.push(12);
            pushTimestamp(op.obj);
            pushTimestamp(op.val);
        }
        else if (op instanceof TupOp) {
            res.push(7);
            continue;
        }
    }
    return res;
};
