"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Encoder = void 0;
var tslib_1 = require("tslib");
var ArrayRga_1 = require("../../../types/rga-array/ArrayRga");
var BinaryRga_1 = require("../../../types/rga-binary/BinaryRga");
var Const_1 = require("../../../types/const/Const");
var ObjectLww_1 = require("../../../types/lww-object/ObjectLww");
var StringRga_1 = require("../../../types/rga-string/StringRga");
var toBase64_1 = require("../../../../util/base64/toBase64");
var ValueLww_1 = require("../../../types/lww-value/ValueLww");
var clock_1 = require("../../../../json-crdt-patch/clock");
var Encoder = (function () {
    function Encoder() {
    }
    Encoder.prototype.encode = function (model) {
        this.model = model;
        var clock = model.clock;
        var isServerClock = clock.sid === 1;
        return {
            time: isServerClock ? clock.time : this.cClock(model.clock),
            root: this.cVal(model.root),
        };
    };
    Encoder.prototype.cClock = function (clock) {
        var e_1, _a;
        var data = [];
        var sessionId = clock.sid;
        var localTs = clock.peers.get(sessionId);
        if (!localTs)
            data.push([sessionId, clock.time]);
        try {
            for (var _b = tslib_1.__values(clock.peers.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var c = _c.value;
                data.push([c.sid, c.time]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return data;
    };
    Encoder.prototype.cTs = function (ts) {
        return ts.sid === 1 ? ts.time : [ts.sid, ts.time];
    };
    Encoder.prototype.cNode = function (node) {
        if (node instanceof ObjectLww_1.ObjectLww)
            return this.cObj(node);
        else if (node instanceof ArrayRga_1.ArrayRga)
            return this.cArr(node);
        else if (node instanceof StringRga_1.StringRga)
            return this.cStr(node);
        else if (node instanceof ValueLww_1.ValueLww)
            return this.cVal(node);
        else if (node instanceof Const_1.Const)
            return this.cConst(node);
        else if (node instanceof BinaryRga_1.BinaryRga)
            return this.cBin(node);
        throw new Error('UNKNOWN_NODE');
    };
    Encoder.prototype.cObj = function (obj) {
        var _this = this;
        var keys = {};
        obj.nodes(function (node, key) {
            keys[key] = _this.cNode(node);
        });
        return {
            type: 'obj',
            id: this.cTs(obj.id),
            keys: keys,
        };
    };
    Encoder.prototype.cArr = function (obj) {
        var chunks = [];
        var iterator = obj.iterator();
        var chunk;
        while ((chunk = iterator()))
            chunks.push(this.cArrChunk(chunk));
        return {
            type: 'arr',
            id: this.cTs(obj.id),
            chunks: chunks,
        };
    };
    Encoder.prototype.cArrChunk = function (chunk) {
        var _this = this;
        if (chunk.del) {
            var tombstone = {
                id: this.cTs(chunk.id),
                span: chunk.span,
            };
            return tombstone;
        }
        var index = this.model.index;
        var res = {
            id: this.cTs(chunk.id),
            nodes: chunk.data.map(function (n) { return _this.cNode(index.get(n)); }),
        };
        return res;
    };
    Encoder.prototype.cStr = function (obj) {
        var chunks = [];
        var iterator = obj.iterator();
        var chunk;
        while ((chunk = iterator()))
            chunks.push(this.cStrChunk(chunk));
        return {
            type: 'str',
            id: this.cTs(obj.id),
            chunks: chunks,
        };
    };
    Encoder.prototype.cStrChunk = function (chunk) {
        if (chunk.del) {
            var tombstone = {
                id: this.cTs(chunk.id),
                span: chunk.span,
            };
            return tombstone;
        }
        var res = {
            id: this.cTs(chunk.id),
            value: chunk.data,
        };
        return res;
    };
    Encoder.prototype.cBin = function (obj) {
        var chunks = [];
        var iterator = obj.iterator();
        var chunk;
        while ((chunk = iterator()))
            chunks.push(this.cBinChunk(chunk));
        return {
            type: 'bin',
            id: this.cTs(obj.id),
            chunks: chunks,
        };
    };
    Encoder.prototype.cBinChunk = function (chunk) {
        if (chunk.del) {
            var tombstone = {
                id: this.cTs(chunk.id),
                span: chunk.span,
            };
            return tombstone;
        }
        var res = {
            id: this.cTs(chunk.id),
            value: (0, toBase64_1.toBase64)(chunk.data),
        };
        return res;
    };
    Encoder.prototype.cVal = function (obj) {
        return {
            type: 'val',
            id: this.cTs(obj.id),
            node: this.cNode(obj.node()),
        };
    };
    Encoder.prototype.cConst = function (obj) {
        var node = {
            type: 'const',
            id: this.cTs(obj.id),
        };
        var val = obj.val;
        if (val instanceof clock_1.Timestamp) {
            node.timestamp = true;
            node.value = this.cTs(val);
        }
        else {
            if (val !== undefined)
                node.value = val;
        }
        return node;
    };
    return Encoder;
}());
exports.Encoder = Encoder;
