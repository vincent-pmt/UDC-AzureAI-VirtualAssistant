import { ArrayRga } from '../../../types/rga-array/ArrayRga';
import { BinaryRga } from '../../../types/rga-binary/BinaryRga';
import { Const } from '../../../types/const/Const';
import { ITimestampStruct, VectorClock } from '../../../../json-crdt-patch/clock';
import { JsonNode } from '../../../types';
import { Model } from '../../../model';
import { ObjectLww } from '../../../types/lww-object/ObjectLww';
import { StringRga } from '../../../types/rga-string/StringRga';
import { ValueLww } from '../../../types/lww-value/ValueLww';
import { JsonCrdtNode, ObjectJsonCrdtNode, ArrayJsonCrdtNode, ValueJsonCrdtNode, StringJsonCrdtNode, ConstantJsonCrdtNode, BinaryJsonCrdtNode, JsonCrdtSnapshot, JsonCrdtLogicalTimestamp, JsonCrdtTimestamp } from './types';
export declare class Decoder {
    decode({ time, root }: JsonCrdtSnapshot): Model;
    protected cClock(timestamps: JsonCrdtLogicalTimestamp[]): VectorClock;
    protected cTs(stamp: JsonCrdtTimestamp): ITimestampStruct;
    protected cRoot(doc: Model, { node }: ValueJsonCrdtNode): void;
    protected cNode(doc: Model, node: JsonCrdtNode): JsonNode;
    protected cObj(doc: Model, node: ObjectJsonCrdtNode): ObjectLww;
    protected cArr(doc: Model, node: ArrayJsonCrdtNode): ArrayRga;
    protected cStr(doc: Model, node: StringJsonCrdtNode): StringRga;
    protected cBin(doc: Model, node: BinaryJsonCrdtNode): BinaryRga;
    protected cVal(doc: Model, node: ValueJsonCrdtNode): ValueLww;
    protected cConst(doc: Model, node: ConstantJsonCrdtNode): Const;
}
