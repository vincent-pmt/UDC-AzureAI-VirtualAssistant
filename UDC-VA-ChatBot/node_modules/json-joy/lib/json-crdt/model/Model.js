"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Model = exports.UNDEFINED = void 0;
var ArrayRga_1 = require("../types/rga-array/ArrayRga");
var ArrInsOp_1 = require("../../json-crdt-patch/operations/ArrInsOp");
var ArrOp_1 = require("../../json-crdt-patch/operations/ArrOp");
var BinaryRga_1 = require("../types/rga-binary/BinaryRga");
var BinInsOp_1 = require("../../json-crdt-patch/operations/BinInsOp");
var BinOp_1 = require("../../json-crdt-patch/operations/BinOp");
var Const_1 = require("../types/const/Const");
var ConstOp_1 = require("../../json-crdt-patch/operations/ConstOp");
var DelOp_1 = require("../../json-crdt-patch/operations/DelOp");
var clock_1 = require("../../json-crdt-patch/clock");
var NodeIndex_1 = require("./NodeIndex");
var ObjectLww_1 = require("../types/lww-object/ObjectLww");
var ObjOp_1 = require("../../json-crdt-patch/operations/ObjOp");
var ObjSetOp_1 = require("../../json-crdt-patch/operations/ObjSetOp");
var constants_1 = require("../../json-crdt-patch/constants");
var util_1 = require("./util");
var RootLww_1 = require("../types/lww-root/RootLww");
var StringRga_1 = require("../types/rga-string/StringRga");
var StrInsOp_1 = require("../../json-crdt-patch/operations/StrInsOp");
var StrOp_1 = require("../../json-crdt-patch/operations/StrOp");
var ValOp_1 = require("../../json-crdt-patch/operations/ValOp");
var ValSetOp_1 = require("../../json-crdt-patch/operations/ValSetOp");
var ValueLww_1 = require("../types/lww-value/ValueLww");
var printTree_1 = require("../../util/print/printTree");
var util_2 = require("../../json-pack/msgpack/util");
var Encoder_1 = require("../codec/structural/json/Encoder");
var Decoder_1 = require("../codec/structural/json/Decoder");
var encoder = new Encoder_1.Encoder();
var decoder = new Decoder_1.Decoder();
exports.UNDEFINED = new Const_1.Const(constants_1.ORIGIN, undefined);
var Model = (function () {
    function Model(clock) {
        this.root = new RootLww_1.RootLww(this, constants_1.ORIGIN);
        this.index = new NodeIndex_1.NodeIndex();
        this.clock = clock;
        if (!clock.time)
            clock.time = 1;
    }
    Model.withLogicalClock = function (clockOrSessionId) {
        var clock = typeof clockOrSessionId === 'number'
            ? new clock_1.VectorClock(clockOrSessionId, 1)
            : clockOrSessionId || new clock_1.VectorClock((0, util_1.randomSessionId)(), 1);
        return new Model(clock);
    };
    Model.withServerClock = function (time) {
        if (time === void 0) { time = 0; }
        var clock = new clock_1.ServerVectorClock(1, time);
        return new Model(clock);
    };
    Model.fromBinary = function (data) {
        return decoder.decode((0, util_2.decode)(data));
    };
    Model.prototype.applyBatch = function (batch) {
        var patches = batch.patches;
        var length = patches.length;
        for (var i = 0; i < length; i++)
            this.applyPatch(patches[i]);
    };
    Model.prototype.applyPatch = function (patch) {
        var ops = patch.ops;
        var length = ops.length;
        for (var i = 0; i < length; i++)
            this.applyOperation(ops[i]);
    };
    Model.prototype.applyOperation = function (op) {
        this.clock.observe(op.id, op.span());
        var index = this.index;
        if (op instanceof StrInsOp_1.StrInsOp) {
            var node = index.get(op.obj);
            if (node instanceof StringRga_1.StringRga)
                node.ins(op.ref, op.id, op.data);
        }
        else if (op instanceof ObjOp_1.ObjOp) {
            if (!index.get(op.id))
                index.set(new ObjectLww_1.ObjectLww(this, op.id));
        }
        else if (op instanceof ArrOp_1.ArrOp) {
            if (!index.get(op.id))
                index.set(new ArrayRga_1.ArrayRga(this, op.id));
        }
        else if (op instanceof StrOp_1.StrOp) {
            if (!index.get(op.id))
                index.set(new StringRga_1.StringRga(op.id));
        }
        else if (op instanceof ValOp_1.ValOp) {
            if (!index.get(op.id)) {
                var val = index.get(op.val);
                if (val)
                    index.set(new ValueLww_1.ValueLww(this, op.id, op.val));
            }
        }
        else if (op instanceof ConstOp_1.ConstOp) {
            if (!index.get(op.id))
                index.set(new Const_1.Const(op.id, op.val));
        }
        else if (op instanceof ObjSetOp_1.ObjSetOp) {
            var node = index.get(op.obj);
            var tuples = op.data;
            var length_1 = tuples.length;
            if (node instanceof ObjectLww_1.ObjectLww) {
                for (var i = 0; i < length_1; i++) {
                    var tuple = tuples[i];
                    var valueNode = index.get(tuple[1]);
                    if (!valueNode)
                        continue;
                    if (node.id.time >= tuple[1].time)
                        continue;
                    var old = node.put(tuple[0] + '', valueNode.id);
                    if (old)
                        this.deleteNodeTree(old);
                }
            }
        }
        else if (op instanceof ValSetOp_1.ValSetOp) {
            var obj = op.obj;
            var node = obj.sid === 0 && obj.time === 0 ? this.root : index.get(obj);
            if (node instanceof ValueLww_1.ValueLww) {
                var newValue = index.get(op.val);
                if (newValue) {
                    var old = node.set(op.val);
                    if (old)
                        this.deleteNodeTree(old);
                }
            }
        }
        else if (op instanceof ArrInsOp_1.ArrInsOp) {
            var node = index.get(op.obj);
            if (node instanceof ArrayRga_1.ArrayRga) {
                var nodes = [];
                var data = op.data;
                var length_2 = data.length;
                for (var i = 0; i < length_2; i++) {
                    var stamp = data[i];
                    var valueNode = index.get(stamp);
                    if (!valueNode)
                        continue;
                    if (node.id.time >= stamp.time)
                        continue;
                    nodes.push(stamp);
                }
                if (nodes.length)
                    node.ins(op.ref, op.id, nodes);
            }
        }
        else if (op instanceof DelOp_1.DelOp) {
            var node = index.get(op.obj);
            if (node instanceof ArrayRga_1.ArrayRga) {
                var length_3 = op.what.length;
                for (var i = 0; i < length_3; i++) {
                    var span = op.what[i];
                    for (var j = 0; j < span.span; j++) {
                        var id = node.getById(new clock_1.Timestamp(span.sid, span.time + j));
                        if (id)
                            this.deleteNodeTree(id);
                    }
                }
                node.delete(op.what);
            }
            else if (node instanceof StringRga_1.StringRga)
                node.delete(op.what);
            else if (node instanceof BinaryRga_1.BinaryRga)
                node.delete(op.what);
        }
        else if (op instanceof BinOp_1.BinOp) {
            if (!index.get(op.id))
                index.set(new BinaryRga_1.BinaryRga(op.id));
        }
        else if (op instanceof BinInsOp_1.BinInsOp) {
            var node = index.get(op.obj);
            if (node instanceof BinaryRga_1.BinaryRga)
                node.ins(op.ref, op.id, op.data);
        }
    };
    Model.prototype.deleteNodeTree = function (value) {
        var _this = this;
        var isSystemNode = value.sid === 0;
        if (isSystemNode)
            return;
        var node = this.index.get(value);
        if (!node)
            return;
        node.children(function (child) { return _this.deleteNodeTree(child.id); });
        this.index.delete(value);
    };
    Model.prototype.fork = function (sessionId) {
        if (sessionId === void 0) { sessionId = (0, util_1.randomSessionId)(); }
        var copy = Model.fromBinary(this.toBinary());
        if (copy.clock.sid !== sessionId && copy.clock instanceof clock_1.VectorClock)
            copy.clock = copy.clock.fork(sessionId);
        return copy;
    };
    Model.prototype.clone = function () {
        return this.fork(this.clock.sid);
    };
    Model.prototype.view = function () {
        return this.root.view();
    };
    Model.prototype.toString = function (tab) {
        var _this = this;
        if (tab === void 0) { tab = ''; }
        var nl = function () { return ''; };
        return (this.constructor.name +
            (0, printTree_1.printTree)(tab, [
                function (tab) { return _this.root.toString(tab); },
                nl,
                function (tab) { return _this.index.toString(tab); },
                nl,
                function (tab) { return _this.clock.toString(tab); },
            ]));
    };
    Model.prototype.toBinary = function () {
        return (0, util_2.encode)(encoder.encode(this));
    };
    return Model;
}());
exports.Model = Model;
