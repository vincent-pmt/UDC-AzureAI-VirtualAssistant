"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeIndex = void 0;
var clock_1 = require("../../json-crdt-patch/clock");
var NodeIndex = (function () {
    function NodeIndex() {
        this.entries = new Map();
    }
    NodeIndex.prototype.get = function (id) {
        var time = id.time;
        var sessionId = id.sid;
        var map1 = this.entries;
        var map2 = map1.get(sessionId);
        if (!map2)
            return undefined;
        var operation = map2.get(time);
        if (operation)
            return operation;
        return undefined;
    };
    NodeIndex.prototype.set = function (operation) {
        var id = operation.id;
        var sessionId = id.sid;
        var time = id.time;
        var map = this.entries.get(sessionId);
        if (!map) {
            map = new Map();
            this.entries.set(sessionId, map);
        }
        map.set(time, operation);
    };
    NodeIndex.prototype.delete = function (id) {
        var time = id.time;
        var timeMap = this.entries.get(id.sid);
        if (!timeMap)
            return;
        timeMap.delete(time);
    };
    NodeIndex.prototype.forEach = function (callback) {
        this.entries.forEach(function (map) {
            map.forEach(callback);
        });
    };
    NodeIndex.prototype.toString = function (tab) {
        if (tab === void 0) { tab = ''; }
        var lines = [];
        this.forEach(function (node) {
            lines.push("".concat(node.constructor.name, " ").concat((0, clock_1.toDisplayString)(node.id)));
        });
        var out = '';
        for (var i = 0; i < lines.length; i++) {
            var isLast = i === lines.length - 1;
            out += "\n".concat(tab).concat(isLast ? '└─' : '├─', " ").concat(lines[i]);
        }
        return "".concat(this.constructor.name).concat(out);
    };
    return NodeIndex;
}());
exports.NodeIndex = NodeIndex;
