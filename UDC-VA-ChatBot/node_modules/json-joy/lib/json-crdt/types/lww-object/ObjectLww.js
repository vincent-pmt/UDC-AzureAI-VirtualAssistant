"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectLww = void 0;
var tslib_1 = require("tslib");
var clock_1 = require("../../../json-crdt-patch/clock");
var printTree_1 = require("../../../util/print/printTree");
var ObjectLww = (function () {
    function ObjectLww(doc, id) {
        this.doc = doc;
        this.id = id;
        this.keys = new Map();
        this._view = {};
    }
    ObjectLww.prototype.get = function (key) {
        var id = this.keys.get(key);
        if (!id)
            return undefined;
        return this.doc.index.get(id);
    };
    ObjectLww.prototype.put = function (key, id) {
        var currentId = this.keys.get(key);
        if (currentId && (0, clock_1.compare)(currentId, id) >= 0)
            return;
        this.keys.set(key, id);
        return currentId;
    };
    ObjectLww.prototype.view = function () {
        var e_1, _a;
        var _toJson = this._view;
        var obj = {};
        var useCache = true;
        var index = this.doc.index;
        try {
            for (var _b = tslib_1.__values(this.keys.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = tslib_1.__read(_c.value, 2), key = _d[0], id = _d[1];
                var value = index.get(id).view();
                if (value !== undefined) {
                    if (_toJson[key] !== value)
                        useCache = false;
                    obj[key] = value;
                }
                else {
                    if (_toJson[key] !== undefined)
                        useCache = false;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return useCache ? _toJson : (this._view = obj);
    };
    ObjectLww.prototype.nodes = function (callback) {
        var index = this.doc.index;
        this.keys.forEach(function (id, key) { return callback(index.get(id), key); });
    };
    ObjectLww.prototype.children = function (callback) {
        var index = this.doc.index;
        this.keys.forEach(function (id, key) { return callback(index.get(id)); });
    };
    ObjectLww.prototype.child = function () {
        return undefined;
    };
    ObjectLww.prototype.container = function () {
        return this;
    };
    ObjectLww.prototype.toString = function (tab) {
        var _this = this;
        if (tab === void 0) { tab = ''; }
        var header = this.constructor.name + ' ' + (0, clock_1.toDisplayString)(this.id);
        return (header +
            (0, printTree_1.printTree)(tab, tslib_1.__spreadArray([], tslib_1.__read(this.keys.entries()), false).map(function (_a) {
                var _b = tslib_1.__read(_a, 2), key = _b[0], id = _b[1];
                return function (tab) {
                    return JSON.stringify(key) + (0, printTree_1.printTree)(tab + ' ', [function (tab) { return _this.doc.index.get(id).toString(tab); }]);
                };
            })));
    };
    return ObjectLww;
}());
exports.ObjectLww = ObjectLww;
