"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BinaryRga = exports.BinaryChunk = void 0;
var tslib_1 = require("tslib");
var clock_1 = require("../../../json-crdt-patch/clock");
var AbstractRga_1 = require("../rga/AbstractRga");
var BinaryChunk = (function () {
    function BinaryChunk(id, span, buf) {
        this.id = id;
        this.span = span;
        this.len = buf ? span : 0;
        this.del = !buf;
        this.p = undefined;
        this.l = undefined;
        this.r = undefined;
        this.s = undefined;
        this.data = buf;
    }
    BinaryChunk.prototype.merge = function (data) {
        var length = this.data.length;
        var combined = new Uint8Array(length + data.length);
        combined.set(this.data);
        combined.set(data, length);
        this.data = combined;
        this.span = combined.length;
    };
    BinaryChunk.prototype.split = function (ticks) {
        if (!this.del) {
            var data = this.data;
            var rightBuffer = data.subarray(ticks);
            var chunk_1 = new BinaryChunk((0, clock_1.tick)(this.id, ticks), this.span - ticks, rightBuffer);
            this.data = data.subarray(0, ticks);
            this.span = ticks;
            return chunk_1;
        }
        var chunk = new BinaryChunk((0, clock_1.tick)(this.id, ticks), this.span - ticks, undefined);
        this.span = ticks;
        return chunk;
    };
    BinaryChunk.prototype.delete = function () {
        this.del = true;
        this.data = undefined;
    };
    BinaryChunk.prototype.clone = function () {
        var chunk = new BinaryChunk(this.id, this.span, this.data);
        return chunk;
    };
    return BinaryChunk;
}());
exports.BinaryChunk = BinaryChunk;
var BinaryRga = (function (_super) {
    tslib_1.__extends(BinaryRga, _super);
    function BinaryRga() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._view = null;
        return _this;
    }
    BinaryRga.prototype.create = function () {
        return new BinaryRga(this.id);
    };
    BinaryRga.prototype.createChunk = function (id, buf) {
        return new BinaryChunk(id, buf ? buf.length : 0, buf);
    };
    BinaryRga.prototype.onViewChange = function () {
        this._view = null;
    };
    BinaryRga.prototype.view = function () {
        if (this._view)
            return this._view;
        var res = new Uint8Array(this.length());
        var offset = 0;
        var chunk = this.first();
        while (chunk) {
            if (!chunk.del) {
                var buf = chunk.data;
                res.set(buf, offset);
                offset += buf.length;
            }
            chunk = this.next(chunk);
        }
        return (this._view = res);
    };
    BinaryRga.prototype.children = function () { };
    BinaryRga.prototype.child = function () {
        return undefined;
    };
    BinaryRga.prototype.container = function () {
        return undefined;
    };
    return BinaryRga;
}(AbstractRga_1.AbstractRga));
exports.BinaryRga = BinaryRga;
