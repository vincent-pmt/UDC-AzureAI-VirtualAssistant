import { AbstractRga, Chunk } from '../rga/AbstractRga';
import { ITimestampStruct } from '../../../json-crdt-patch/clock';
import { Model } from '../../model';
import type { JsonNode } from '../../types';
import type { Printable } from '../../../util/print/types';
type E = ITimestampStruct;
export declare class ArrayChunk implements Chunk<E[]> {
    readonly id: ITimestampStruct;
    span: number;
    del: boolean;
    data: E[] | undefined;
    len: number;
    p: ArrayChunk | undefined;
    l: ArrayChunk | undefined;
    r: ArrayChunk | undefined;
    p2: ArrayChunk | undefined;
    l2: ArrayChunk | undefined;
    r2: ArrayChunk | undefined;
    s: ArrayChunk | undefined;
    constructor(id: ITimestampStruct, span: number, data: E[] | undefined);
    merge(data: E[]): void;
    split(ticks: number): ArrayChunk;
    delete(): void;
    clone(): ArrayChunk;
}
export declare class ArrayRga extends AbstractRga<E[]> implements JsonNode, Printable {
    readonly doc: Model;
    constructor(doc: Model, id: ITimestampStruct);
    protected create(): ArrayRga;
    createChunk(id: ITimestampStruct, data: E[] | undefined): ArrayChunk;
    protected onViewChange(): void;
    private _view;
    view(): unknown[];
    children(callback: (node: JsonNode) => void): void;
    get(position: number): E | undefined;
    getNode(position: number): JsonNode | undefined;
    getById(id: ITimestampStruct): E | undefined;
    child(): undefined;
    container(): JsonNode | undefined;
    protected printChunk(tab: string, chunk: ArrayChunk): string;
}
export {};
