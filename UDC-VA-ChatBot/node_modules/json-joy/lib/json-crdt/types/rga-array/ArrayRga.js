"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayRga = exports.ArrayChunk = void 0;
var tslib_1 = require("tslib");
var AbstractRga_1 = require("../rga/AbstractRga");
var clock_1 = require("../../../json-crdt-patch/clock");
var printBinary_1 = require("../../../util/print/printBinary");
var printTree_1 = require("../../../util/print/printTree");
var Empty = [];
var ArrayChunk = (function () {
    function ArrayChunk(id, span, data) {
        this.id = id;
        this.span = span;
        this.len = data ? span : 0;
        this.del = !data;
        this.p = undefined;
        this.l = undefined;
        this.r = undefined;
        this.s = undefined;
        this.data = data;
    }
    ArrayChunk.prototype.merge = function (data) {
        var _a;
        (_a = this.data).push.apply(_a, tslib_1.__spreadArray([], tslib_1.__read(data), false));
        this.span = this.data.length;
    };
    ArrayChunk.prototype.split = function (ticks) {
        var span = this.span;
        this.span = ticks;
        if (!this.del) {
            var data = this.data;
            var rightData = data.splice(ticks);
            var chunk = new ArrayChunk((0, clock_1.tick)(this.id, ticks), span - ticks, rightData);
            return chunk;
        }
        return new ArrayChunk((0, clock_1.tick)(this.id, ticks), span - ticks, undefined);
    };
    ArrayChunk.prototype.delete = function () {
        this.del = true;
        this.data = undefined;
    };
    ArrayChunk.prototype.clone = function () {
        return new ArrayChunk(this.id, this.span, this.data ? tslib_1.__spreadArray([], tslib_1.__read(this.data), false) : undefined);
    };
    return ArrayChunk;
}());
exports.ArrayChunk = ArrayChunk;
var ArrayRga = (function (_super) {
    tslib_1.__extends(ArrayRga, _super);
    function ArrayRga(doc, id) {
        var _this = _super.call(this, id) || this;
        _this.doc = doc;
        _this._view = Empty;
        return _this;
    }
    ArrayRga.prototype.create = function () {
        return new ArrayRga(this.doc, this.id);
    };
    ArrayRga.prototype.createChunk = function (id, data) {
        return new ArrayChunk(id, data ? data.length : 0, data);
    };
    ArrayRga.prototype.onViewChange = function () {
        this._view = Empty;
    };
    ArrayRga.prototype.view = function () {
        var e_1, _a;
        var arr = [];
        var chunk = this.first();
        var index = this.doc.index;
        while (chunk) {
            if (!chunk.del)
                try {
                    for (var _b = (e_1 = void 0, tslib_1.__values(chunk.data)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var node = _c.value;
                        arr.push(index.get(node).view());
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            chunk = this.next(chunk);
        }
        var _view = this._view;
        if (arr.length !== _view.length)
            return (this._view = arr);
        for (var i = 0; i < arr.length; i++)
            if (arr[i] !== _view[i])
                return (this._view = arr);
        return _view;
    };
    ArrayRga.prototype.children = function (callback) {
        var e_2, _a;
        var index = this.doc.index;
        for (var chunk = this.first(); chunk; chunk = this.next(chunk))
            if (!chunk.del)
                try {
                    for (var _b = (e_2 = void 0, tslib_1.__values(chunk.data)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var node = _c.value;
                        callback(index.get(node));
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
    };
    ArrayRga.prototype.get = function (position) {
        var pair = this.findChunk(position);
        if (!pair)
            return undefined;
        return pair[0].data[pair[1]];
    };
    ArrayRga.prototype.getNode = function (position) {
        var id = this.get(position);
        if (!id)
            return undefined;
        return this.doc.index.get(id);
    };
    ArrayRga.prototype.getById = function (id) {
        var chunk = this.findById(id);
        if (!chunk || chunk.del)
            return undefined;
        var offset = id.time - chunk.id.time;
        return chunk.data[offset];
    };
    ArrayRga.prototype.child = function () {
        return undefined;
    };
    ArrayRga.prototype.container = function () {
        return this;
    };
    ArrayRga.prototype.printChunk = function (tab, chunk) {
        var _this = this;
        var pos = this.pos(chunk);
        var valueTree = '';
        if (!chunk.del) {
            var index_1 = this.doc.index;
            valueTree = (0, printTree_1.printTree)(tab, chunk.data.map(function (id, i) { return function (tab) { return "[".concat(pos + i, "]: ").concat(index_1.get(id).toString(tab + '    ' + ' '.repeat(String(i).length))); }; }));
        }
        return (this.formatChunk(chunk) +
            valueTree +
            (0, printBinary_1.printBinary)(tab, [
                chunk.l ? function (tab) { return _this.printChunk(tab, chunk.l); } : null,
                chunk.r ? function (tab) { return _this.printChunk(tab, chunk.r); } : null,
            ]));
    };
    return ArrayRga;
}(AbstractRga_1.AbstractRga));
exports.ArrayRga = ArrayRga;
