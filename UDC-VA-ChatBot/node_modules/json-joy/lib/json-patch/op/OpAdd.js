"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpAdd = void 0;
var tslib_1 = require("tslib");
var AbstractOp_1 = require("./AbstractOp");
var json_pointer_1 = require("../../json-pointer");
var clone_1 = require("../../json-clone/clone");
var OpAdd = (function (_super) {
    tslib_1.__extends(OpAdd, _super);
    function OpAdd(path, value) {
        var _this = _super.call(this, path) || this;
        _this.value = value;
        return _this;
    }
    OpAdd.prototype.op = function () {
        return 'add';
    };
    OpAdd.prototype.code = function () {
        return 0;
    };
    OpAdd.prototype.apply = function (doc) {
        var _a = (0, json_pointer_1.find)(doc, this.path), val = _a.val, key = _a.key, obj = _a.obj;
        var value = (0, clone_1.clone)(this.value);
        if (!obj)
            doc = value;
        else if (typeof key === 'string')
            obj[key] = value;
        else {
            var length_1 = obj.length;
            if (key < length_1)
                obj.splice(key, 0, value);
            else if (key > length_1)
                throw new Error('INVALID_INDEX');
            else
                obj.push(value);
        }
        return { doc: doc, old: val };
    };
    OpAdd.prototype.toJson = function (parent) {
        return {
            op: 'add',
            path: (0, json_pointer_1.formatJsonPointer)(this.path),
            value: this.value,
        };
    };
    OpAdd.prototype.toCompact = function (parent, verbose) {
        var opcode = verbose ? 'add' : 0;
        return [opcode, this.path, this.value];
    };
    OpAdd.prototype.encode = function (encoder) {
        encoder.encodeArrayHeader(3);
        encoder.writer.u8(0);
        encoder.encodeArray(this.path);
        encoder.encodeAny(this.value);
    };
    return OpAdd;
}(AbstractOp_1.AbstractOp));
exports.OpAdd = OpAdd;
