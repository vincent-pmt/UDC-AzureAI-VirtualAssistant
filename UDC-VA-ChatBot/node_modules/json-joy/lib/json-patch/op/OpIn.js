"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpIn = void 0;
var tslib_1 = require("tslib");
var json_pointer_1 = require("../../json-pointer");
var AbstractPredicateOp_1 = require("./AbstractPredicateOp");
var deepEqual_1 = require("../../json-equal/deepEqual");
var OpIn = (function (_super) {
    tslib_1.__extends(OpIn, _super);
    function OpIn(path, value) {
        var _this = _super.call(this, path) || this;
        _this.value = value;
        return _this;
    }
    OpIn.prototype.op = function () {
        return 'in';
    };
    OpIn.prototype.code = function () {
        return 33;
    };
    OpIn.prototype.test = function (doc) {
        var e_1, _a;
        var val = (0, json_pointer_1.find)(doc, this.path).val;
        try {
            for (var _b = tslib_1.__values(this.value), _c = _b.next(); !_c.done; _c = _b.next()) {
                var x = _c.value;
                if ((0, deepEqual_1.deepEqual)(val, x))
                    return true;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
    };
    OpIn.prototype.toJson = function (parent) {
        var op = {
            op: 'in',
            path: (0, json_pointer_1.formatJsonPointer)(parent ? this.path.slice(parent.path.length) : this.path),
            value: this.value,
        };
        return op;
    };
    OpIn.prototype.toCompact = function (parent, verbose) {
        var opcode = verbose ? 'in' : 33;
        return [opcode, parent ? this.path.slice(parent.path.length) : this.path, this.value];
    };
    OpIn.prototype.encode = function (encoder, parent) {
        encoder.encodeArrayHeader(3);
        encoder.writer.u8(33);
        encoder.encodeArray(parent ? this.path.slice(parent.path.length) : this.path);
        encoder.encodeArray(this.value);
    };
    return OpIn;
}(AbstractPredicateOp_1.AbstractPredicateOp));
exports.OpIn = OpIn;
