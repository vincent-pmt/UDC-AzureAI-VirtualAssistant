"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpStrIns = void 0;
var tslib_1 = require("tslib");
var AbstractOp_1 = require("./AbstractOp");
var json_pointer_1 = require("../../json-pointer");
var OpStrIns = (function (_super) {
    tslib_1.__extends(OpStrIns, _super);
    function OpStrIns(path, pos, str) {
        var _this = _super.call(this, path) || this;
        _this.pos = pos;
        _this.str = str;
        return _this;
    }
    OpStrIns.prototype.op = function () {
        return 'str_ins';
    };
    OpStrIns.prototype.code = function () {
        return 6;
    };
    OpStrIns.prototype.apply = function (doc) {
        var _a = (0, json_pointer_1.find)(doc, this.path), val = _a.val, key = _a.key, obj = _a.obj;
        if (typeof val !== 'string') {
            if (val !== undefined)
                throw new Error('NOT_A_STRING');
            if (this.pos !== 0)
                throw new Error('POS');
        }
        var str = typeof val === 'string' ? val : '';
        var pos = Math.min(this.pos, str.length);
        var before = str.slice(0, pos);
        var after = str.slice(pos);
        var result = before + this.str + after;
        if (obj)
            obj[key] = result;
        else
            doc = result;
        return { doc: doc, old: val };
    };
    OpStrIns.prototype.toJson = function (parent) {
        var op = {
            op: 'str_ins',
            path: (0, json_pointer_1.formatJsonPointer)(this.path),
            pos: this.pos,
            str: this.str,
        };
        return op;
    };
    OpStrIns.prototype.toCompact = function (parent, verbose) {
        var opcode = verbose ? 'str_ins' : 6;
        return [opcode, this.path, this.pos, this.str];
    };
    OpStrIns.prototype.encode = function (encoder, parent) {
        encoder.encodeArrayHeader(4);
        encoder.writer.u8(6);
        encoder.encodeArray(this.path);
        encoder.encodeNumber(this.pos);
        encoder.encodeString(this.str);
    };
    return OpStrIns;
}(AbstractOp_1.AbstractOp));
exports.OpStrIns = OpStrIns;
