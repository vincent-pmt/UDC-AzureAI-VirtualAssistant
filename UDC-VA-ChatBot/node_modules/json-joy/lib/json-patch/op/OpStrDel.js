"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpStrDel = void 0;
var tslib_1 = require("tslib");
var AbstractOp_1 = require("./AbstractOp");
var json_pointer_1 = require("../../json-pointer");
var OpStrDel = (function (_super) {
    tslib_1.__extends(OpStrDel, _super);
    function OpStrDel(path, pos, str, len) {
        var _this = _super.call(this, path) || this;
        _this.pos = pos;
        _this.str = str;
        _this.len = len;
        return _this;
    }
    OpStrDel.prototype.op = function () {
        return 'str_del';
    };
    OpStrDel.prototype.code = function () {
        return 7;
    };
    OpStrDel.prototype.deleteLength = function () {
        return typeof this.str === 'string' ? this.str.length : this.len;
    };
    OpStrDel.prototype.apply = function (doc) {
        var _a = (0, json_pointer_1.find)(doc, this.path), val = _a.val, key = _a.key, obj = _a.obj;
        if (typeof val !== 'string')
            throw new Error('NOT_A_STRING');
        var length = val.length;
        var pos = Math.min(this.pos, val.length);
        var start = Math.min(pos, length);
        var deletionLength = this.str !== undefined ? this.str.length : this.len;
        var end = Math.min(pos + deletionLength, length);
        var before = val.slice(0, start);
        var after = val.substr(end);
        var result = before + after;
        if (obj)
            obj[key] = result;
        else
            doc = result;
        return { doc: doc, old: val };
    };
    OpStrDel.prototype.toJson = function (parent) {
        if (typeof this.str === 'string') {
            return {
                op: 'str_del',
                path: (0, json_pointer_1.formatJsonPointer)(this.path),
                pos: this.pos,
                str: this.str,
            };
        }
        return {
            op: 'str_del',
            path: (0, json_pointer_1.formatJsonPointer)(this.path),
            pos: this.pos,
            len: this.len,
        };
    };
    OpStrDel.prototype.toCompact = function (parent, verbose) {
        var opcode = verbose ? 'str_del' : 7;
        return typeof this.str === 'string'
            ? [opcode, this.path, this.pos, this.str]
            : [opcode, this.path, this.pos, 0, this.len];
    };
    OpStrDel.prototype.encode = function (encoder, parent) {
        var hasStr = typeof this.str === 'string';
        encoder.encodeArrayHeader(hasStr ? 4 : 5);
        encoder.writer.u8(7);
        encoder.encodeArray(this.path);
        encoder.encodeNumber(this.pos);
        if (hasStr) {
            encoder.encodeString(this.str);
        }
        else {
            encoder.writer.u8(0);
            encoder.encodeNumber(this.len);
        }
    };
    return OpStrDel;
}(AbstractOp_1.AbstractOp));
exports.OpStrDel = OpStrDel;
