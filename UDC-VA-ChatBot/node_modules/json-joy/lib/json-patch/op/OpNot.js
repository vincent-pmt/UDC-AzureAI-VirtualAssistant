"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpNot = void 0;
var tslib_1 = require("tslib");
var AbstractSecondOrderPredicateOp_1 = require("./AbstractSecondOrderPredicateOp");
var json_pointer_1 = require("../../json-pointer");
var OpNot = (function (_super) {
    tslib_1.__extends(OpNot, _super);
    function OpNot(path, ops) {
        var _this = _super.call(this, path, ops) || this;
        _this.ops = ops;
        return _this;
    }
    OpNot.prototype.op = function () {
        return 'not';
    };
    OpNot.prototype.code = function () {
        return 44;
    };
    OpNot.prototype.test = function (doc) {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(this.ops), _c = _b.next(); !_c.done; _c = _b.next()) {
                var op = _c.value;
                if (op.test(doc))
                    return false;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return true;
    };
    OpNot.prototype.toJson = function (parent) {
        var _this = this;
        var op = {
            op: 'not',
            path: (0, json_pointer_1.formatJsonPointer)(parent ? this.path.slice(parent.path.length) : this.path),
            apply: this.ops.map(function (op) { return op.toJson(_this); }),
        };
        return op;
    };
    OpNot.prototype.toCompact = function (parent, verbose) {
        var _this = this;
        var opcode = verbose ? 'not' : 44;
        return [
            opcode,
            parent ? this.path.slice(parent.path.length) : this.path,
            this.ops.map(function (op) { return op.toCompact(_this, verbose); }),
        ];
    };
    OpNot.prototype.encode = function (encoder, parent) {
        encoder.encodeArrayHeader(3);
        encoder.writer.u8(44);
        encoder.encodeArray(parent ? this.path.slice(parent.path.length) : this.path);
        var length = this.ops.length;
        encoder.encodeArrayHeader(length);
        for (var i = 0; i < length; i++)
            this.ops[i].encode(encoder, this);
    };
    return OpNot;
}(AbstractSecondOrderPredicateOp_1.AbstractSecondOrderPredicateOp));
exports.OpNot = OpNot;
