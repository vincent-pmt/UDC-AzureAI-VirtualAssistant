"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpEnds = void 0;
var tslib_1 = require("tslib");
var AbstractPredicateOp_1 = require("./AbstractPredicateOp");
var json_pointer_1 = require("../../json-pointer");
var OpEnds = (function (_super) {
    tslib_1.__extends(OpEnds, _super);
    function OpEnds(path, value, ignore_case) {
        var _this = _super.call(this, path) || this;
        _this.value = value;
        _this.ignore_case = ignore_case;
        return _this;
    }
    OpEnds.prototype.op = function () {
        return 'ends';
    };
    OpEnds.prototype.code = function () {
        return 32;
    };
    OpEnds.prototype.test = function (doc) {
        var val = (0, json_pointer_1.find)(doc, this.path).val;
        if (typeof val !== 'string')
            return false;
        var outer = this.ignore_case ? val.toLowerCase() : val;
        var inner = this.ignore_case ? this.value.toLowerCase() : this.value;
        var test = outer.endsWith(inner);
        return test;
    };
    OpEnds.prototype.toJson = function (parent) {
        var op = {
            op: 'ends',
            path: (0, json_pointer_1.formatJsonPointer)(parent ? this.path.slice(parent.path.length) : this.path),
            value: this.value,
        };
        if (this.ignore_case)
            op.ignore_case = this.ignore_case;
        return op;
    };
    OpEnds.prototype.toCompact = function (parent, verbose) {
        var opcode = verbose ? 'ends' : 32;
        return this.ignore_case
            ? [opcode, parent ? this.path.slice(parent.path.length) : this.path, this.value, 1]
            : [opcode, parent ? this.path.slice(parent.path.length) : this.path, this.value];
    };
    OpEnds.prototype.encode = function (encoder, parent) {
        var ignoreCase = this.ignore_case;
        encoder.encodeArrayHeader(ignoreCase ? 4 : 3);
        encoder.writer.u8(32);
        encoder.encodeArray(parent ? this.path.slice(parent.path.length) : this.path);
        encoder.encodeString(this.value);
        if (ignoreCase)
            encoder.writer.u8(1);
    };
    return OpEnds;
}(AbstractPredicateOp_1.AbstractPredicateOp));
exports.OpEnds = OpEnds;
