"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpTestType = void 0;
var tslib_1 = require("tslib");
var AbstractPredicateOp_1 = require("./AbstractPredicateOp");
var json_pointer_1 = require("../../json-pointer");
var isArray = Array.isArray;
var OpTestType = (function (_super) {
    tslib_1.__extends(OpTestType, _super);
    function OpTestType(path, type) {
        var _this = _super.call(this, path) || this;
        _this.type = type;
        return _this;
    }
    OpTestType.prototype.op = function () {
        return 'test_type';
    };
    OpTestType.prototype.code = function () {
        return 39;
    };
    OpTestType.prototype.test = function (doc) {
        var val = (0, json_pointer_1.find)(doc, this.path).val;
        if (val === null)
            return this.type.indexOf('null') > -1;
        if (isArray(val))
            return this.type.indexOf('array') > -1;
        if (this.type.indexOf(typeof val) > -1)
            return true;
        if (typeof val === 'number' && val === Math.round(val) && this.type.indexOf('integer') > -1)
            return true;
        return false;
    };
    OpTestType.prototype.toJson = function (parent) {
        var op = {
            op: 'test_type',
            path: (0, json_pointer_1.formatJsonPointer)(parent ? this.path.slice(parent.path.length) : this.path),
            type: this.type,
        };
        return op;
    };
    OpTestType.prototype.toCompact = function (parent, verbose) {
        var opcode = verbose ? 'test_type' : 39;
        return [opcode, parent ? this.path.slice(parent.path.length) : this.path, this.type];
    };
    OpTestType.prototype.encode = function (encoder, parent) {
        encoder.encodeArrayHeader(3);
        encoder.writer.u8(39);
        encoder.encodeArray(parent ? this.path.slice(parent.path.length) : this.path);
        encoder.encodeArray(this.type);
    };
    return OpTestType;
}(AbstractPredicateOp_1.AbstractPredicateOp));
exports.OpTestType = OpTestType;
