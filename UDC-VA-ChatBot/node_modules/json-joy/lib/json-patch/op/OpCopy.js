"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpCopy = void 0;
var tslib_1 = require("tslib");
var AbstractOp_1 = require("./AbstractOp");
var json_pointer_1 = require("../../json-pointer");
var OpAdd_1 = require("./OpAdd");
var clone_1 = require("../../json-clone/clone");
var OpCopy = (function (_super) {
    tslib_1.__extends(OpCopy, _super);
    function OpCopy(path, from) {
        var _this = _super.call(this, path) || this;
        _this.from = from;
        return _this;
    }
    OpCopy.prototype.op = function () {
        return 'copy';
    };
    OpCopy.prototype.code = function () {
        return 3;
    };
    OpCopy.prototype.apply = function (doc) {
        var val = (0, json_pointer_1.find)(doc, this.from).val;
        if (val === undefined)
            throw new Error('NOT_FOUND');
        var add = new OpAdd_1.OpAdd(this.path, (0, clone_1.clone)(val)).apply(doc);
        return add;
    };
    OpCopy.prototype.toJson = function (parent) {
        return {
            op: 'copy',
            path: (0, json_pointer_1.formatJsonPointer)(this.path),
            from: (0, json_pointer_1.formatJsonPointer)(this.from),
        };
    };
    OpCopy.prototype.toCompact = function (parent, verbose) {
        var opcode = verbose ? 'copy' : 3;
        return [opcode, this.path, this.from];
    };
    OpCopy.prototype.encode = function (encoder, parent) {
        encoder.encodeArrayHeader(3);
        encoder.writer.u8(3);
        encoder.encodeArray(this.path);
        encoder.encodeArray(this.from);
    };
    return OpCopy;
}(AbstractOp_1.AbstractOp));
exports.OpCopy = OpCopy;
