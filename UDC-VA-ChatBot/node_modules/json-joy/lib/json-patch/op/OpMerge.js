"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpMerge = void 0;
var tslib_1 = require("tslib");
var AbstractOp_1 = require("./AbstractOp");
var json_pointer_1 = require("../../json-pointer");
var util_1 = require("../util");
var OpMerge = (function (_super) {
    tslib_1.__extends(OpMerge, _super);
    function OpMerge(path, pos, props) {
        var _this = _super.call(this, path) || this;
        _this.pos = pos;
        _this.props = props;
        return _this;
    }
    OpMerge.prototype.op = function () {
        return 'merge';
    };
    OpMerge.prototype.code = function () {
        return 11;
    };
    OpMerge.prototype.apply = function (doc) {
        var ref = (0, json_pointer_1.find)(doc, this.path);
        if (!(0, json_pointer_1.isArrayReference)(ref))
            throw new Error('INVALID_TARGET');
        if (ref.key <= 0)
            throw new Error('INVALID_KEY');
        var one = ref.obj[ref.key - 1];
        var two = ref.obj[ref.key];
        var merged = this.merge(one, two);
        ref.obj[ref.key - 1] = merged;
        ref.obj.splice(ref.key, 1);
        return { doc: doc, old: [one, two] };
    };
    OpMerge.prototype.merge = function (one, two) {
        if (typeof one === 'string' && typeof two === 'string')
            return one + two;
        if (typeof one === 'number' && typeof two === 'number')
            return one + two;
        if ((0, util_1.isTextNode)(one) && (0, util_1.isTextNode)(two))
            return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, one), two), { text: one.text + two.text });
        if ((0, util_1.isElementNode)(one) && (0, util_1.isElementNode)(two))
            return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, one), two), { children: tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(one.children), false), tslib_1.__read(two.children), false) });
        return [one, two];
    };
    OpMerge.prototype.toJson = function (parent) {
        var op = {
            op: 'merge',
            path: (0, json_pointer_1.formatJsonPointer)(this.path),
            pos: this.pos,
        };
        if (this.props)
            op.props = this.props;
        return op;
    };
    OpMerge.prototype.toCompact = function (parent, verbose) {
        var opcode = verbose ? 'merge' : 11;
        return this.props ? [opcode, this.path, this.pos, this.props] : [opcode, this.path, this.pos];
    };
    OpMerge.prototype.encode = function (encoder, parent) {
        encoder.encodeArrayHeader(this.props ? 4 : 3);
        encoder.writer.u8(11);
        encoder.encodeArray(this.path);
        encoder.encodeNumber(this.pos);
        if (this.props)
            encoder.encodeAny(this.props);
    };
    return OpMerge;
}(AbstractOp_1.AbstractOp));
exports.OpMerge = OpMerge;
