"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpSplit = void 0;
var tslib_1 = require("tslib");
var AbstractOp_1 = require("./AbstractOp");
var json_pointer_1 = require("../../json-pointer");
var util_1 = require("../util");
var OpSplit = (function (_super) {
    tslib_1.__extends(OpSplit, _super);
    function OpSplit(path, pos, props) {
        var _this = _super.call(this, path) || this;
        _this.pos = pos;
        _this.props = props;
        return _this;
    }
    OpSplit.prototype.op = function () {
        return 'split';
    };
    OpSplit.prototype.code = function () {
        return 10;
    };
    OpSplit.prototype.apply = function (doc) {
        var ref = (0, json_pointer_1.find)(doc, this.path);
        if (ref.val === undefined)
            throw new Error('NOT_FOUND');
        var tuple = this.split(ref.val);
        if ((0, json_pointer_1.isObjectReference)(ref))
            ref.obj[ref.key] = tuple;
        else if ((0, json_pointer_1.isArrayReference)(ref)) {
            ref.obj[ref.key] = tuple[0];
            ref.obj.splice(ref.key + 1, 0, tuple[1]);
        }
        else
            doc = tuple;
        return { doc: doc, old: ref.val };
    };
    OpSplit.prototype.split = function (node) {
        if (typeof node === 'string') {
            var _a = this, pos = _a.pos, props = _a.props;
            var before = node.slice(0, pos);
            var after = node.slice(pos);
            if (!props)
                return [before, after];
            var textNodes = [
                tslib_1.__assign(tslib_1.__assign({}, props), { text: before }),
                tslib_1.__assign(tslib_1.__assign({}, props), { text: after }),
            ];
            return textNodes;
        }
        else if ((0, util_1.isTextNode)(node)) {
            var _b = this, pos = _b.pos, props = _b.props;
            var before = node.text.slice(0, pos);
            var after = node.text.slice(pos);
            var textNodes = [
                tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, node), props), { text: before }),
                tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, node), props), { text: after }),
            ];
            return textNodes;
        }
        else if ((0, util_1.isElementNode)(node)) {
            var _c = this, pos = _c.pos, props = _c.props;
            var before = node.children.slice(0, pos);
            var after = node.children.slice(pos);
            var elementNodes = [
                tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, node), props), { children: before }),
                tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, node), props), { children: after }),
            ];
            return elementNodes;
        }
        else if (typeof node === 'number') {
            var pos = this.pos;
            return [pos, node - pos];
        }
        else
            return [node, node];
    };
    OpSplit.prototype.toJson = function (parent) {
        var op = {
            op: 'split',
            path: (0, json_pointer_1.formatJsonPointer)(this.path),
            pos: this.pos,
        };
        if (this.props)
            op.props = this.props;
        return op;
    };
    OpSplit.prototype.toCompact = function (parent, verbose) {
        var opcode = verbose ? 'split' : 10;
        return this.props ? [opcode, this.path, this.pos, this.props] : [opcode, this.path, this.pos];
    };
    OpSplit.prototype.encode = function (encoder, parent) {
        encoder.encodeArrayHeader(this.props ? 4 : 3);
        encoder.writer.u8(10);
        encoder.encodeArray(this.path);
        encoder.encodeNumber(this.pos);
        if (this.props)
            encoder.encodeObject(this.props);
    };
    return OpSplit;
}(AbstractOp_1.AbstractOp));
exports.OpSplit = OpSplit;
