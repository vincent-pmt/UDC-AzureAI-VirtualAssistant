"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpLess = void 0;
var tslib_1 = require("tslib");
var AbstractPredicateOp_1 = require("./AbstractPredicateOp");
var json_pointer_1 = require("../../json-pointer");
var OpLess = (function (_super) {
    tslib_1.__extends(OpLess, _super);
    function OpLess(path, value) {
        var _this = _super.call(this, path) || this;
        _this.value = value;
        return _this;
    }
    OpLess.prototype.op = function () {
        return 'less';
    };
    OpLess.prototype.code = function () {
        return 34;
    };
    OpLess.prototype.test = function (doc) {
        var val = (0, json_pointer_1.find)(doc, this.path).val;
        if (typeof val !== 'number')
            return false;
        var test = val < this.value;
        return test;
    };
    OpLess.prototype.toJson = function (parent) {
        var op = {
            op: 'less',
            path: (0, json_pointer_1.formatJsonPointer)(parent ? this.path.slice(parent.path.length) : this.path),
            value: this.value,
        };
        return op;
    };
    OpLess.prototype.toCompact = function (parent, verbose) {
        var opcode = verbose ? 'less' : 34;
        return [opcode, parent ? this.path.slice(parent.path.length) : this.path, this.value];
    };
    OpLess.prototype.encode = function (encoder, parent) {
        encoder.encodeArrayHeader(3);
        encoder.writer.u8(34);
        encoder.encodeArray(parent ? this.path.slice(parent.path.length) : this.path);
        encoder.encodeNumber(this.value);
    };
    return OpLess;
}(AbstractPredicateOp_1.AbstractPredicateOp));
exports.OpLess = OpLess;
