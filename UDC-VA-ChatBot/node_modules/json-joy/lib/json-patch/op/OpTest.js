"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpTest = void 0;
var tslib_1 = require("tslib");
var json_pointer_1 = require("../../json-pointer");
var AbstractPredicateOp_1 = require("./AbstractPredicateOp");
var deepEqual_1 = require("../../json-equal/deepEqual");
var OpTest = (function (_super) {
    tslib_1.__extends(OpTest, _super);
    function OpTest(path, value, not) {
        var _this = _super.call(this, path) || this;
        _this.value = value;
        _this.not = not;
        return _this;
    }
    OpTest.prototype.op = function () {
        return 'test';
    };
    OpTest.prototype.code = function () {
        return 5;
    };
    OpTest.prototype.test = function (doc) {
        var val = (0, json_pointer_1.find)(doc, this.path).val;
        if (val === undefined)
            return !!this.not;
        var test = (0, deepEqual_1.deepEqual)(val, this.value);
        return this.not ? !test : test;
    };
    OpTest.prototype.toJson = function (parent) {
        var op = {
            op: 'test',
            path: (0, json_pointer_1.formatJsonPointer)(parent ? this.path.slice(parent.path.length) : this.path),
            value: this.value,
        };
        if (this.not)
            op.not = this.not;
        return op;
    };
    OpTest.prototype.toCompact = function (parent, verbose) {
        var path = parent ? this.path.slice(parent.path.length) : this.path;
        var opcode = verbose ? 'test' : 5;
        return this.not ? [opcode, path, this.value, 1] : [opcode, path, this.value];
    };
    OpTest.prototype.encode = function (encoder, parent) {
        encoder.encodeArrayHeader(this.not ? 4 : 3);
        encoder.writer.u8(5);
        encoder.encodeArray(parent ? this.path.slice(parent.path.length) : this.path);
        encoder.encodeAny(this.value);
        if (this.not)
            encoder.writer.u8(1);
    };
    return OpTest;
}(AbstractPredicateOp_1.AbstractPredicateOp));
exports.OpTest = OpTest;
