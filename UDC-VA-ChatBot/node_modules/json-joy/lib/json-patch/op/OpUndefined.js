"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpUndefined = void 0;
var tslib_1 = require("tslib");
var AbstractPredicateOp_1 = require("./AbstractPredicateOp");
var json_pointer_1 = require("../../json-pointer");
var OpUndefined = (function (_super) {
    tslib_1.__extends(OpUndefined, _super);
    function OpUndefined(path) {
        return _super.call(this, path) || this;
    }
    OpUndefined.prototype.op = function () {
        return 'undefined';
    };
    OpUndefined.prototype.code = function () {
        return 38;
    };
    OpUndefined.prototype.test = function (doc) {
        try {
            var val = (0, json_pointer_1.find)(doc, this.path).val;
            var test_1 = val === undefined;
            return test_1;
        }
        catch (error) {
            if (error.message === 'NOT_FOUND')
                return true;
            throw error;
        }
    };
    OpUndefined.prototype.toJson = function (parent) {
        var op = {
            op: 'undefined',
            path: (0, json_pointer_1.formatJsonPointer)(parent ? this.path.slice(parent.path.length) : this.path),
        };
        return op;
    };
    OpUndefined.prototype.toCompact = function (parent, verbose) {
        var opcode = verbose ? 'undefined' : 38;
        return [opcode, parent ? this.path.slice(parent.path.length) : this.path];
    };
    OpUndefined.prototype.encode = function (encoder, parent) {
        encoder.encodeArrayHeader(2);
        encoder.writer.u8(38);
        encoder.encodeArray(parent ? this.path.slice(parent.path.length) : this.path);
    };
    return OpUndefined;
}(AbstractPredicateOp_1.AbstractPredicateOp));
exports.OpUndefined = OpUndefined;
