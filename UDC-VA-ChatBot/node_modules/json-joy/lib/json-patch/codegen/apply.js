"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.$apply = exports.$$apply = exports.apply = void 0;
var tslib_1 = require("tslib");
var clone_1 = require("../../json-clone/clone");
var json_1 = require("../codec/json");
var op_1 = require("../op");
var codegen_1 = require("../../util/codegen");
var codegenOp_1 = require("./codegenOp");
var apply = function (patch, applyOptions, doc) {
    var mutate = applyOptions.mutate, createMatcher = applyOptions.createMatcher;
    if (!mutate)
        doc = (0, clone_1.clone)(doc);
    var length = patch.length;
    var opts = { createMatcher: createMatcher };
    for (var i = 0; i < length; i++) {
        var op = (0, json_1.operationToOp)(patch[i], opts);
        var opResult = op.apply(doc);
        doc = opResult.doc;
    }
    return doc;
};
exports.apply = apply;
var $$apply = function (operations, applyOptions) {
    var mutate = applyOptions.mutate, createMatcher = applyOptions.createMatcher;
    var operationOptions = { createMatcher: createMatcher };
    var fns = [];
    var length = operations.length;
    var hasNonPredicateOperations = false;
    for (var i = 0; i < length; i++) {
        var op = (0, json_1.operationToOp)(operations[i], operationOptions);
        var isPredicateOp = op instanceof op_1.AbstractPredicateOp;
        if (!isPredicateOp)
            hasNonPredicateOperations = true;
        fns.push((0, codegenOp_1.codegenOp)(op));
    }
    var needsToClone = !mutate && hasNonPredicateOperations;
    var deps = [];
    var depNames = [];
    if (needsToClone) {
        deps.push(clone_1.clone);
        depNames.push('clone');
    }
    var resultExpression = 'doc';
    for (var i = 0; i < fns.length; i++) {
        var fn = fns[i];
        var depName = "fn".concat(i);
        deps.push(fn);
        depNames.push(depName);
        resultExpression = "".concat(depName, "(").concat(resultExpression, ")");
    }
    var js = "\n(function(".concat(depNames.join(','), ") {\n  return function(doc){\n    ").concat(needsToClone ? "doc = clone(doc);" : '', "\n    return ").concat(resultExpression, ";\n  };\n})");
    return {
        deps: deps,
        js: js,
    };
};
exports.$$apply = $$apply;
var $apply = function (operations, applyOptions) {
    var fn = (0, exports.$$apply)(operations, applyOptions);
    var compiled = (0, codegen_1.compile)(fn.js).apply(void 0, tslib_1.__spreadArray([], tslib_1.__read(fn.deps), false));
    return compiled;
};
exports.$apply = $apply;
