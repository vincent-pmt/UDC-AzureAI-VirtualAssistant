"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaBuilder = void 0;
var tslib_1 = require("tslib");
var SchemaBuilder = (function () {
    function SchemaBuilder() {
    }
    Object.defineProperty(SchemaBuilder.prototype, "str", {
        get: function () {
            return this.String();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SchemaBuilder.prototype, "num", {
        get: function () {
            return this.Number();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SchemaBuilder.prototype, "bool", {
        get: function () {
            return this.Boolean();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SchemaBuilder.prototype, "undef", {
        get: function () {
            return this.Const(undefined);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SchemaBuilder.prototype, "nil", {
        get: function () {
            return this.Const(null);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SchemaBuilder.prototype, "arr", {
        get: function () {
            return this.Array(this.any);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SchemaBuilder.prototype, "obj", {
        get: function () {
            return this.Object();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SchemaBuilder.prototype, "bin", {
        get: function () {
            return this.Binary(this.any);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SchemaBuilder.prototype, "any", {
        get: function () {
            return this.Any();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SchemaBuilder.prototype, "fn", {
        get: function () {
            return this.Function(this.any, this.any);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SchemaBuilder.prototype, "fn$", {
        get: function () {
            return this.Function$(this.any, this.any);
        },
        enumerable: false,
        configurable: true
    });
    SchemaBuilder.prototype.Boolean = function (a, b) {
        if (typeof a === 'string')
            return this.Boolean(tslib_1.__assign({ id: a }, (b || {})));
        return tslib_1.__assign({ __t: 'bool' }, (a || {}));
    };
    SchemaBuilder.prototype.Number = function (options) {
        return tslib_1.__assign({ __t: 'num' }, options);
    };
    SchemaBuilder.prototype.String = function (a, b) {
        if (typeof a === 'string')
            return this.String(tslib_1.__assign({ id: a }, (b || {})));
        return tslib_1.__assign({ __t: 'str' }, (a || {}));
    };
    SchemaBuilder.prototype.Binary = function (type, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__assign({ __t: 'bin', type: type }, options);
    };
    SchemaBuilder.prototype.Array = function (a, b, c) {
        if (typeof a === 'string')
            return this.Array(b, tslib_1.__assign({ id: a }, (c || {})));
        return tslib_1.__assign(tslib_1.__assign({ __t: 'arr' }, b), { type: a });
    };
    SchemaBuilder.prototype.Const = function (value, options) {
        return tslib_1.__assign({ __t: 'const', value: value }, options);
    };
    SchemaBuilder.prototype.Tuple = function () {
        var types = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            types[_i] = arguments[_i];
        }
        return { __t: 'tup', types: types };
    };
    SchemaBuilder.prototype.fields = function () {
        var fields = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fields[_i] = arguments[_i];
        }
        return fields;
    };
    SchemaBuilder.prototype.Object = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var first = args[0];
        if (args.length === 1 &&
            first &&
            typeof first === 'object' &&
            first.fields instanceof Array)
            return tslib_1.__assign({ __t: 'obj' }, first);
        if (args.length >= 1 && args[0] instanceof Array)
            return this.Object(tslib_1.__assign({ fields: args[0] }, args[1]));
        return this.Object({ fields: args });
    };
    SchemaBuilder.prototype.Field = function (key, type, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__assign({ __t: 'field', key: key, type: type }, options);
    };
    SchemaBuilder.prototype.FieldOpt = function (key, type, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__assign(tslib_1.__assign({ __t: 'field', key: key, type: type }, options), { optional: true });
    };
    SchemaBuilder.prototype.prop = function (key, type, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__assign({ __t: 'field', key: key, type: type }, options);
    };
    SchemaBuilder.prototype.propOpt = function (key, type, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__assign(tslib_1.__assign({ __t: 'field', key: key, type: type }, options), { optional: true });
    };
    SchemaBuilder.prototype.Any = function (options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__assign({ __t: 'any' }, options);
    };
    SchemaBuilder.prototype.Ref = function (ref) {
        return {
            __t: 'ref',
            ref: ref,
        };
    };
    SchemaBuilder.prototype.Or = function () {
        var types = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            types[_i] = arguments[_i];
        }
        return {
            __t: 'or',
            types: types,
            discriminator: ['num', -1],
        };
    };
    SchemaBuilder.prototype.Function = function (req, res) {
        return {
            __t: 'fn',
            req: req,
            res: res,
        };
    };
    SchemaBuilder.prototype.Function$ = function (req, res) {
        return {
            __t: 'fn$',
            req: req,
            res: res,
        };
    };
    return SchemaBuilder;
}());
exports.SchemaBuilder = SchemaBuilder;
