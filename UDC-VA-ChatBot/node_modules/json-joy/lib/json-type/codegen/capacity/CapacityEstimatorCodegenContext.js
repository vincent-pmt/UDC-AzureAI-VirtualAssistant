"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CapacityEstimatorCodegenContext = void 0;
var codegen_1 = require("../../../util/codegen");
var json_size_1 = require("../../../json-size");
var Value_1 = require("../../../reactive-rpc/common/messages/Value");
var IncrementSizeStep = (function () {
    function IncrementSizeStep(inc) {
        this.inc = inc;
    }
    return IncrementSizeStep;
}());
var CapacityEstimatorCodegenContext = (function () {
    function CapacityEstimatorCodegenContext(options) {
        this.options = options;
        this.codegen = new codegen_1.Codegen({
            name: 'approxSize' + (options.name ? '_' + options.name : ''),
            args: ['r0'],
            prologue: "var size = 0;",
            epilogue: "return size;",
            linkable: {
                Value: Value_1.Value,
            },
            processSteps: function (steps) {
                var stepsJoined = [];
                for (var i = 0; i < steps.length; i++) {
                    var step = steps[i];
                    if (step instanceof codegen_1.CodegenStepExecJs)
                        stepsJoined.push(step);
                    else if (step instanceof IncrementSizeStep) {
                        stepsJoined.push(new codegen_1.CodegenStepExecJs("size += ".concat(step.inc, ";")));
                    }
                }
                return stepsJoined;
            },
        });
        this.codegen.linkDependency(json_size_1.maxEncodingCapacity, 'maxEncodingCapacity');
    }
    CapacityEstimatorCodegenContext.prototype.inc = function (inc) {
        this.codegen.step(new IncrementSizeStep(inc));
    };
    CapacityEstimatorCodegenContext.prototype.compile = function () {
        return this.codegen.compile();
    };
    return CapacityEstimatorCodegenContext;
}());
exports.CapacityEstimatorCodegenContext = CapacityEstimatorCodegenContext;
