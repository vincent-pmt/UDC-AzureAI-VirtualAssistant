"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonTextEncoderCodegenContext = void 0;
var tslib_1 = require("tslib");
var codegen_1 = require("../../../util/codegen");
var asString_1 = require("../../../util/strings/asString");
var base64_1 = require("../../../util/base64");
var WriteTextStep = (function () {
    function WriteTextStep(str) {
        this.str = str;
    }
    return WriteTextStep;
}());
var JsonTextEncoderCodegenContext = (function () {
    function JsonTextEncoderCodegenContext(options) {
        this.options = options;
        this.base64Linked = false;
        this.codegen = new codegen_1.Codegen({
            name: 'toJson' + (options.name ? '_' + options.name : ''),
            prologue: "var s = '';",
            epilogue: "return s;",
            processSteps: function (steps) {
                var e_1, _a;
                var stepsJoined = [];
                for (var i = 0; i < steps.length; i++) {
                    var step = steps[i];
                    if (step instanceof codegen_1.CodegenStepExecJs)
                        stepsJoined.push(step);
                    else if (step instanceof WriteTextStep) {
                        var last = stepsJoined[stepsJoined.length - 1];
                        if (last instanceof WriteTextStep)
                            last.str += step.str;
                        else
                            stepsJoined.push(step);
                    }
                }
                var execSteps = [];
                try {
                    for (var stepsJoined_1 = tslib_1.__values(stepsJoined), stepsJoined_1_1 = stepsJoined_1.next(); !stepsJoined_1_1.done; stepsJoined_1_1 = stepsJoined_1.next()) {
                        var step = stepsJoined_1_1.value;
                        if (step instanceof codegen_1.CodegenStepExecJs) {
                            execSteps.push(step);
                        }
                        else if (step instanceof WriteTextStep) {
                            var js = "s += ".concat(JSON.stringify(step.str), ";");
                            execSteps.push(new codegen_1.CodegenStepExecJs(js));
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (stepsJoined_1_1 && !stepsJoined_1_1.done && (_a = stepsJoined_1.return)) _a.call(stepsJoined_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return execSteps;
            },
        });
        this.codegen.linkDependency(asString_1.asString, 'asString');
        this.codegen.linkDependency(JSON.stringify, 'stringify');
    }
    JsonTextEncoderCodegenContext.prototype.js = function (js) {
        this.codegen.js(js);
    };
    JsonTextEncoderCodegenContext.prototype.writeText = function (str) {
        this.codegen.step(new WriteTextStep(str));
    };
    JsonTextEncoderCodegenContext.prototype.linkBase64 = function () {
        if (this.base64Linked)
            return;
        this.codegen.linkDependency(base64_1.toBase64, 'toBase64');
    };
    JsonTextEncoderCodegenContext.prototype.compile = function () {
        return this.codegen.compile();
    };
    return JsonTextEncoderCodegenContext;
}());
exports.JsonTextEncoderCodegenContext = JsonTextEncoderCodegenContext;
