"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeAlias = void 0;
var printTree_1 = require("../../util/print/printTree");
var classes_1 = require("../type/classes");
var toText_1 = require("../typescript/toText");
var TypeExportContext_1 = require("./TypeExportContext");
var TypeAlias = (function () {
    function TypeAlias(system, id, type) {
        this.system = system;
        this.id = id;
        this.type = type;
    }
    TypeAlias.prototype.getType = function () {
        return this.type;
    };
    TypeAlias.prototype.resolve = function () {
        return this.system.resolve(this.id);
    };
    TypeAlias.prototype.toString = function (tab) {
        var _this = this;
        if (tab === void 0) { tab = ''; }
        return this.id + (0, printTree_1.printTree)(tab, [function (tab) { return _this.type.toString(tab); }]);
    };
    TypeAlias.prototype.toTypeScriptAst = function () {
        var type = this.type;
        if (type instanceof classes_1.ObjectType) {
            var ast = this.type.toTypeScriptAst();
            var node = {
                node: 'InterfaceDeclaration',
                name: this.id,
                members: ast.members,
            };
            return node;
        }
        else {
            var node = {
                node: 'TypeAliasDeclaration',
                name: this.id,
                type: type.toTypeScriptAst(),
            };
            return node;
        }
    };
    TypeAlias.prototype.toTypeScript = function () {
        return (0, toText_1.toText)(this.toTypeScriptAst());
    };
    TypeAlias.prototype.toJsonSchema = function () {
        var node = {
            $id: this.id,
            $ref: '#/$defs/' + this.id,
            $defs: {},
        };
        var ctx = new TypeExportContext_1.TypeExportContext();
        ctx.visitRef(this.id);
        node.$defs[this.id] = this.type.toJsonSchema(ctx);
        var ref;
        while ((ref = ctx.nextMentionedRef())) {
            ctx.visitRef(ref);
            node.$defs[ref] = this.system.resolve(ref).type.toJsonSchema(ctx);
        }
        return node;
    };
    return TypeAlias;
}());
exports.TypeAlias = TypeAlias;
