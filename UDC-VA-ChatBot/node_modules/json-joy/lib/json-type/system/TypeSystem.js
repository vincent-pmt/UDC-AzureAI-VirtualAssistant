"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeSystem = void 0;
var tslib_1 = require("tslib");
var TypeAlias_1 = require("./TypeAlias");
var TypeBuilder_1 = require("../type/TypeBuilder");
var classes_1 = require("../type/classes");
var printTree_1 = require("../../util/print/printTree");
var TypeSystem = (function () {
    function TypeSystem() {
        var _this = this;
        this.t = new TypeBuilder_1.TypeBuilder(this);
        this.aliases = new Map();
        this.alias = function (id, type) {
            if (_this.aliases.has(id))
                throw new Error("Alias [id = ".concat(id, "] already exists."));
            var alias = new TypeAlias_1.TypeAlias(_this, id, type);
            _this.aliases.set(id, alias);
            return alias;
        };
        this.unalias = function (id) {
            var alias = _this.aliases.get(id);
            if (!alias)
                throw new Error("Alias [id = ".concat(id, "] not found."));
            return alias;
        };
        this.hasAlias = function (id) { return _this.aliases.has(id); };
        this.resolve = function (id) {
            var alias = _this.unalias(id);
            return alias.type instanceof classes_1.RefType ? _this.resolve(alias.type.getRef()) : alias;
        };
        this.customValidators = new Map();
        this.addCustomValidator = function (validator) {
            if (_this.customValidators.has(validator.name))
                throw new Error("Validator [name = ".concat(validator.name, "] already exists."));
            _this.customValidators.set(validator.name, validator);
        };
        this.getCustomValidator = function (name) {
            var validator = _this.customValidators.get(name);
            if (!validator)
                throw new Error("Validator [name = ".concat(name, "] not found."));
            return validator;
        };
    }
    TypeSystem.prototype.importTypes = function (types) {
        var result = {};
        for (var id in types)
            result[id] = this.alias(id, types[id]);
        return result;
    };
    TypeSystem.prototype.toString = function (tab) {
        var _this = this;
        if (tab === void 0) { tab = ''; }
        var nl = function () { return ''; };
        return (this.constructor.name +
            (0, printTree_1.printTree)(tab, [
                function (tab) {
                    return 'aliases' +
                        (0, printTree_1.printTree)(tab, tslib_1.__spreadArray([], tslib_1.__read(_this.aliases.values()), false).map(function (alias) { return function (tab) { return alias.toString(tab); }; }));
                },
                this.customValidators.size ? nl : null,
                function (tab) {
                    return 'validators' +
                        (0, printTree_1.printTree)(tab, tslib_1.__spreadArray([], tslib_1.__read(_this.customValidators.keys()), false).map(function (validator) { return function (tab) { return "\"".concat(validator, "\""); }; }));
                },
            ]));
    };
    return TypeSystem;
}());
exports.TypeSystem = TypeSystem;
