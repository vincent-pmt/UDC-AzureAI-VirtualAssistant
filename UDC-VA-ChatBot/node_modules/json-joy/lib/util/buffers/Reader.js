"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Reader = void 0;
var decodeUtf8_1 = require("./utf8/decodeUtf8");
var Reader = (function () {
    function Reader() {
        this.uint8 = new Uint8Array([]);
        this.view = new DataView(this.uint8.buffer);
        this.x = 0;
    }
    Reader.prototype.reset = function (uint8) {
        this.x = 0;
        this.uint8 = uint8;
        this.view = new DataView(uint8.buffer, uint8.byteOffset, uint8.length);
    };
    Reader.prototype.peak = function () {
        return this.view.getUint8(this.x);
    };
    Reader.prototype.skip = function (length) {
        this.x += length;
    };
    Reader.prototype.buf = function (size) {
        var end = this.x + size;
        var bin = this.uint8.subarray(this.x, end);
        this.x = end;
        return bin;
    };
    Reader.prototype.u8 = function () {
        return this.uint8[this.x++];
    };
    Reader.prototype.i8 = function () {
        return this.view.getInt8(this.x++);
    };
    Reader.prototype.u16 = function () {
        var x = this.x;
        var num = (this.uint8[x++] << 8) + this.uint8[x++];
        this.x = x;
        return num;
    };
    Reader.prototype.i16 = function () {
        var num = this.view.getInt16(this.x);
        this.x += 2;
        return num;
    };
    Reader.prototype.u32 = function () {
        var num = this.view.getUint32(this.x);
        this.x += 4;
        return num;
    };
    Reader.prototype.i32 = function () {
        var num = this.view.getInt32(this.x);
        this.x += 4;
        return num;
    };
    Reader.prototype.u64 = function () {
        var num = this.view.getBigUint64(this.x);
        this.x += 8;
        return num;
    };
    Reader.prototype.i64 = function () {
        var num = this.view.getBigInt64(this.x);
        this.x += 8;
        return num;
    };
    Reader.prototype.f32 = function () {
        var pos = this.x;
        this.x += 4;
        return this.view.getFloat32(pos);
    };
    Reader.prototype.f64 = function () {
        var pos = this.x;
        this.x += 8;
        return this.view.getFloat64(pos);
    };
    Reader.prototype.utf8 = function (size) {
        var start = this.x;
        this.x += size;
        return (0, decodeUtf8_1.decodeUtf8)(this.uint8, start, size);
    };
    Reader.prototype.ascii = function (length) {
        var uint8 = this.uint8;
        var str = '';
        var end = this.x + length;
        for (var i = this.x; i < end; i++)
            str += String.fromCharCode(uint8[i]);
        this.x = end;
        return str;
    };
    return Reader;
}());
exports.Reader = Reader;
