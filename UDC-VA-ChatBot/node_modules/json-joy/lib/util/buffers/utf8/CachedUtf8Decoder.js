"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CachedUtf8Decoder = void 0;
var tslib_1 = require("tslib");
var v10_1 = tslib_1.__importDefault(require("./decodeUtf8/v10"));
var randomU32_1 = require("hyperdyperid/lib/randomU32");
var CacheItem = (function () {
    function CacheItem(bytes, value) {
        this.bytes = bytes;
        this.value = value;
    }
    return CacheItem;
}());
var CachedUtf8Decoder = (function () {
    function CachedUtf8Decoder() {
        this.caches = [];
        for (var i = 0; i < 31; i++)
            this.caches.push([]);
    }
    CachedUtf8Decoder.prototype.get = function (bytes, offset, size) {
        var records = this.caches[size - 1];
        var len = records.length;
        FIND_CHUNK: for (var i = 0; i < len; i++) {
            var record = records[i];
            var recordBytes = record.bytes;
            for (var j = 0; j < size; j++)
                if (recordBytes[j] !== bytes[offset + j])
                    continue FIND_CHUNK;
            return record.value;
        }
        return null;
    };
    CachedUtf8Decoder.prototype.store = function (bytes, value) {
        var records = this.caches[bytes.length - 1];
        var record = new CacheItem(bytes, value);
        var length = records.length;
        if (length >= 16)
            records[(0, randomU32_1.randomU32)(0, 16 - 1)] = record;
        else
            records.push(record);
    };
    CachedUtf8Decoder.prototype.decode = function (bytes, offset, size) {
        if (!size)
            return '';
        var cachedValue = this.get(bytes, offset, size);
        if (cachedValue !== null)
            return cachedValue;
        var value = (0, v10_1.default)(bytes, offset, size);
        var copy = Uint8Array.prototype.slice.call(bytes, offset, offset + size);
        this.store(copy, value);
        return value;
    };
    return CachedUtf8Decoder;
}());
exports.CachedUtf8Decoder = CachedUtf8Decoder;
