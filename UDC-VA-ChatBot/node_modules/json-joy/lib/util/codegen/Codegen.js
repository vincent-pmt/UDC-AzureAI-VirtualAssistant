"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Codegen = exports.CodegenStepExecJs = void 0;
var tslib_1 = require("tslib");
var _1 = require(".");
var CodegenStepExecJs = (function () {
    function CodegenStepExecJs(js) {
        this.js = js;
    }
    return CodegenStepExecJs;
}());
exports.CodegenStepExecJs = CodegenStepExecJs;
var Codegen = (function () {
    function Codegen(opts) {
        this.steps = [];
        this.dependencies = [];
        this.dependencyNames = [];
        this.linked = {};
        this.constants = [];
        this.constantNames = [];
        this.options = tslib_1.__assign({ args: ['r0'], name: '', prologue: '', epilogue: '', processSteps: function (steps) { return steps.filter(function (step) { return step instanceof CodegenStepExecJs; }); }, linkable: {} }, opts);
        this.registerCounter = this.options.args.length;
    }
    Codegen.prototype.js = function (js) {
        this.steps.push(new CodegenStepExecJs(js));
    };
    Codegen.prototype.var = function (expression) {
        var r = this.getRegister();
        if (expression)
            this.js('var ' + r + ' = ' + expression + ';');
        else
            this.js('var ' + r + ';');
        return r;
    };
    Codegen.prototype.if = function (condition, then, otherwise) {
        this.js('if (' + condition + ') {');
        then();
        if (otherwise) {
            this.js('} else {');
            otherwise();
        }
        this.js('}');
    };
    Codegen.prototype.switch = function (expression, cases, def) {
        var e_1, _a;
        this.js('switch (' + expression + ') {');
        try {
            for (var cases_1 = tslib_1.__values(cases), cases_1_1 = cases_1.next(); !cases_1_1.done; cases_1_1 = cases_1.next()) {
                var _b = tslib_1.__read(cases_1_1.value, 3), match = _b[0], block = _b[1], noBreak = _b[2];
                this.js('case ' + match + ': {');
                block();
                if (!noBreak)
                    this.js('break;');
                this.js('}');
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (cases_1_1 && !cases_1_1.done && (_a = cases_1.return)) _a.call(cases_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (def) {
            this.js('default: {');
            def();
            this.js('}');
        }
        this.js('}');
    };
    Codegen.prototype.return = function (expression) {
        this.js('return ' + expression + ';');
    };
    Codegen.prototype.step = function (step) {
        this.steps.push(step);
    };
    Codegen.prototype.getRegister = function () {
        return "r".concat(this.registerCounter++);
    };
    Codegen.prototype.r = function () {
        return this.getRegister();
    };
    Codegen.prototype.linkDependency = function (dep, name) {
        if (name === void 0) { name = 'd' + this.dependencies.length; }
        this.dependencies.push(dep);
        this.dependencyNames.push(name);
        return name;
    };
    Codegen.prototype.linkDependencies = function (deps) {
        var _this = this;
        return deps.map(function (dep) { return _this.linkDependency(dep); });
    };
    Codegen.prototype.link = function (name) {
        if (this.linked[name])
            return;
        this.linked[name] = 1;
        this.linkDependency(this.options.linkable[name], name);
    };
    Codegen.prototype.addConstant = function (constant, name) {
        if (name === void 0) { name = 'c' + this.constants.length; }
        this.constants.push(constant);
        this.constantNames.push(name);
        return name;
    };
    Codegen.prototype.addConstants = function (constants) {
        var _this = this;
        return constants.map(function (constant) { return _this.addConstant(constant); });
    };
    Codegen.prototype.generate = function (opts) {
        var _this = this;
        if (opts === void 0) { opts = {}; }
        var _a = tslib_1.__assign(tslib_1.__assign({}, this.options), opts), name = _a.name, args = _a.args, prologue = _a.prologue, epilogue = _a.epilogue;
        var steps = this.options.processSteps(this.steps);
        var js = "(function(".concat(this.dependencyNames.join(', '), ") {\n").concat(this.constants.map(function (constant, index) { return "var ".concat(_this.constantNames[index], " = (").concat(constant, ");"); }).join('\n'), "\nreturn ").concat(name ? "function ".concat(name) : 'function', "(").concat(args.join(','), "){\n").concat(prologue, "\n").concat(steps.map(function (step) { return step.js; }).join('\n'), "\n").concat(typeof epilogue === 'function' ? epilogue() : epilogue || '', "\n}})");
        return {
            deps: this.dependencies,
            js: js,
        };
    };
    Codegen.prototype.compile = function (opts) {
        var closure = this.generate(opts);
        return (0, _1.compileClosure)(closure);
    };
    return Codegen;
}());
exports.Codegen = Codegen;
