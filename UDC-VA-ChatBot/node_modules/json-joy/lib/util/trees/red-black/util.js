"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.print = exports.remove = exports.insertLeft = exports.insertRight = exports.insert = void 0;
var stringify_1 = require("../../../json-text/stringify");
var printBinary_1 = require("../../print/printBinary");
var insert = function (root, n, comparator) {
    if (!root)
        return (n.b = true), n;
    var key = n.k;
    var curr = root;
    var next = undefined;
    var cmp = 0;
    while ((next = ((cmp = comparator(key, curr.k)) < 0 ? curr.l : curr.r)))
        curr = next;
    return (cmp < 0 ? (0, exports.insertLeft)(root, n, curr) : (0, exports.insertRight)(root, n, curr));
};
exports.insert = insert;
var insertRight = function (root, n, p) {
    var g = p.p;
    p.r = n;
    n.p = p;
    if (p.b || !g)
        return root;
    var top = rRebalance(n, p, g);
    return top.p ? root : top;
};
exports.insertRight = insertRight;
var insertLeft = function (root, n, p) {
    var g = p.p;
    p.l = n;
    n.p = p;
    if (p.b || !g)
        return root;
    var top = lRebalance(n, p, g);
    return top.p ? root : top;
};
exports.insertLeft = insertLeft;
var rRebalance = function (n, p, g) {
    var u = g.l === p ? g.r : g.l;
    var uncleIsBlack = !u || u.b;
    if (uncleIsBlack) {
        var zigzag = g.l === p;
        g.b = false;
        if (zigzag) {
            n.b = true;
            rrRotate(p, n);
            llRotate(g, n);
            return n;
        }
        p.b = true;
        rrRotate(g, p);
        return p;
    }
    return recolor(p, g, u);
};
var lRebalance = function (n, p, g) {
    var u = g.l === p ? g.r : g.l;
    var uncleIsBlack = !u || u.b;
    if (uncleIsBlack) {
        var zigzag = g.r === p;
        g.b = false;
        if (zigzag) {
            n.b = true;
            llRotate(p, n);
            rrRotate(g, n);
            return n;
        }
        p.b = true;
        llRotate(g, p);
        return p;
    }
    return recolor(p, g, u);
};
var recolor = function (p, g, u) {
    p.b = true;
    g.b = false;
    if (u)
        u.b = true;
    var gg = g.p;
    if (!gg)
        return (g.b = true), g;
    if (gg.b)
        return g;
    var ggg = gg.p;
    if (!ggg)
        return (gg.b = true), gg;
    return gg.l === g ? lRebalance(g, gg, ggg) : rRebalance(g, gg, ggg);
};
var llRotate = function (n, nl) {
    var p = n.p;
    var nlr = nl.r;
    nl.p = p;
    nl.r = n;
    n.p = nl;
    n.l = nlr;
    nlr && (nlr.p = n);
    p && (p.l === n ? (p.l = nl) : (p.r = nl));
};
var rrRotate = function (n, nr) {
    var p = n.p;
    var nrl = nr.l;
    nr.p = p;
    nr.l = n;
    n.p = nr;
    n.r = nrl;
    nrl && (nrl.p = n);
    p && (p.l === n ? (p.l = nr) : (p.r = nr));
};
var remove = function (root, n) {
    throw new Error('Not implemented');
};
exports.remove = remove;
var print = function (node, tab) {
    if (tab === void 0) { tab = ''; }
    if (!node)
        return 'âˆ…';
    var _a = node, b = _a.b, l = _a.l, r = _a.r, k = _a.k, v = _a.v;
    var content = k !== undefined ? " { ".concat((0, stringify_1.stringify)(k), " = ").concat((0, stringify_1.stringify)(v), " }") : '';
    var bfFormatted = !b ? " [red]" : '';
    return (node.constructor.name +
        "".concat(bfFormatted) +
        content +
        (0, printBinary_1.printBinary)(tab, [l ? function (tab) { return (0, exports.print)(l, tab); } : null, r ? function (tab) { return (0, exports.print)(r, tab); } : null]));
};
exports.print = print;
