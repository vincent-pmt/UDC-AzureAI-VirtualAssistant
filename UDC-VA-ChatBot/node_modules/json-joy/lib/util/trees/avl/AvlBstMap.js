"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvlBstMap = exports.AvlNode = void 0;
var util_1 = require("./util");
var printTree_1 = require("../../print/printTree");
var util_2 = require("../util");
var AvlNode = (function () {
    function AvlNode(k, v) {
        this.k = k;
        this.v = v;
        this.p = undefined;
        this.l = undefined;
        this.r = undefined;
        this.bf = 0;
    }
    return AvlNode;
}());
exports.AvlNode = AvlNode;
var defaultComparator = function (a, b) { return (a === b ? 0 : a < b ? -1 : 1); };
var AvlBstMap = (function () {
    function AvlBstMap(comparator) {
        this.root = undefined;
        this.comparator = comparator || defaultComparator;
    }
    AvlBstMap.prototype.insert = function (k, v) {
        var item = new AvlNode(k, v);
        this.root = (0, util_1.insert)(this.root, item, this.comparator);
        return item;
    };
    AvlBstMap.prototype.set = function (k, v) {
        var root = this.root;
        if (!root)
            return this.insert(k, v);
        var comparator = this.comparator;
        var next = root, curr = next;
        var cmp = 0;
        do {
            curr = next;
            cmp = comparator(k, curr.k);
            if (cmp === 0)
                return (curr.v = v), curr;
        } while ((next = cmp < 0 ? curr.l : curr.r));
        var node = new AvlNode(k, v);
        this.root =
            cmp < 0 ? (0, util_1.insertLeft)(root, node, curr) : (0, util_1.insertRight)(root, node, curr);
        return node;
    };
    AvlBstMap.prototype.find = function (k) {
        var comparator = this.comparator;
        var curr = this.root;
        while (curr) {
            var cmp = comparator(k, curr.k);
            if (cmp === 0)
                return curr;
            curr = cmp < 0 ? curr.l : curr.r;
        }
        return undefined;
    };
    AvlBstMap.prototype.get = function (k) {
        var _a;
        return (_a = this.find(k)) === null || _a === void 0 ? void 0 : _a.v;
    };
    AvlBstMap.prototype.has = function (k) {
        return !!this.find(k);
    };
    AvlBstMap.prototype.getOrNextLower = function (k) {
        return (0, util_2.findOrNextLower)(this.root, k, this.comparator) || undefined;
    };
    AvlBstMap.prototype.forEach = function (fn) {
        var root = this.root;
        if (!root)
            return;
        var curr = (0, util_2.first)(root);
        do
            fn(curr);
        while ((curr = (0, util_2.next)(curr)));
    };
    AvlBstMap.prototype.toString = function (tab) {
        var _this = this;
        return this.constructor.name + (0, printTree_1.printTree)(tab, [function (tab) { return (0, util_1.print)(_this.root, tab); }]);
    };
    return AvlBstMap;
}());
exports.AvlBstMap = AvlBstMap;
