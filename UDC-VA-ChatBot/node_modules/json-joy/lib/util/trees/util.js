"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.remove = exports.insert = exports.insertLeft = exports.insertRight = exports.findOrNextLower = exports.find = exports.size = exports.prev = exports.next = exports.last = exports.first = void 0;
var first = function (root) {
    var curr = root;
    while (curr)
        if (curr.l)
            curr = curr.l;
        else
            return curr;
    return curr;
};
exports.first = first;
var last = function (root) {
    var curr = root;
    while (curr)
        if (curr.r)
            curr = curr.r;
        else
            return curr;
    return curr;
};
exports.last = last;
var next = function (curr) {
    if (curr.r) {
        curr = curr.r;
        while (curr.l)
            curr = curr.l;
        return curr;
    }
    var p = curr.p;
    while (p && p.r === curr) {
        curr = p;
        p = p.p;
    }
    return p;
};
exports.next = next;
var prev = function (curr) {
    if (curr.l) {
        curr = curr.l;
        while (curr.r)
            curr = curr.r;
        return curr;
    }
    var p = curr.p;
    while (p && p.l === curr) {
        curr = p;
        p = p.p;
    }
    return p;
};
exports.prev = prev;
var size = function (root) {
    if (!root)
        return 0;
    var start = (0, exports.first)(root);
    var curr = start;
    var result = 1;
    while ((curr = (0, exports.next)(curr)))
        result++;
    return result;
};
exports.size = size;
var find = function (root, key, comparator) {
    var curr = root;
    while (curr) {
        var cmp = comparator(key, curr.k);
        if (cmp === 0)
            return curr;
        curr = cmp < 0 ? curr.l : curr.r;
    }
    return curr;
};
exports.find = find;
var findOrNextLower = function (root, key, comparator) {
    var curr = root;
    var result = undefined;
    while (curr) {
        var cmp = comparator(curr.k, key);
        if (cmp === 0)
            return curr;
        if (cmp > 0)
            curr = curr.l;
        else {
            var next_1 = curr.r;
            result = curr;
            if (!next_1)
                return result;
            curr = next_1;
        }
    }
    return result;
};
exports.findOrNextLower = findOrNextLower;
var insertRight = function (node, p) {
    var r = (node.r = p.r);
    p.r = node;
    node.p = p;
    if (r)
        r.p = node;
};
exports.insertRight = insertRight;
var insertLeft = function (node, p) {
    var l = (node.l = p.l);
    p.l = node;
    node.p = p;
    if (l)
        l.p = node;
};
exports.insertLeft = insertLeft;
var insert = function (root, node, comparator) {
    if (!root)
        return node;
    var key = node.k;
    var curr = root;
    while (curr) {
        var cmp = comparator(key, curr.k);
        var next_2 = cmp < 0 ? curr.l : curr.r;
        if (!next_2) {
            if (cmp < 0)
                (0, exports.insertLeft)(node, curr);
            else
                (0, exports.insertRight)(node, curr);
            break;
        }
        else
            curr = next_2;
    }
    return root;
};
exports.insert = insert;
var remove = function (root, node) {
    var p = node.p;
    var l = node.l;
    var r = node.r;
    node.p = node.l = node.r = undefined;
    if (!l && !r) {
        if (!p)
            return undefined;
        else if (p.l === node)
            p.l = undefined;
        else
            p.r = undefined;
        return root;
    }
    else if (l && r) {
        var mostRightChildFromLeft = l;
        while (mostRightChildFromLeft.r)
            mostRightChildFromLeft = mostRightChildFromLeft.r;
        mostRightChildFromLeft.r = r;
        r.p = mostRightChildFromLeft;
        if (!p) {
            l.p = undefined;
            return l;
        }
        if (p.l === node)
            p.l = l;
        else
            p.r = l;
        l.p = p;
        return root;
    }
    var child = (l || r);
    child.p = p;
    if (!p)
        return child;
    else if (p.l === node)
        p.l = child;
    else
        p.r = child;
    return root;
};
exports.remove = remove;
