"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tree = void 0;
var util_1 = require("./util");
var util_2 = require("./splay/util");
var TreeNode_1 = require("./TreeNode");
var defaultComparator = function (a, b) { return a - b; };
var Tree = (function () {
    function Tree(comparator) {
        if (comparator === void 0) { comparator = defaultComparator; }
        this.comparator = comparator;
        this.root = undefined;
        this.size = 0;
    }
    Tree.prototype.set = function (key, value) {
        var node = new TreeNode_1.TreeNode(key, value);
        this.root = (0, util_1.insert)(this.root, node, this.comparator);
        this.root = (0, util_2.splay)(this.root, node, 15);
        this.size++;
    };
    Tree.prototype.setFast = function (key, value) {
        var node = new TreeNode_1.TreeNode(key, value);
        this.root = (0, util_1.insert)(this.root, node, this.comparator);
        this.size++;
    };
    Tree.prototype.get = function (key) {
        var node = (0, util_1.find)(this.root, key, this.comparator);
        return node ? node.v : undefined;
    };
    Tree.prototype.getOrNextLower = function (key) {
        var node = (0, util_1.findOrNextLower)(this.root, key, this.comparator);
        return node ? node.v : undefined;
    };
    Tree.prototype.has = function (key) {
        return !!(0, util_1.find)(this.root, key, this.comparator);
    };
    Tree.prototype.delete = function (key) {
        var node = (0, util_1.find)(this.root, key, this.comparator);
        if (!node)
            return undefined;
        this.root = (0, util_1.remove)(this.root, node);
        this.size--;
        return node.v;
    };
    Tree.prototype.max = function () {
        var _a;
        return (_a = (0, util_1.last)(this.root)) === null || _a === void 0 ? void 0 : _a.v;
    };
    Tree.prototype.iterator = function () {
        var curr = (0, util_1.first)(this.root);
        return function () {
            var res = curr;
            if (curr)
                curr = (0, util_1.next)(curr);
            return res ? res.v : undefined;
        };
    };
    Tree.prototype.toString = function (tab) {
        if (tab === void 0) { tab = ''; }
        return "".concat(this.constructor.name).concat(this.root ? this.toStringNode(this.root, tab + '', '') : ' ∅');
    };
    Tree.prototype.toStringNode = function (node, tab, side) {
        var str = "\n".concat(tab).concat(side === 'l' ? ' ←' : side === 'r' ? ' →' : '└─', " ").concat(node.constructor.name, " ").concat(node.k);
        if (node.l)
            str += this.toStringNode(node.l, tab + '  ', 'l');
        if (node.r)
            str += this.toStringNode(node.r, tab + '  ', 'r');
        return str;
    };
    return Tree;
}());
exports.Tree = Tree;
