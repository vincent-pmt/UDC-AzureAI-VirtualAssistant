"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createToBase64Bin = void 0;
var tslib_1 = require("tslib");
var constants_1 = require("./constants");
var createToBase64Bin = function (chars) {
    var e_1, _a, e_2, _b;
    if (chars === void 0) { chars = constants_1.alphabet; }
    if (chars.length !== 64)
        throw new Error('chars must be 64 characters long');
    var table = chars.split('').map(function (c) { return c.charCodeAt(0); });
    var table2 = [];
    try {
        for (var table_1 = tslib_1.__values(table), table_1_1 = table_1.next(); !table_1_1.done; table_1_1 = table_1.next()) {
            var c1 = table_1_1.value;
            try {
                for (var table_2 = (e_2 = void 0, tslib_1.__values(table)), table_2_1 = table_2.next(); !table_2_1.done; table_2_1 = table_2.next()) {
                    var c2 = table_2_1.value;
                    var two = (c1 << 8) + c2;
                    table2.push(two);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (table_2_1 && !table_2_1.done && (_b = table_2.return)) _b.call(table_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (table_1_1 && !table_1_1.done && (_a = table_1.return)) _a.call(table_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return function (uint8, start, length, dest, offset) {
        var extraLength = length % 3;
        var baseLength = length - extraLength;
        for (; start < baseLength; start += 3) {
            var o1 = uint8[start];
            var o2 = uint8[start + 1];
            var o3 = uint8[start + 2];
            var v1 = (o1 << 4) | (o2 >> 4);
            var v2 = ((o2 & 15) << 8) | o3;
            dest.setInt32(offset, (table2[v1] << 16) + table2[v2]);
            offset += 4;
        }
        if (extraLength) {
            if (extraLength === 1) {
                var o1 = uint8[baseLength];
                dest.setInt32(offset, (table2[o1 << 4] << 16) + 0x3d3d);
                return offset + 4;
            }
            else {
                var o1 = uint8[baseLength];
                var o2 = uint8[baseLength + 1];
                var v1 = (o1 << 4) | (o2 >> 4);
                var v2 = (o2 & 15) << 2;
                dest.setInt32(offset, (table2[v1] << 16) + (table[v2] << 8) + 0x3d);
                return offset + 4;
            }
        }
        return offset;
    };
};
exports.createToBase64Bin = createToBase64Bin;
