"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createToBase64 = void 0;
var tslib_1 = require("tslib");
var constants_1 = require("./constants");
var E = '=';
var EE = '==';
var createToBase64 = function (chars) {
    var e_1, _a, e_2, _b;
    if (chars === void 0) { chars = constants_1.alphabet; }
    if (chars.length !== 64)
        throw new Error('chars must be 64 characters long');
    var table = chars.split('');
    var table2 = [];
    try {
        for (var table_1 = tslib_1.__values(table), table_1_1 = table_1.next(); !table_1_1.done; table_1_1 = table_1.next()) {
            var c1 = table_1_1.value;
            try {
                for (var table_2 = (e_2 = void 0, tslib_1.__values(table)), table_2_1 = table_2.next(); !table_2_1.done; table_2_1 = table_2.next()) {
                    var c2 = table_2_1.value;
                    var two = c1 + c2;
                    Number(two);
                    table2.push(two);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (table_2_1 && !table_2_1.done && (_b = table_2.return)) _b.call(table_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (table_1_1 && !table_1_1.done && (_a = table_1.return)) _a.call(table_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return function (uint8, length) {
        var out = '';
        var extraLength = length % 3;
        var baseLength = length - extraLength;
        for (var i = 0; i < baseLength; i += 3) {
            var o1 = uint8[i];
            var o2 = uint8[i + 1];
            var o3 = uint8[i + 2];
            var v1 = (o1 << 4) | (o2 >> 4);
            var v2 = ((o2 & 15) << 8) | o3;
            out += table2[v1] + table2[v2];
        }
        if (extraLength) {
            if (extraLength === 1) {
                var o1 = uint8[baseLength];
                out += table2[o1 << 4] + EE;
            }
            else {
                var o1 = uint8[baseLength];
                var o2 = uint8[baseLength + 1];
                var v1 = (o1 << 4) | (o2 >> 4);
                var v2 = (o2 & 15) << 2;
                out += table2[v1] + table[v2] + E;
            }
        }
        return out;
    };
};
exports.createToBase64 = createToBase64;
