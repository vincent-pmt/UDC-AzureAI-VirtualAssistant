"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RandomJson = void 0;
var tslib_1 = require("tslib");
var defaultOpts = {
    rootNode: 'object',
    nodeCount: 32,
    odds: {
        null: 1,
        boolean: 2,
        number: 10,
        string: 8,
        binary: 0,
        array: 2,
        object: 2,
    },
};
var ascii = function () {
    return String.fromCharCode(Math.floor(32 + Math.random() * (126 - 32)));
};
var alphabet = [
    'г',
    '诶',
    '必',
    '西',
];
var utf16 = function () {
    return alphabet[Math.floor(Math.random() * alphabet.length)];
};
var RandomJson = (function () {
    function RandomJson(opts) {
        if (opts === void 0) { opts = {}; }
        this.containers = [];
        this.opts = tslib_1.__assign(tslib_1.__assign({}, defaultOpts), opts);
        this.oddTotals = {};
        this.oddTotals.null = this.opts.odds.null;
        this.oddTotals.boolean = this.oddTotals.null + this.opts.odds.boolean;
        this.oddTotals.number = this.oddTotals.boolean + this.opts.odds.number;
        this.oddTotals.string = this.oddTotals.number + this.opts.odds.string;
        this.oddTotals.binary = this.oddTotals.string + this.opts.odds.binary;
        this.oddTotals.array = this.oddTotals.string + this.opts.odds.array;
        this.oddTotals.object = this.oddTotals.array + this.opts.odds.object;
        this.totalOdds =
            this.opts.odds.null +
                this.opts.odds.boolean +
                this.opts.odds.number +
                this.opts.odds.string +
                this.opts.odds.binary +
                this.opts.odds.array +
                this.opts.odds.object;
        this.root =
            this.opts.rootNode === 'object'
                ? {}
                : this.opts.rootNode === 'array'
                    ? []
                    : this.pickContainerType() === 'object'
                        ? {}
                        : [];
        this.containers.push(this.root);
    }
    RandomJson.generate = function (opts) {
        var rnd = new RandomJson(opts);
        return rnd.create();
    };
    RandomJson.genBoolean = function () {
        return Math.random() > 0.5;
    };
    RandomJson.genNumber = function () {
        var num = Math.random() > 0.2
            ? Math.random() * 1e9
            : Math.random() < 0.2
                ? Math.round(0xff * (2 * Math.random() - 1))
                : Math.random() < 0.2
                    ? Math.round(0xffff * (2 * Math.random() - 1))
                    : Math.round(Number.MAX_SAFE_INTEGER * (2 * Math.random() - 1));
        if (num === -0)
            return 0;
        return num;
    };
    RandomJson.genString = function (length) {
        if (length === void 0) { length = Math.ceil(Math.random() * 16); }
        var str = '';
        if (Math.random() < 0.1)
            for (var i = 0; i < length; i++)
                str += utf16();
        else
            for (var i = 0; i < length; i++)
                str += ascii();
        if (str.length !== length)
            return ascii().repeat(length);
        return str;
    };
    RandomJson.genBinary = function (length) {
        if (length === void 0) { length = Math.ceil(Math.random() * 16); }
        var buf = new Uint8Array(length);
        for (var i = 0; i < length; i++)
            buf[i] = Math.floor(Math.random() * 256);
        return buf;
    };
    RandomJson.genArray = function (options) {
        if (options === void 0) { options = { odds: defaultOpts.odds }; }
        return RandomJson.generate(tslib_1.__assign(tslib_1.__assign({ nodeCount: 6 }, options), { rootNode: 'array' }));
    };
    RandomJson.genObject = function (options) {
        if (options === void 0) { options = { odds: defaultOpts.odds }; }
        return RandomJson.generate(tslib_1.__assign(tslib_1.__assign({ nodeCount: 6 }, options), { rootNode: 'object' }));
    };
    RandomJson.prototype.create = function () {
        for (var i = 0; i < this.opts.nodeCount; i++)
            this.addNode();
        return this.root;
    };
    RandomJson.prototype.addNode = function () {
        var container = this.pickContainer();
        var newNodeType = this.pickNodeType();
        var node = this.generate(newNodeType);
        if (node && typeof node === 'object')
            this.containers.push(node);
        if (Array.isArray(container)) {
            var index = Math.floor(Math.random() * (container.length + 1));
            container.splice(index, 0, node);
        }
        else {
            var key = RandomJson.genString();
            container[key] = node;
        }
    };
    RandomJson.prototype.generate = function (type) {
        switch (type) {
            case 'null':
                return null;
            case 'boolean':
                return RandomJson.genBoolean();
            case 'number':
                return RandomJson.genNumber();
            case 'string':
                return RandomJson.genString();
            case 'binary':
                return RandomJson.genBinary();
            case 'array':
                return [];
            case 'object':
                return {};
        }
    };
    RandomJson.prototype.pickNodeType = function () {
        var odd = Math.random() * this.totalOdds;
        if (odd <= this.oddTotals.null)
            return 'null';
        if (odd <= this.oddTotals.boolean)
            return 'boolean';
        if (odd <= this.oddTotals.number)
            return 'number';
        if (odd <= this.oddTotals.string)
            return 'string';
        if (odd <= this.oddTotals.binary)
            return 'binary';
        if (odd <= this.oddTotals.array)
            return 'array';
        return 'object';
    };
    RandomJson.prototype.pickContainerType = function () {
        var sum = this.opts.odds.array + this.opts.odds.object;
        if (Math.random() < this.opts.odds.array / sum)
            return 'array';
        return 'object';
    };
    RandomJson.prototype.pickContainer = function () {
        return this.containers[Math.floor(Math.random() * this.containers.length)];
    };
    return RandomJson;
}());
exports.RandomJson = RandomJson;
