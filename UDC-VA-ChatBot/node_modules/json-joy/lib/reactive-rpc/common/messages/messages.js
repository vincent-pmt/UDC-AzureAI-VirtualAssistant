"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseUnsubscribeMessage = exports.ResponseErrorMessage = exports.ResponseDataMessage = exports.ResponseCompleteMessage = exports.RequestUnsubscribeMessage = exports.RequestErrorMessage = exports.RequestCompleteMessage = exports.RequestDataMessage = exports.NotificationMessage = void 0;
var validation_1 = require("../rpc/validation");
var CborEncoder_1 = require("../../../json-pack/cbor/CborEncoder");
var msgpack_1 = require("../../../json-pack/msgpack");
var JsonEncoder_1 = require("../../../json-pack/json/JsonEncoder");
var encodeHeader = function (writer, typeU16, id, payloadSize, start) {
    if (payloadSize <= 4095) {
        var w1 = typeU16 | payloadSize;
        var w2 = id;
        writer.view.setUint32(start, (w1 << 16) | w2);
    }
    else if (payloadSize <= 524287) {
        writer.u8(id & 0xff);
        var w1 = typeU16 | 4096 | (payloadSize >> 7);
        var w2 = ((payloadSize & 127) << 8) | (id >> 8);
        writer.view.setUint32(start, (w1 << 16) | w2);
    }
    else {
        writer.u16(id);
        var w1 = typeU16 | 4096 | (payloadSize >> 15);
        var w2 = 32768 | (payloadSize & 32767);
        writer.view.setUint32(start, (w1 << 16) | w2);
    }
};
var encodeBinaryWithNameAndPayload = function (codec, typeU16, id, name, value) {
    var writer = codec.encoder.writer;
    var nameLength = name.length;
    writer.ensureCapacity(5 + nameLength);
    writer.uint8[writer.x + 4] = nameLength;
    writer.x += 5;
    writer.ascii(name);
    var x0 = writer.x0;
    var x = writer.x;
    if (value)
        value.encode(codec);
    var shift = writer.x0 - x0;
    var payloadStart = x + shift;
    var start = payloadStart - 5 - nameLength;
    var payloadSize = writer.x - payloadStart;
    encodeHeader(writer, typeU16, id, payloadSize, start);
};
var encodeBinaryWithPayload = function (codec, typeU16, id, value) {
    var writer = codec.encoder.writer;
    writer.move(4);
    var x0 = writer.x0;
    var x = writer.x;
    if (value)
        value.encode(codec);
    var shift = writer.x0 - x0;
    var payloadStart = x + shift;
    var start = payloadStart - 4;
    var payloadSize = writer.x - payloadStart;
    encodeHeader(writer, typeU16, id, payloadSize, start);
};
var encodeCompactWithNameAndPayload = function (codec, type, msg) {
    var encoder = codec.encoder;
    if (encoder instanceof CborEncoder_1.CborEncoder || encoder instanceof msgpack_1.MsgPackEncoder) {
        var value = msg.value;
        var hasValue = value !== undefined;
        encoder.writeArrHdr(hasValue ? 4 : 3);
        encoder.writeUInteger(type);
        encoder.writeUInteger(msg.id);
        encoder.writeAsciiStr(msg.method);
        if (hasValue) {
            if (value.type)
                value.type.encoder(codec.format)(value.data, encoder);
            else
                encoder.writeAny(value.data);
        }
    }
    else if (encoder instanceof JsonEncoder_1.JsonEncoder) {
        var value = msg.value;
        encoder.writeStartArr();
        encoder.writeNumber(type);
        encoder.writeArrSeparator();
        encoder.writeNumber(msg.id);
        encoder.writeArrSeparator();
        encoder.writeAsciiStr(msg.method);
        var hasValue = value !== undefined;
        if (hasValue) {
            encoder.writeArrSeparator();
            if (value.type)
                value.type.encoder(codec.format)(value.data, encoder);
            else
                encoder.writeAny(value.data);
        }
        encoder.writeEndArr();
    }
    else
        encoder.writeArr(msg.toCompact());
};
var encodeCompactWithPayload = function (codec, type, msg) {
    var encoder = codec.encoder;
    if (encoder instanceof CborEncoder_1.CborEncoder || encoder instanceof msgpack_1.MsgPackEncoder) {
        var value = msg.value;
        var hasValue = value !== undefined;
        encoder.writeArrHdr(hasValue ? 3 : 2);
        encoder.writeUInteger(type);
        encoder.writeUInteger(msg.id);
        if (hasValue) {
            if (value.type) {
                value.type.encoder(codec.format)(value.data, encoder);
            }
            else
                encoder.writeAny(value.data);
        }
    }
    else if (encoder instanceof JsonEncoder_1.JsonEncoder) {
        var value = msg.value;
        encoder.writeStartArr();
        encoder.writeNumber(type);
        encoder.writeArrSeparator();
        encoder.writeNumber(msg.id);
        var hasValue = value !== undefined;
        if (hasValue) {
            encoder.writeArrSeparator();
            if (value.type)
                value.type.encoder(codec.format)(value.data, encoder);
            else
                encoder.writeAny(value.data);
        }
        encoder.writeEndArr();
    }
    else
        encoder.writeArr(msg.toCompact());
};
var NotificationMessage = (function () {
    function NotificationMessage(method, value) {
        this.method = method;
        this.value = value;
    }
    NotificationMessage.prototype.validate = function () {
        (0, validation_1.validateMethod)(this.method);
    };
    NotificationMessage.prototype.toCompact = function () {
        return this.value === undefined
            ? [8, this.method]
            : [8, this.method, this.value.data];
    };
    NotificationMessage.prototype.encodeCompact = function (codec) {
        var encoder = codec.encoder;
        if (encoder instanceof CborEncoder_1.CborEncoder || encoder instanceof msgpack_1.MsgPackEncoder) {
            var value = this.value;
            var hasValue = value !== undefined;
            encoder.writeArrHdr(hasValue ? 3 : 2);
            encoder.writeUInteger(8);
            encoder.writeAsciiStr(this.method);
            if (hasValue) {
                if (value.type)
                    value.type.encoder(codec.format)(value.data, encoder);
                else
                    encoder.writeAny(value.data);
            }
        }
        else if (encoder instanceof JsonEncoder_1.JsonEncoder) {
            var value = this.value;
            encoder.writeStartArr();
            encoder.writeNumber(8);
            encoder.writeArrSeparator();
            encoder.writeAsciiStr(this.method);
            var hasValue = value !== undefined;
            if (hasValue) {
                encoder.writeArrSeparator();
                if (value.type)
                    value.type.encoder(codec.format)(value.data, encoder);
                else
                    encoder.writeAny(value.data);
            }
            encoder.writeEndArr();
        }
        else
            encoder.writeArr(this.toCompact());
    };
    NotificationMessage.prototype.encodeBinary = function (codec) {
        var writer = codec.encoder.writer;
        var name = this.method;
        var nameLength = name.length;
        writer.move(4);
        writer.ascii(name);
        var x0 = writer.x0;
        var x = writer.x;
        this.value.encode(codec);
        var shift = writer.x0 - x0;
        var payloadStart = x + shift;
        var start = payloadStart - 4 - nameLength;
        var payloadSize = writer.x - payloadStart;
        writer.view.setUint32(start, (payloadSize << 8) + nameLength);
    };
    return NotificationMessage;
}());
exports.NotificationMessage = NotificationMessage;
var RequestDataMessage = (function () {
    function RequestDataMessage(id, method, value) {
        this.id = id;
        this.method = method;
        this.value = value;
    }
    RequestDataMessage.prototype.validate = function () {
        (0, validation_1.validateId)(this.id);
        if (this.method)
            (0, validation_1.validateMethod)(this.method);
    };
    RequestDataMessage.prototype.toCompact = function () {
        return this.value === undefined
            ? [0, this.id, this.method]
            : [0, this.id, this.method, this.value.data];
    };
    RequestDataMessage.prototype.encodeCompact = function (codec) {
        encodeCompactWithNameAndPayload(codec, 0, this);
    };
    RequestDataMessage.prototype.encodeBinary = function (codec) {
        encodeBinaryWithNameAndPayload(codec, 1 << 13, this.id, this.method, this.value);
    };
    return RequestDataMessage;
}());
exports.RequestDataMessage = RequestDataMessage;
var RequestCompleteMessage = (function () {
    function RequestCompleteMessage(id, method, value) {
        this.id = id;
        this.method = method;
        this.value = value;
    }
    RequestCompleteMessage.prototype.validate = function () {
        (0, validation_1.validateId)(this.id);
        if (this.method)
            (0, validation_1.validateMethod)(this.method);
    };
    RequestCompleteMessage.prototype.toCompact = function () {
        return this.value === undefined
            ? [1, this.id, this.method]
            : [1, this.id, this.method, this.value.data];
    };
    RequestCompleteMessage.prototype.encodeCompact = function (codec) {
        encodeCompactWithNameAndPayload(codec, 1, this);
    };
    RequestCompleteMessage.prototype.encodeBinary = function (codec) {
        encodeBinaryWithNameAndPayload(codec, 2 << 13, this.id, this.method, this.value);
    };
    return RequestCompleteMessage;
}());
exports.RequestCompleteMessage = RequestCompleteMessage;
var RequestErrorMessage = (function () {
    function RequestErrorMessage(id, method, value) {
        this.id = id;
        this.method = method;
        this.value = value;
    }
    RequestErrorMessage.prototype.validate = function () {
        (0, validation_1.validateId)(this.id);
        if (this.method)
            (0, validation_1.validateMethod)(this.method);
    };
    RequestErrorMessage.prototype.toCompact = function () {
        return [2, this.id, this.method, this.value.data];
    };
    RequestErrorMessage.prototype.encodeCompact = function (codec) {
        encodeCompactWithNameAndPayload(codec, 2, this);
    };
    RequestErrorMessage.prototype.encodeBinary = function (codec) {
        encodeBinaryWithNameAndPayload(codec, 3 << 13, this.id, this.method, this.value);
    };
    return RequestErrorMessage;
}());
exports.RequestErrorMessage = RequestErrorMessage;
var RequestUnsubscribeMessage = (function () {
    function RequestUnsubscribeMessage(id) {
        this.id = id;
    }
    RequestUnsubscribeMessage.prototype.validate = function () {
        (0, validation_1.validateId)(this.id);
    };
    RequestUnsubscribeMessage.prototype.toCompact = function () {
        return [3, this.id];
    };
    RequestUnsubscribeMessage.prototype.encodeCompact = function (codec) {
        codec.encoder.writeArr(this.toCompact());
    };
    RequestUnsubscribeMessage.prototype.encodeBinary = function (codec) {
        codec.encoder.writer.u32(3758096384 | this.id);
    };
    return RequestUnsubscribeMessage;
}());
exports.RequestUnsubscribeMessage = RequestUnsubscribeMessage;
var ResponseCompleteMessage = (function () {
    function ResponseCompleteMessage(id, value) {
        this.id = id;
        this.value = value;
    }
    ResponseCompleteMessage.prototype.validate = function () {
        (0, validation_1.validateId)(this.id);
    };
    ResponseCompleteMessage.prototype.toCompact = function () {
        return this.value === undefined
            ? [5, this.id]
            : [5, this.id, this.value.data];
    };
    ResponseCompleteMessage.prototype.encodeCompact = function (codec) {
        encodeCompactWithPayload(codec, 5, this);
    };
    ResponseCompleteMessage.prototype.encodeBinary = function (codec) {
        encodeBinaryWithPayload(codec, 5 << 13, this.id, this.value);
    };
    return ResponseCompleteMessage;
}());
exports.ResponseCompleteMessage = ResponseCompleteMessage;
var ResponseDataMessage = (function () {
    function ResponseDataMessage(id, value) {
        this.id = id;
        this.value = value;
    }
    ResponseDataMessage.prototype.validate = function () {
        (0, validation_1.validateId)(this.id);
    };
    ResponseDataMessage.prototype.toCompact = function () {
        return [4, this.id, this.value.data];
    };
    ResponseDataMessage.prototype.encodeCompact = function (codec) {
        encodeCompactWithPayload(codec, 4, this);
    };
    ResponseDataMessage.prototype.encodeBinary = function (codec) {
        encodeBinaryWithPayload(codec, 4 << 13, this.id, this.value);
    };
    return ResponseDataMessage;
}());
exports.ResponseDataMessage = ResponseDataMessage;
var ResponseErrorMessage = (function () {
    function ResponseErrorMessage(id, value) {
        this.id = id;
        this.value = value;
    }
    ResponseErrorMessage.prototype.validate = function () {
        (0, validation_1.validateId)(this.id);
    };
    ResponseErrorMessage.prototype.toCompact = function () {
        return [6, this.id, this.value.data];
    };
    ResponseErrorMessage.prototype.encodeCompact = function (codec) {
        encodeCompactWithPayload(codec, 6, this);
    };
    ResponseErrorMessage.prototype.encodeBinary = function (codec) {
        encodeBinaryWithPayload(codec, 6 << 13, this.id, this.value);
    };
    return ResponseErrorMessage;
}());
exports.ResponseErrorMessage = ResponseErrorMessage;
var ResponseUnsubscribeMessage = (function () {
    function ResponseUnsubscribeMessage(id) {
        this.id = id;
    }
    ResponseUnsubscribeMessage.prototype.validate = function () {
        (0, validation_1.validateId)(this.id);
    };
    ResponseUnsubscribeMessage.prototype.toCompact = function () {
        return [7, this.id];
    };
    ResponseUnsubscribeMessage.prototype.encodeCompact = function (codec) {
        codec.encoder.writeArr(this.toCompact());
    };
    ResponseUnsubscribeMessage.prototype.encodeBinary = function (codec) {
        codec.encoder.writer.u32(3758161920 | this.id);
    };
    return ResponseUnsubscribeMessage;
}());
exports.ResponseUnsubscribeMessage = ResponseUnsubscribeMessage;
