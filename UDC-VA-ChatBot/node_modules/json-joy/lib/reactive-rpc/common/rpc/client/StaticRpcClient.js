"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticRpcClient = void 0;
var tslib_1 = require("tslib");
var msg = tslib_1.__importStar(require("../../messages"));
var TimedQueue_1 = require("../../util/TimedQueue");
var Value_1 = require("../../messages/Value");
var Defer_1 = require("../../../../util/Defer");
var rxjs_1 = require("rxjs");
var StaticRpcClient = (function () {
    function StaticRpcClient(_a) {
        var send = _a.send, _b = _a.bufferSize, bufferSize = _b === void 0 ? 100 : _b, _c = _a.bufferTime, bufferTime = _c === void 0 ? 10 : _c;
        var _this = this;
        this.id = 1;
        this.onsend = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                throw new Error('onsend not implemented');
            });
        }); };
        this.calls = new Map();
        if (send)
            this.onsend = send;
        this.buffer = new TimedQueue_1.TimedQueue();
        this.buffer.itemLimit = bufferSize;
        this.buffer.timeLimit = bufferTime;
        this.buffer.onFlush = function (messages) {
            _this.onsend(messages)
                .then(function (responses) {
                var e_1, _a;
                var _b, _c;
                try {
                    for (var responses_1 = tslib_1.__values(responses), responses_1_1 = responses_1.next(); !responses_1_1.done; responses_1_1 = responses_1.next()) {
                        var response = responses_1_1.value;
                        var id = response.id;
                        var calls = _this.calls;
                        var future = calls.get(id);
                        calls.delete(id);
                        if (!future)
                            continue;
                        if (response instanceof msg.ResponseCompleteMessage)
                            future.resolve((_b = response.value) === null || _b === void 0 ? void 0 : _b.data);
                        else if (response instanceof msg.ResponseErrorMessage)
                            future.reject((_c = response.value) === null || _c === void 0 ? void 0 : _c.data);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (responses_1_1 && !responses_1_1.done && (_a = responses_1.return)) _a.call(responses_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            })
                .catch(function (error) {
                var e_2, _a;
                try {
                    for (var messages_1 = tslib_1.__values(messages), messages_1_1 = messages_1.next(); !messages_1_1.done; messages_1_1 = messages_1.next()) {
                        var message = messages_1_1.value;
                        if (message instanceof msg.RequestCompleteMessage) {
                            var id = message.id;
                            var calls = _this.calls;
                            var future = calls.get(id);
                            calls.delete(id);
                            if (!future)
                                continue;
                            future.reject(error);
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (messages_1_1 && !messages_1_1.done && (_a = messages_1.return)) _a.call(messages_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            })
                .finally(function () {
                var e_3, _a;
                try {
                    for (var messages_2 = tslib_1.__values(messages), messages_2_1 = messages_2.next(); !messages_2_1.done; messages_2_1 = messages_2.next()) {
                        var message = messages_2_1.value;
                        if (message instanceof msg.RequestCompleteMessage)
                            _this.calls.delete(message.id);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (messages_2_1 && !messages_2_1.done && (_a = messages_2.return)) _a.call(messages_2);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            });
        };
    }
    StaticRpcClient.prototype.call$ = function (method, data) {
        var _this = this;
        return (data instanceof rxjs_1.Observable ? data : (0, rxjs_1.of)(data)).pipe((0, rxjs_1.switchMap)(function (data) { return _this.call(method, data); }));
    };
    StaticRpcClient.prototype.call = function (method, request) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id, value, message, future;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        id = this.id;
                        this.id = (id + 1) % 0xffff;
                        value = new Value_1.Value(request, undefined);
                        message = new msg.RequestCompleteMessage(id, method, value);
                        future = new Defer_1.Defer();
                        this.calls.set(id, future);
                        this.buffer.push(message);
                        return [4, future.promise];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    StaticRpcClient.prototype.notify = function (method, data) {
        var value = new Value_1.Value(data, undefined);
        this.buffer.push(new msg.NotificationMessage(method, value));
    };
    return StaticRpcClient;
}());
exports.StaticRpcClient = StaticRpcClient;
