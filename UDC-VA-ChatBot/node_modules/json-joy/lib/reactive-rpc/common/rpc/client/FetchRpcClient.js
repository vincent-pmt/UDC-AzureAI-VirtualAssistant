"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FetchRpcClient = void 0;
var tslib_1 = require("tslib");
var StaticRpcClient_1 = require("./StaticRpcClient");
var EncodedStaticRpcClient_1 = require("./EncodedStaticRpcClient");
var FetchRpcClient = (function () {
    function FetchRpcClient(options) {
        var _this = this;
        var msgCodec = options.msgCodec, reqCodec = options.reqCodec, _a = options.resCodec, resCodec = _a === void 0 ? reqCodec : _a, url = options.url;
        var contentType = "application/x.rpc.".concat(msgCodec.id, ".").concat(reqCodec.id);
        if (reqCodec.id !== resCodec.id)
            contentType += "-".concat(resCodec.id);
        var myFetch = options.fetch || fetch;
        this.client = new EncodedStaticRpcClient_1.EncodedStaticRpcClient({
            client: new StaticRpcClient_1.StaticRpcClient({
                bufferSize: options.bufferSize,
                bufferTime: options.bufferTime,
            }),
            msgCodec: msgCodec,
            reqCodec: reqCodec,
            resCodec: resCodec,
            send: function (body) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var response, buffer;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, myFetch(url, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': contentType,
                                },
                                body: body,
                            })];
                        case 1:
                            response = _a.sent();
                            return [4, response.arrayBuffer()];
                        case 2:
                            buffer = _a.sent();
                            return [2, new Uint8Array(buffer)];
                    }
                });
            }); },
        });
    }
    FetchRpcClient.prototype.call$ = function (method, data) {
        return this.client.call$(method, data);
    };
    FetchRpcClient.prototype.call = function (method, request) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2, this.call(method, request)];
            });
        });
    };
    FetchRpcClient.prototype.notify = function (method, data) {
        this.notify(method, data);
    };
    return FetchRpcClient;
}());
exports.FetchRpcClient = FetchRpcClient;
