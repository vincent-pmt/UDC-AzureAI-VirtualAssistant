"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcDuplex = void 0;
var tslib_1 = require("tslib");
var msg = tslib_1.__importStar(require("../messages"));
var RpcDuplex = (function () {
    function RpcDuplex(params) {
        this.client = params.client;
        this.server = params.server;
    }
    RpcDuplex.prototype.onMessages = function (messages, ctx) {
        var length = messages.length;
        for (var i = 0; i < length; i++)
            this.onMessage(messages[i], ctx);
    };
    RpcDuplex.prototype.onMessage = function (message, ctx) {
        if (message instanceof msg.RequestDataMessage)
            this.server.onRequestDataMessage(message, ctx);
        else if (message instanceof msg.RequestCompleteMessage)
            this.server.onRequestCompleteMessage(message, ctx);
        else if (message instanceof msg.RequestErrorMessage)
            this.server.onRequestErrorMessage(message, ctx);
        else if (message instanceof msg.ResponseUnsubscribeMessage)
            this.server.onUnsubscribeMessage(message);
        else if (message instanceof msg.NotificationMessage)
            this.server.onNotificationMessage(message, ctx);
        else if (message instanceof msg.ResponseCompleteMessage)
            return this.client.onResponseComplete(message);
        else if (message instanceof msg.ResponseDataMessage)
            return this.client.onResponseData(message);
        else if (message instanceof msg.ResponseErrorMessage)
            return this.client.onResponseError(message);
        else if (message instanceof msg.RequestUnsubscribeMessage)
            return this.client.onRequestUnsubscribe(message);
    };
    RpcDuplex.prototype.call$ = function (method, data) {
        return this.client.call$(method, data);
    };
    RpcDuplex.prototype.call = function (method, data) {
        return this.client.call(method, data);
    };
    RpcDuplex.prototype.notify = function (method, data) {
        this.client.notify(method, data);
    };
    RpcDuplex.prototype.stop = function () {
        this.client.stop();
        this.server.stop();
    };
    RpcDuplex.prototype.disconnect = function () {
        this.client.disconnect();
        this.server.disconnect();
    };
    return RpcDuplex;
}());
exports.RpcDuplex = RpcDuplex;
