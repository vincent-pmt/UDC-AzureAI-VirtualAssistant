"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcMessageBatchProcessor = void 0;
var tslib_1 = require("tslib");
var msg = tslib_1.__importStar(require("../messages"));
var caller_1 = require("./caller");
var validation_1 = require("./validation");
var RpcMessageBatchProcessor = (function () {
    function RpcMessageBatchProcessor(_a) {
        var caller = _a.caller;
        this.caller = caller;
    }
    RpcMessageBatchProcessor.prototype.onBatch = function (list, ctx) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var promises, length_1, i, message, settled, result, settledLength, i, item, error_1, value;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        promises = [];
                        length_1 = list.length;
                        for (i = 0; i < length_1; i++) {
                            message = list[i];
                            switch (message.constructor) {
                                case msg.NotificationMessage:
                                    this.onNotification(message, ctx);
                                    break;
                                case msg.RequestDataMessage:
                                case msg.RequestCompleteMessage:
                                case msg.RequestErrorMessage:
                                    promises.push(this.onRequest(message, ctx));
                                    break;
                            }
                        }
                        return [4, Promise.allSettled(promises)];
                    case 1:
                        settled = _a.sent();
                        result = [];
                        settledLength = settled.length;
                        for (i = 0; i < settledLength; i++) {
                            item = settled[i];
                            result.push(item.status === 'fulfilled' ? item.value : item.reason);
                        }
                        return [2, result];
                    case 2:
                        error_1 = _a.sent();
                        value = caller_1.RpcError.internalErrorValue();
                        return [2, [new msg.ResponseErrorMessage(-1, value)]];
                    case 3: return [2];
                }
            });
        });
    };
    RpcMessageBatchProcessor.prototype.onNotification = function (message, ctx) {
        var method = message.method;
        (0, validation_1.validateMethod)(method);
        this.caller.notification(method, message.value.data, ctx).catch(function (error) { });
    };
    RpcMessageBatchProcessor.prototype.onRequest = function (message, ctx) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id, method, value, data, result, error_2;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        id = message.id;
                        (0, validation_1.validateId)(id);
                        method = message.method;
                        (0, validation_1.validateMethod)(method);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        value = message.value;
                        data = value ? value.data : undefined;
                        return [4, this.caller.call(method, data, ctx)];
                    case 2:
                        result = _a.sent();
                        return [2, new msg.ResponseCompleteMessage(id, result)];
                    case 3:
                        error_2 = _a.sent();
                        throw new msg.ResponseErrorMessage(id, error_2);
                    case 4: return [2];
                }
            });
        });
    };
    return RpcMessageBatchProcessor;
}());
exports.RpcMessageBatchProcessor = RpcMessageBatchProcessor;
