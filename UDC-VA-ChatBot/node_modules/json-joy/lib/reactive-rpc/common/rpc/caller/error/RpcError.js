"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcError = exports.RpcErrorCodes = void 0;
var tslib_1 = require("tslib");
var Value_1 = require("../../../messages/Value");
var RpcErrorType_1 = require("./RpcErrorType");
var RpcErrorCodes;
(function (RpcErrorCodes) {
    RpcErrorCodes[RpcErrorCodes["INTERNAL_ERROR"] = 0] = "INTERNAL_ERROR";
    RpcErrorCodes[RpcErrorCodes["BAD_REQUEST"] = 1] = "BAD_REQUEST";
    RpcErrorCodes[RpcErrorCodes["TIMEOUT"] = 2] = "TIMEOUT";
    RpcErrorCodes[RpcErrorCodes["NOT_FOUND"] = 3] = "NOT_FOUND";
    RpcErrorCodes[RpcErrorCodes["CONFLICT"] = 4] = "CONFLICT";
    RpcErrorCodes[RpcErrorCodes["ID_TAKEN"] = 5] = "ID_TAKEN";
    RpcErrorCodes[RpcErrorCodes["INVALID_METHOD"] = 6] = "INVALID_METHOD";
    RpcErrorCodes[RpcErrorCodes["INVALID_METHOD_NAME"] = 7] = "INVALID_METHOD_NAME";
    RpcErrorCodes[RpcErrorCodes["NO_METHOD_SPECIFIED"] = 8] = "NO_METHOD_SPECIFIED";
    RpcErrorCodes[RpcErrorCodes["METHOD_NOT_FOUND"] = 9] = "METHOD_NOT_FOUND";
    RpcErrorCodes[RpcErrorCodes["STOP"] = 10] = "STOP";
    RpcErrorCodes[RpcErrorCodes["DISCONNECT"] = 11] = "DISCONNECT";
    RpcErrorCodes[RpcErrorCodes["BUFFER_OVERFLOW"] = 12] = "BUFFER_OVERFLOW";
})(RpcErrorCodes = exports.RpcErrorCodes || (exports.RpcErrorCodes = {}));
var RpcError = (function (_super) {
    tslib_1.__extends(RpcError, _super);
    function RpcError(message, code, errno, errorId, meta) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.code = code;
        _this.errno = errno;
        _this.errorId = errorId;
        _this.meta = meta;
        if (message === code)
            _this.code = undefined;
        Object.setPrototypeOf(_this, RpcError.prototype);
        return _this;
    }
    RpcError.from = function (error) {
        if (error instanceof RpcError)
            return error;
        return RpcError.internal();
    };
    RpcError.fromCode = function (errno, message, meta) {
        if (message === void 0) { message = ''; }
        if (meta === void 0) { meta = undefined; }
        var code = RpcErrorCodes[errno];
        return new RpcError(message || code, code, errno, undefined, meta || undefined);
    };
    RpcError.internal = function (message) {
        if (message === void 0) { message = 'Internal Server Error'; }
        return RpcError.fromCode(RpcErrorCodes.INTERNAL_ERROR, message);
    };
    RpcError.invalidRequest = function () {
        return RpcError.fromCode(RpcErrorCodes.BAD_REQUEST, 'Bad Request');
    };
    RpcError.validation = function (message, meta) {
        return RpcError.fromCode(RpcErrorCodes.BAD_REQUEST, message, meta);
    };
    RpcError.value = function (error) {
        return new Value_1.Value(error, RpcErrorType_1.RpcErrorType);
    };
    RpcError.valueFrom = function (error, def) {
        if (def === void 0) { def = RpcError.internalErrorValue(); }
        if (error instanceof Value_1.Value && error.data instanceof RpcError && error.type === RpcErrorType_1.RpcErrorType)
            return error;
        if (error instanceof RpcError)
            return RpcError.value(error);
        return def;
    };
    RpcError.valueFromCode = function (errno, message) {
        return RpcError.value(RpcError.fromCode(errno, message));
    };
    RpcError.internalErrorValue = function () {
        return RpcError.value(RpcError.internal());
    };
    RpcError.isRpcError = function (error) {
        return error instanceof RpcError;
    };
    RpcError.prototype.toJson = function () {
        var err = { message: this.message };
        if (this.code)
            err.code = this.code;
        if (this.errno)
            err.errno = this.errno;
        if (this.errorId)
            err.errorId = this.errorId;
        if (this.meta)
            err.meta = this.meta;
        return err;
    };
    return RpcError;
}(Error));
exports.RpcError = RpcError;
