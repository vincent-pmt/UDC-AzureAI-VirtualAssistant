"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonRpc2RpcMessageCodec = void 0;
var tslib_1 = require("tslib");
var error_1 = require("../../rpc/caller/error");
var Value_1 = require("../../messages/Value");
var msg = tslib_1.__importStar(require("../../messages"));
var schema = tslib_1.__importStar(require("./schema"));
var JsonRpc2RpcMessageCodec = (function () {
    function JsonRpc2RpcMessageCodec() {
        this.id = 'json2.verbose';
        this.format = 2;
    }
    JsonRpc2RpcMessageCodec.prototype.encodeMessage = function (jsonCodec, message) {
        if (message instanceof msg.ResponseCompleteMessage || message instanceof msg.ResponseDataMessage) {
            var pojo = {
                id: message.id,
                result: message.value,
            };
            schema.JsonRpc2Response.encoder(jsonCodec.format)(pojo, jsonCodec.encoder);
        }
        else if (message instanceof msg.ResponseErrorMessage) {
            var error = message.value.data;
            if (error instanceof error_1.RpcError) {
                var pojo = {
                    id: message.id,
                    error: {
                        message: error.message,
                        code: error.errno,
                        data: error.toJson(),
                    },
                };
                schema.JsonRpc2Error.encoder(jsonCodec.format)(pojo, jsonCodec.encoder);
            }
            else {
                var pojo = {
                    id: message.id,
                    error: {
                        message: 'Unknown error',
                        code: 0,
                        data: error,
                    },
                };
                schema.JsonRpc2Error.encoder(jsonCodec.format)(pojo, jsonCodec.encoder);
            }
        }
        else if (message instanceof msg.NotificationMessage) {
            var pojo = {
                method: message.method,
                params: message.value,
            };
            schema.JsonRpc2Notification.encoder(jsonCodec.format)(pojo, jsonCodec.encoder);
        }
        else if (message instanceof msg.RequestCompleteMessage ||
            message instanceof msg.RequestDataMessage ||
            message instanceof msg.RequestErrorMessage) {
            var pojo = {
                jsonrpc: '2.0',
                id: message.id,
                method: message.method,
                params: message.value,
            };
            schema.JsonRpc2Request.encoder(jsonCodec.format)(pojo, jsonCodec.encoder);
        }
    };
    JsonRpc2RpcMessageCodec.prototype.encodeBatch = function (jsonCodec, batch) {
        var length = batch.length;
        if (length === 1) {
            this.encodeMessage(jsonCodec, batch[0]);
        }
        else {
            switch (jsonCodec.format) {
                case 0:
                case 1: {
                    var encoder = jsonCodec.encoder;
                    encoder.writeArrHdr(length);
                    for (var i = 0; i < length; i++) {
                        this.encodeMessage(jsonCodec, batch[i]);
                    }
                    break;
                }
                case 2: {
                    var encoder = jsonCodec.encoder;
                    encoder.writeStartArr();
                    var last = length - 1;
                    for (var i = 0; i < last; i++) {
                        this.encodeMessage(jsonCodec, batch[i]);
                        encoder.writeArrSeparator();
                    }
                    if (length > 0)
                        this.encodeMessage(jsonCodec, batch[last]);
                    encoder.writeEndArr();
                    break;
                }
            }
        }
    };
    JsonRpc2RpcMessageCodec.prototype.encode = function (jsonCodec, batch) {
        var encoder = jsonCodec.encoder;
        var writer = encoder.writer;
        writer.reset();
        this.encodeBatch(jsonCodec, batch);
        return writer.flush();
    };
    JsonRpc2RpcMessageCodec.prototype.decodeBatch = function (jsonCodec, uint8) {
        try {
            var jsonRpcMessages = jsonCodec.decoder.read(uint8);
            if (!Array.isArray(jsonRpcMessages))
                jsonRpcMessages = [jsonRpcMessages];
            var messages = [];
            var length_1 = jsonRpcMessages.length;
            for (var i = 0; i < length_1; i++)
                messages.push(this.fromJson(jsonRpcMessages[i]));
            return messages;
        }
        catch (error) {
            if (error instanceof error_1.RpcError)
                throw error;
            throw error_1.RpcError.invalidRequest();
        }
    };
    JsonRpc2RpcMessageCodec.prototype.fromJson = function (message) {
        if (!message || typeof message !== 'object')
            throw error_1.RpcError.invalidRequest();
        if (message.id === undefined) {
            var notification = message;
            var data = notification.params;
            var value = new Value_1.Value(data, undefined);
            return new msg.NotificationMessage(notification.method, value);
        }
        if (typeof message.method === 'string') {
            var request = message;
            var data = request.params;
            var value = data === undefined ? undefined : new Value_1.Value(request.params, undefined);
            if (typeof request.id !== 'number')
                throw error_1.RpcError.invalidRequest();
            return new msg.RequestCompleteMessage(request.id, request.method, value);
        }
        if (message.result !== undefined) {
            var response = message;
            if (typeof response.id !== 'number')
                throw error_1.RpcError.invalidRequest();
            var data = response.result;
            var value = data === undefined ? undefined : new Value_1.Value(response.result, undefined);
            return new msg.ResponseCompleteMessage(response.id, value);
        }
        if (message.error !== undefined) {
            var response = message;
            var value = new Value_1.Value(response.error.data, undefined);
            if (typeof response.id !== 'number')
                throw error_1.RpcError.invalidRequest();
            return new msg.ResponseErrorMessage(response.id, value);
        }
        throw error_1.RpcError.invalidRequest();
    };
    return JsonRpc2RpcMessageCodec;
}());
exports.JsonRpc2RpcMessageCodec = JsonRpc2RpcMessageCodec;
