"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BinaryRpcMessageCodec = void 0;
var decode_1 = require("./decode");
var BinaryRpcMessageCodec = (function () {
    function BinaryRpcMessageCodec() {
        this.id = 'rx.binary';
        this.format = 1;
    }
    BinaryRpcMessageCodec.prototype.encodeMessage = function (jsonCodec, message) {
        message.encodeBinary(jsonCodec);
    };
    BinaryRpcMessageCodec.prototype.encodeBatch = function (jsonCodec, batch) {
        var length = batch.length;
        for (var i = 0; i < length; i++)
            batch[i].encodeBinary(jsonCodec);
    };
    BinaryRpcMessageCodec.prototype.decodeBatch = function (jsonCodec, uint8) {
        var decoder = jsonCodec.decoder;
        var reader = decoder.reader;
        reader.reset(uint8);
        var size = uint8.length;
        var messages = [];
        while (reader.x < size) {
            var message = (0, decode_1.decode)(reader);
            messages.push(message);
        }
        var length = messages.length;
        for (var i = 0; i < length; i++) {
            var message = messages[i];
            var value = message.value;
            if (value) {
                var cut = value.data;
                var arr = cut.uint8.subarray(cut.start, cut.start + cut.size);
                var data = arr.length ? decoder.read(arr) : undefined;
                if (data === undefined)
                    message.value = undefined;
                else
                    value.data = data;
            }
        }
        return messages;
    };
    BinaryRpcMessageCodec.prototype.encode = function (jsonCodec, batch) {
        var encoder = jsonCodec.encoder;
        var writer = encoder.writer;
        writer.reset();
        this.encodeBatch(jsonCodec, batch);
        return writer.flush();
    };
    return BinaryRpcMessageCodec;
}());
exports.BinaryRpcMessageCodec = BinaryRpcMessageCodec;
