"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWebSocketMock = void 0;
var utf8_1 = require("../../../util/strings/utf8");
var createWebSocketMock = function (params) {
    var _a;
    var WebSocketMock = (_a = (function () {
            function WebSocketMock(url, _protocol) {
                if (_protocol === void 0) { _protocol = ''; }
                this.url = url;
                this._protocol = _protocol;
                this.CONNECTING = 0;
                this.OPEN = 1;
                this.CLOSING = 2;
                this.CLOSED = 3;
                this.onclose = null;
                this.onerror = null;
                this.onmessage = null;
                this.onopen = null;
                this.binaryType = 'blob';
                this._readyState = 0;
                this._bufferedAmount = 0;
            }
            Object.defineProperty(WebSocketMock.prototype, "bufferedAmount", {
                get: function () {
                    return this._bufferedAmount;
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(WebSocketMock.prototype, "extensions", {
                get: function () {
                    return '';
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(WebSocketMock.prototype, "protocol", {
                get: function () {
                    return this._protocol instanceof Array ? this._protocol.join(',') : this._protocol;
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(WebSocketMock.prototype, "readyState", {
                get: function () {
                    return this._readyState;
                },
                enumerable: false,
                configurable: true
            });
            WebSocketMock.prototype.close = function (code, reason) {
                if (!params.onClose)
                    return;
                return params.onClose(code, reason);
            };
            WebSocketMock.prototype.send = function (data) {
                if (typeof data === 'string') {
                    this._bufferedAmount += (0, utf8_1.utf8Count)(data);
                }
                else if (ArrayBuffer.isView(data)) {
                    this._bufferedAmount += data.byteLength;
                }
                else if (data && typeof data === 'object') {
                    if (data.byteLength !== undefined) {
                        this._bufferedAmount += Number(data.byteLength);
                    }
                    else if (data.size !== undefined) {
                        this._bufferedAmount += Number(data.size);
                    }
                }
                if (!params.onSend)
                    return;
                return params.onSend(data);
            };
            WebSocketMock.prototype.addEventListener = function () {
                throw new Error('not implemented');
            };
            WebSocketMock.prototype.removeEventListener = function () {
                throw new Error('not implemented');
            };
            WebSocketMock.prototype.dispatchEvent = function () {
                throw new Error('not implemented');
            };
            WebSocketMock.prototype._extendParams = function (newParams) {
                Object.assign(params, newParams);
            };
            WebSocketMock.prototype._open = function () {
                this._readyState = 1;
                if (typeof this.onopen === 'function') {
                    this.onopen.call(this, new Event('open'));
                }
            };
            WebSocketMock.prototype._close = function (code, reason, wasClean) {
                if (this._readyState === 3)
                    throw new Error('Mock WebSocket already closed.');
                this._readyState = 3;
                if (!this.onclose)
                    return;
                var event = {
                    code: code,
                    reason: reason,
                    wasClean: wasClean,
                };
                this.onclose.call(this, event);
            };
            WebSocketMock.prototype._error = function () {
                if (!this.onerror)
                    return;
                this.onerror.call(this, new Event('error'));
            };
            WebSocketMock.prototype._message = function (message) {
                if (!this.onmessage)
                    return;
                var event = { data: message };
                this.onmessage.call(this, event);
            };
            return WebSocketMock;
        }()),
        _a.CONNECTING = 0,
        _a.OPEN = 1,
        _a.CLOSING = 2,
        _a.CLOSED = 3,
        _a);
    return WebSocketMock;
};
exports.createWebSocketMock = createWebSocketMock;
