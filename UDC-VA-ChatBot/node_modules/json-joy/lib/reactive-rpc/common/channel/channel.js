"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PersistentChannel = exports.WebSocketChannel = void 0;
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var toUint8Array_1 = require("../../../util/buffers/toUint8Array");
var operators_1 = require("rxjs/operators");
var WebSocketChannel = (function () {
    function WebSocketChannel(_a) {
        var newSocket = _a.newSocket;
        var _this = this;
        this.state$ = new rxjs_1.BehaviorSubject(0);
        this.open$ = new rxjs_1.ReplaySubject(1);
        this.close$ = new rxjs_1.ReplaySubject(1);
        this.error$ = new rxjs_1.Subject();
        this.message$ = new rxjs_1.Subject();
        try {
            var ws = (this.ws = newSocket());
            ws.binaryType = 'arraybuffer';
            ws.onopen = function () {
                _this.state$.next(1);
                _this.open$.next(_this);
                _this.open$.complete();
            };
            ws.onclose = function (event) {
                _this.state$.next(2);
                _this.close$.next([_this, event]);
                _this.close$.complete();
                _this.message$.complete();
            };
            ws.onerror = function (event) {
                var errorEvent = event;
                var error = errorEvent.error instanceof Error ? errorEvent.error : new Error(String(errorEvent.message) || 'ERROR');
                _this.error$.next(error);
            };
            ws.onmessage = function (event) {
                var data = event.data;
                var message = (typeof data === 'string' ? data : (0, toUint8Array_1.toUint8Array)(data));
                _this.message$.next(message);
            };
        }
        catch (error) {
            this.state$.next(2);
            this.error$.next(error);
            this.close$.next([this, { code: 0, wasClean: true, reason: 'CONSTRUCTOR' }]);
            this.close$.complete();
        }
    }
    WebSocketChannel.prototype.buffer = function () {
        if (!this.ws)
            return 0;
        return this.ws.bufferedAmount;
    };
    WebSocketChannel.prototype.close = function (code, reason) {
        if (!this.ws)
            return;
        this.ws.close(code, reason);
    };
    WebSocketChannel.prototype.isOpen = function () {
        return this.state$.getValue() === 1;
    };
    WebSocketChannel.prototype.send = function (data) {
        if (!this.ws)
            return -1;
        var buffered = this.ws.bufferedAmount;
        this.ws.send(data);
        return this.ws.bufferedAmount - buffered;
    };
    WebSocketChannel.prototype.send$ = function (data) {
        var _this = this;
        return this.open$.pipe((0, operators_1.map)(function () {
            if (!_this.isOpen())
                throw new Error('CLOSED');
            return _this.send(data);
        }));
    };
    return WebSocketChannel;
}());
exports.WebSocketChannel = WebSocketChannel;
var PersistentChannel = (function () {
    function PersistentChannel(params) {
        var _this = this;
        this.params = params;
        this.active$ = new rxjs_1.BehaviorSubject(false);
        this.channel$ = new rxjs_1.BehaviorSubject(undefined);
        this.open$ = new rxjs_1.BehaviorSubject(false);
        this.message$ = this.channel$.pipe((0, operators_1.filter)(function (channel) { return !!channel; }), (0, operators_1.switchMap)(function (channel) { return channel.message$; }));
        this.retries = 0;
        var start$ = new rxjs_1.Subject();
        var stop$ = new rxjs_1.Subject();
        this.active$
            .pipe((0, operators_1.skip)(1), (0, operators_1.filter)(function (active) { return active; }))
            .subscribe(function () {
            start$.next(undefined);
        });
        this.active$
            .pipe((0, operators_1.skip)(1), (0, operators_1.filter)(function (active) { return !active; }))
            .subscribe(function () {
            stop$.next(undefined);
        });
        start$.subscribe(function () { return _this.channel$.next(params.newChannel()); });
        start$
            .pipe((0, operators_1.switchMap)(function () { return _this.channel$; }), (0, operators_1.filter)(function (channel) { return !!channel; }), (0, operators_1.takeUntil)(stop$), (0, operators_1.switchMap)(function (channel) { return channel.close$; }), (0, operators_1.takeUntil)(stop$), (0, operators_1.switchMap)(function () {
            return (0, rxjs_1.from)((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var timeout;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            timeout = this.reconnectDelay();
                            this.retries++;
                            return [4, new Promise(function (resolve) { return setTimeout(resolve, timeout); })];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            }); })());
        }), (0, operators_1.takeUntil)(stop$), (0, operators_1.tap)(function () { return _this.channel$.next(params.newChannel()); }), (0, operators_1.delay)(params.minUptime || 5000), (0, operators_1.takeUntil)(stop$), (0, operators_1.tap)(function () {
            var _a;
            var isOpen = (_a = _this.channel$.getValue()) === null || _a === void 0 ? void 0 : _a.isOpen();
            if (isOpen) {
                _this.retries = 0;
            }
        }))
            .subscribe();
        start$
            .pipe((0, operators_1.switchMap)(function () { return _this.channel$; }), (0, operators_1.filter)(function (channel) { return !!channel; }), (0, operators_1.switchMap)(function (channel) { return channel.state$; }), (0, operators_1.map)(function (state) { return state === 1; }))
            .subscribe(function (open) {
            if (open !== _this.open$.getValue())
                _this.open$.next(open);
        });
        stop$.subscribe(function () {
            _this.retries = 0;
        });
    }
    PersistentChannel.prototype.start = function () {
        if (this.active$.getValue())
            return;
        this.active$.next(true);
    };
    PersistentChannel.prototype.stop = function () {
        if (!this.active$.getValue())
            return;
        this.active$.next(false);
        var channel = this.channel$.getValue();
        if (channel) {
            channel.close();
            this.channel$.next(undefined);
        }
        this.open$.next(false);
    };
    PersistentChannel.prototype.reconnectDelay = function () {
        if (this.retries <= 0)
            return 0;
        var minReconnectionDelay = this.params.minReconnectionDelay || Math.round(1000 + Math.random() * 1000);
        var maxReconnectionDelay = this.params.maxReconnectionDelay || 10000;
        var reconnectionDelayGrowFactor = this.params.reconnectionDelayGrowFactor || 1.3;
        var delay = Math.min(maxReconnectionDelay, minReconnectionDelay * Math.pow(reconnectionDelayGrowFactor, (this.retries - 1)));
        return delay;
    };
    PersistentChannel.prototype.send$ = function (data) {
        var _this = this;
        return this.channel$.pipe((0, operators_1.filter)(function (channel) { return !!channel; }), (0, operators_1.switchMap)(function (channel) { return channel.open$; }), (0, operators_1.filter)(function (channel) { return channel.isOpen(); }), (0, operators_1.take)(1), (0, operators_1.map)(function (channel) {
            var canSend = _this.active$.getValue() && _this.open$.getValue();
            return canSend ? channel.send(data) : -1;
        }));
    };
    return PersistentChannel;
}());
exports.PersistentChannel = PersistentChannel;
