"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonEncoder = void 0;
var toBase64Bin_1 = require("../../util/base64/toBase64Bin");
var JsonEncoder = (function () {
    function JsonEncoder(writer) {
        this.writer = writer;
    }
    JsonEncoder.prototype.encode = function (value) {
        var writer = this.writer;
        writer.reset();
        this.writeAny(value);
        return writer.flush();
    };
    JsonEncoder.prototype.encodeFast = function (value) {
        var writer = this.writer;
        writer.reset();
        this.writeAny(value);
        return writer.flushSlice();
    };
    JsonEncoder.prototype.writeAny = function (value) {
        switch (typeof value) {
            case 'boolean':
                return this.writeBoolean(value);
            case 'number':
                return this.writeNumber(value);
            case 'string':
                return this.writeStr(value);
            case 'object': {
                if (value === null)
                    return this.writeNull();
                var constructor = value.constructor;
                switch (constructor) {
                    case Array:
                        return this.writeArr(value);
                    case Uint8Array:
                        return this.writeBin(value);
                    default:
                        return this.writeObj(value);
                }
            }
            default:
                return this.writeNull();
        }
    };
    JsonEncoder.prototype.writeNull = function () {
        this.writer.u32(0x6e756c6c);
    };
    JsonEncoder.prototype.writeBoolean = function (bool) {
        if (bool)
            this.writer.u32(0x74727565);
        else
            this.writer.u8u32(0x66, 0x616c7365);
    };
    JsonEncoder.prototype.writeNumber = function (num) {
        var str = num.toString();
        this.writer.ascii(str);
    };
    JsonEncoder.prototype.writeInteger = function (int) {
        this.writeNumber(int >> 0 === int ? int : Math.trunc(int));
    };
    JsonEncoder.prototype.writeUInteger = function (uint) {
        this.writeInteger(uint < 0 ? -uint : uint);
    };
    JsonEncoder.prototype.writeFloat = function (float) {
        this.writeNumber(float);
    };
    JsonEncoder.prototype.writeBin = function (buf) {
        var writer = this.writer;
        var length = buf.length;
        writer.ensureCapacity(38 + 3 + (length << 1));
        var view = writer.view;
        var x = writer.x;
        view.setUint32(x, 577003892);
        x += 4;
        view.setUint32(x, 1631215984);
        x += 4;
        view.setUint32(x, 1886153059);
        x += 4;
        view.setUint32(x, 1635019119);
        x += 4;
        view.setUint32(x, 1848602467);
        x += 4;
        view.setUint32(x, 1952805933);
        x += 4;
        view.setUint32(x, 1937011301);
        x += 4;
        view.setUint32(x, 1634548578);
        x += 4;
        view.setUint32(x, 1634952502);
        x += 4;
        view.setUint16(x, 13356);
        x += 2;
        x = (0, toBase64Bin_1.toBase64Bin)(buf, 0, length, view, x);
        writer.uint8[x++] = 0x22;
        writer.x = x;
    };
    JsonEncoder.prototype.writeStr = function (str) {
        var writer = this.writer;
        var length = str.length;
        writer.ensureCapacity(length * 5 + 2);
        if (length < 256) {
            var x = writer.x;
            var uint8 = writer.uint8;
            uint8[x++] = 0x22;
            for (var i = 0; i < length; i++) {
                var code = str.charCodeAt(i);
                switch (code) {
                    case 34:
                    case 92:
                        uint8[x++] = 0x5c;
                        break;
                }
                if (code < 32 || code > 126) {
                    writer.utf8(JSON.stringify(str));
                    return;
                }
                else
                    uint8[x++] = code;
            }
            uint8[x++] = 0x22;
            writer.x = x;
            return;
        }
        writer.utf8(JSON.stringify(str));
    };
    JsonEncoder.prototype.writeAsciiStr = function (str) {
        var length = str.length;
        var writer = this.writer;
        writer.ensureCapacity(length * 2 + 2);
        var uint8 = writer.uint8;
        var x = writer.x;
        uint8[x++] = 0x22;
        for (var i = 0; i < length; i++) {
            var code = str.charCodeAt(i);
            switch (code) {
                case 34:
                case 92:
                    uint8[x++] = 0x5c;
                    break;
            }
            uint8[x++] = code;
        }
        uint8[x++] = 0x22;
        writer.x = x;
    };
    JsonEncoder.prototype.writeArr = function (arr) {
        var writer = this.writer;
        writer.u8(0x5b);
        var length = arr.length;
        var last = length - 1;
        for (var i = 0; i < last; i++) {
            this.writeAny(arr[i]);
            writer.u8(0x2c);
        }
        if (last >= 0)
            this.writeAny(arr[last]);
        writer.u8(0x5d);
    };
    JsonEncoder.prototype.writeStartArr = function () {
        this.writer.u8(0x5b);
    };
    JsonEncoder.prototype.writeEndArr = function () {
        this.writer.u8(0x5d);
    };
    JsonEncoder.prototype.writeArrSeparator = function () {
        this.writer.u8(0x2c);
    };
    JsonEncoder.prototype.writeObj = function (obj) {
        var writer = this.writer;
        var keys = Object.keys(obj);
        var length = keys.length;
        if (!length)
            return writer.u16(0x7b7d);
        writer.u8(0x7b);
        for (var i = 0; i < length; i++) {
            var key = keys[i];
            var value = obj[key];
            this.writeStr(key);
            writer.u8(0x3a);
            this.writeAny(value);
            writer.u8(0x2c);
        }
        writer.uint8[writer.x - 1] = 0x7d;
    };
    JsonEncoder.prototype.writeStartObj = function () {
        this.writer.u8(0x7b);
    };
    JsonEncoder.prototype.writeEndObj = function () {
        this.writer.u8(0x7d);
    };
    JsonEncoder.prototype.writeObjSeparator = function () {
        this.writer.u8(0x2c);
    };
    JsonEncoder.prototype.writeObjKeySeparator = function () {
        this.writer.u8(0x3a);
    };
    return JsonEncoder;
}());
exports.JsonEncoder = JsonEncoder;
