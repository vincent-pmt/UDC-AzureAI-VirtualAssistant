"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CborDecoder = void 0;
var tslib_1 = require("tslib");
var CborDecoderBase_1 = require("./CborDecoderBase");
var JsonPackValue_1 = require("../JsonPackValue");
var CborDecoder = (function (_super) {
    tslib_1.__extends(CborDecoder, _super);
    function CborDecoder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CborDecoder.prototype.readAsMap = function () {
        var octet = this.reader.u8();
        var major = octet >> 5;
        var minor = octet & 31;
        switch (major) {
            case 5:
                return this.readMap(minor);
            default:
                throw 0;
        }
    };
    CborDecoder.prototype.readMap = function (minor) {
        var length = this.readMinorLen(minor);
        if (length >= 0)
            return this.readMapRaw(length);
        else
            return this.readMapIndef();
    };
    CborDecoder.prototype.readMapRaw = function (length) {
        var map = new Map();
        for (var i = 0; i < length; i++) {
            var key = this.val();
            var value = this.val();
            map.set(key, value);
        }
        return map;
    };
    CborDecoder.prototype.readMapIndef = function () {
        var map = new Map();
        while (this.reader.peak() !== 255) {
            var key = this.val();
            if (this.reader.peak() === 255)
                throw 7;
            var value = this.val();
            map.set(key, value);
        }
        this.reader.x++;
        return map;
    };
    CborDecoder.prototype.skipN = function (n) {
        for (var i = 0; i < n; i++)
            this.skipAny();
    };
    CborDecoder.prototype.skipAny = function () {
        this.skipAnyRaw(this.reader.u8());
    };
    CborDecoder.prototype.skipAnyRaw = function (octet) {
        var major = octet >> 5;
        var minor = octet & 31;
        switch (major) {
            case 0:
            case 1:
                this.skipUNint(minor);
                break;
            case 2:
                this.skipBin(minor);
                break;
            case 3:
                this.skipStr(minor);
                break;
            case 4:
                this.skipArr(minor);
                break;
            case 5:
                this.skipObj(minor);
                break;
            case 7:
                this.skipTkn(minor);
                break;
            case 6:
                this.skipTag(minor);
                break;
        }
    };
    CborDecoder.prototype.skipMinorLen = function (minor) {
        if (minor <= 23)
            return minor;
        switch (minor) {
            case 24:
                return this.reader.u8();
            case 25:
                return this.reader.u16();
            case 26:
                return this.reader.u32();
            case 27:
                return Number(this.reader.u64());
            case 31:
                return -1;
            default:
                throw 1;
        }
    };
    CborDecoder.prototype.skipUNint = function (minor) {
        if (minor <= 23)
            return;
        switch (minor) {
            case 24:
                return this.reader.skip(1);
            case 25:
                return this.reader.skip(2);
            case 26:
                return this.reader.skip(4);
            case 27:
                return this.reader.skip(8);
            default:
                throw 1;
        }
    };
    CborDecoder.prototype.skipBin = function (minor) {
        var length = this.skipMinorLen(minor);
        if (length >= 0)
            this.reader.skip(length);
        else {
            while (this.reader.peak() !== 255)
                this.skipBinChunk();
            this.reader.x++;
        }
    };
    CborDecoder.prototype.skipBinChunk = function () {
        var octet = this.reader.u8();
        var major = octet >> 5;
        var minor = octet & 31;
        if (major !== 2)
            throw 2;
        if (minor > 27)
            throw 3;
        this.skipBin(minor);
    };
    CborDecoder.prototype.skipStr = function (minor) {
        var length = this.skipMinorLen(minor);
        if (length >= 0)
            this.reader.skip(length);
        else {
            while (this.reader.peak() !== 255)
                this.skipStrChunk();
            this.reader.x++;
        }
    };
    CborDecoder.prototype.skipStrChunk = function () {
        var octet = this.reader.u8();
        var major = octet >> 5;
        var minor = octet & 31;
        if (major !== 3)
            throw 4;
        if (minor > 27)
            throw 5;
        this.skipStr(minor);
    };
    CborDecoder.prototype.skipArr = function (minor) {
        var length = this.skipMinorLen(minor);
        if (length >= 0)
            this.skipN(length);
        else {
            while (this.reader.peak() !== 255)
                this.skipAny();
            this.reader.x++;
        }
    };
    CborDecoder.prototype.skipObj = function (minor) {
        var length = this.readMinorLen(minor);
        if (length >= 0)
            return this.skipN(length * 2);
        else {
            while (this.reader.peak() !== 255) {
                this.skipAny();
                if (this.reader.peak() === 255)
                    throw 7;
                this.skipAny();
            }
            this.reader.x++;
        }
    };
    CborDecoder.prototype.skipTag = function (minor) {
        var length = this.skipMinorLen(minor);
        if (length < 0)
            throw 1;
        this.skipAny();
    };
    CborDecoder.prototype.skipTkn = function (minor) {
        switch (minor) {
            case 0xf8 & 31:
                this.reader.skip(1);
                return;
            case 0xf9 & 31:
                this.reader.skip(2);
                return;
            case 0xfa & 31:
                this.reader.skip(4);
                return;
            case 0xfb & 31:
                this.reader.skip(8);
                return;
        }
        if (minor <= 23)
            return;
        throw 1;
    };
    CborDecoder.prototype.validate = function (value, offset, size) {
        if (offset === void 0) { offset = 0; }
        if (size === void 0) { size = value.length; }
        this.reader.reset(value);
        this.reader.x = offset;
        var start = offset;
        this.skipAny();
        var end = this.reader.x;
        if (end - start !== size)
            throw 8;
    };
    CborDecoder.prototype.decodeLevel = function (value) {
        this.reader.reset(value);
        return this.readLevel();
    };
    CborDecoder.prototype.readLevel = function () {
        var octet = this.reader.u8();
        var major = octet >> 5;
        var minor = octet & 31;
        switch (major) {
            case 4:
                return this.readArrLevel(minor);
            case 5:
                return this.readObjLevel(minor);
            default:
                return _super.prototype.readAnyRaw.call(this, octet);
        }
    };
    CborDecoder.prototype.readPrimitiveOrVal = function () {
        var octet = this.reader.peak();
        var major = octet >> 5;
        switch (major) {
            case 4:
            case 5:
                return this.readAsValue();
            default:
                return this.val();
        }
    };
    CborDecoder.prototype.readAsValue = function () {
        var reader = this.reader;
        var start = reader.x;
        this.skipAny();
        var end = reader.x;
        return new JsonPackValue_1.JsonPackValue(reader.uint8.subarray(start, end));
    };
    CborDecoder.prototype.readObjLevel = function (minor) {
        var length = this.readMinorLen(minor);
        if (length >= 0)
            return this.readObjRawLevel(length);
        else
            return this.readObjIndefLevel();
    };
    CborDecoder.prototype.readObjRawLevel = function (length) {
        var obj = {};
        for (var i = 0; i < length; i++) {
            var key = this.key();
            var value = this.readPrimitiveOrVal();
            obj[key] = value;
        }
        return obj;
    };
    CborDecoder.prototype.readObjIndefLevel = function () {
        var obj = {};
        while (this.reader.peak() !== 255) {
            var key = this.key();
            if (this.reader.peak() === 255)
                throw 7;
            var value = this.readPrimitiveOrVal();
            obj[key] = value;
        }
        this.reader.x++;
        return obj;
    };
    CborDecoder.prototype.readArrLevel = function (minor) {
        var length = this.readMinorLen(minor);
        if (length >= 0)
            return this.readArrRawLevel(length);
        return this.readArrIndefLevel();
    };
    CborDecoder.prototype.readArrRawLevel = function (length) {
        var arr = [];
        for (var i = 0; i < length; i++)
            arr.push(this.readPrimitiveOrVal());
        return arr;
    };
    CborDecoder.prototype.readArrIndefLevel = function () {
        var arr = [];
        while (this.reader.peak() !== 255)
            arr.push(this.readPrimitiveOrVal());
        this.reader.x++;
        return arr;
    };
    CborDecoder.prototype.readHdr = function (expectedMajor) {
        var octet = this.reader.u8();
        var major = octet >> 5;
        if (major !== expectedMajor)
            throw 0;
        var minor = octet & 31;
        if (minor < 24)
            return minor;
        switch (minor) {
            case 24:
                return this.reader.u8();
            case 25:
                return this.reader.u16();
            case 26:
                return this.reader.u32();
            case 27:
                return Number(this.reader.u64());
            case 31:
                return -1;
        }
        throw 1;
    };
    CborDecoder.prototype.readStrHdr = function () {
        return this.readHdr(3);
    };
    CborDecoder.prototype.readObjHdr = function () {
        return this.readHdr(5);
    };
    CborDecoder.prototype.readArrHdr = function () {
        return this.readHdr(4);
    };
    CborDecoder.prototype.findKey = function (key) {
        var size = this.readObjHdr();
        for (var i = 0; i < size; i++) {
            var k = this.key();
            if (k === key)
                return this;
            this.skipAny();
        }
        throw 9;
    };
    CborDecoder.prototype.findIndex = function (index) {
        var size = this.readArrHdr();
        if (index >= size)
            throw 10;
        for (var i = 0; i < index; i++)
            this.skipAny();
        return this;
    };
    CborDecoder.prototype.find = function (path) {
        for (var i = 0; i < path.length; i++) {
            var segment = path[i];
            if (typeof segment === 'string')
                this.findKey(segment);
            else
                this.findIndex(segment);
        }
        return this;
    };
    return CborDecoder;
}(CborDecoderBase_1.CborDecoderBase));
exports.CborDecoder = CborDecoder;
