"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CborDecoderBase = void 0;
var tslib_1 = require("tslib");
var f16_1 = require("../../util/buffers/f16");
var JsonPackExtension_1 = require("../JsonPackExtension");
var JsonPackValue_1 = require("../JsonPackValue");
var Reader_1 = require("../../util/buffers/Reader");
var sharedCachedUtf8Decoder_1 = tslib_1.__importDefault(require("../../util/buffers/utf8/sharedCachedUtf8Decoder"));
var CborDecoderBase = (function () {
    function CborDecoderBase(reader, keyDecoder) {
        if (reader === void 0) { reader = new Reader_1.Reader(); }
        if (keyDecoder === void 0) { keyDecoder = sharedCachedUtf8Decoder_1.default; }
        this.reader = reader;
        this.keyDecoder = keyDecoder;
    }
    CborDecoderBase.prototype.read = function (uint8) {
        this.reader.reset(uint8);
        return this.val();
    };
    CborDecoderBase.prototype.decode = function (uint8) {
        this.reader.reset(uint8);
        return this.val();
    };
    CborDecoderBase.prototype.val = function () {
        var reader = this.reader;
        var octet = reader.u8();
        var major = octet >> 5;
        var minor = octet & 31;
        if (major < 4) {
            if (major < 2)
                return major === 0 ? this.readUint(minor) : this.readNint(minor);
            else
                return major === 2 ? this.readBin(minor) : this.readStr(minor);
        }
        else {
            if (major < 6)
                return major === 4 ? this.readArr(minor) : this.readObj(minor);
            else
                return major === 6 ? this.readTag(minor) : this.readTkn(minor);
        }
    };
    CborDecoderBase.prototype.readAnyRaw = function (octet) {
        var major = octet >> 5;
        var minor = octet & 31;
        if (major < 4) {
            if (major < 2)
                return major === 0 ? this.readUint(minor) : this.readNint(minor);
            else
                return major === 2 ? this.readBin(minor) : this.readStr(minor);
        }
        else {
            if (major < 6)
                return major === 4 ? this.readArr(minor) : this.readObj(minor);
            else
                return major === 6 ? this.readTag(minor) : this.readTkn(minor);
        }
    };
    CborDecoderBase.prototype.readMinorLen = function (minor) {
        if (minor <= 23)
            return minor;
        switch (minor) {
            case 24:
                return this.reader.u8();
            case 25:
                return this.reader.u16();
            case 26:
                return this.reader.u32();
            case 27:
                return Number(this.reader.u64());
            case 31:
                return -1;
            default:
                throw 1;
        }
    };
    CborDecoderBase.prototype.readUint = function (minor) {
        if (minor < 25) {
            return minor === 24 ? this.reader.u8() : minor;
        }
        else {
            if (minor < 27) {
                return minor === 25 ? this.reader.u16() : this.reader.u32();
            }
            else {
                var num = this.reader.u64();
                return num > 9007199254740991 ? num : Number(num);
            }
        }
    };
    CborDecoderBase.prototype.readNint = function (minor) {
        if (minor < 25) {
            return minor === 24 ? -this.reader.u8() - 1 : -minor - 1;
        }
        else {
            if (minor < 27) {
                return minor === 25 ? -this.reader.u16() - 1 : -this.reader.u32() - 1;
            }
            else {
                var num = this.reader.u64();
                return num > 9007199254740991 - 1 ? -num - BigInt(1) : -Number(num) - 1;
            }
        }
    };
    CborDecoderBase.prototype.readBin = function (minor) {
        var reader = this.reader;
        if (minor <= 23)
            return reader.buf(minor);
        switch (minor) {
            case 24:
                return reader.buf(reader.u8());
            case 25:
                return reader.buf(reader.u16());
            case 26:
                return reader.buf(reader.u32());
            case 27:
                return reader.buf(Number(reader.u64()));
            case 31: {
                var size = 0;
                var list = [];
                while (this.reader.peak() !== 255) {
                    var uint8 = this.readBinChunk();
                    size += uint8.length;
                    list.push(uint8);
                }
                this.reader.x++;
                var res = new Uint8Array(size);
                var offset = 0;
                var length_1 = list.length;
                for (var i = 0; i < length_1; i++) {
                    var arr = list[i];
                    res.set(arr, offset);
                    offset += arr.length;
                }
                return res;
            }
            default:
                throw 1;
        }
    };
    CborDecoderBase.prototype.readBinChunk = function () {
        var octet = this.reader.u8();
        var major = octet >> 5;
        var minor = octet & 31;
        if (major !== 2)
            throw 2;
        if (minor > 27)
            throw 3;
        return this.readBin(minor);
    };
    CborDecoderBase.prototype.readStr = function (minor) {
        var reader = this.reader;
        if (minor <= 23)
            return reader.utf8(minor);
        switch (minor) {
            case 24:
                return reader.utf8(reader.u8());
            case 25:
                return reader.utf8(reader.u16());
            case 26:
                return reader.utf8(reader.u32());
            case 27:
                return reader.utf8(Number(reader.u64()));
            case 31: {
                var str = '';
                while (reader.peak() !== 255)
                    str += this.readStrChunk();
                this.reader.x++;
                return str;
            }
            default:
                throw 1;
        }
    };
    CborDecoderBase.prototype.readStrLen = function (minor) {
        if (minor <= 23)
            return minor;
        switch (minor) {
            case 24:
                return this.reader.u8();
            case 25:
                return this.reader.u16();
            case 26:
                return this.reader.u32();
            case 27:
                return Number(this.reader.u64());
            default:
                throw 1;
        }
    };
    CborDecoderBase.prototype.readStrChunk = function () {
        var octet = this.reader.u8();
        var major = octet >> 5;
        var minor = octet & 31;
        if (major !== 3)
            throw 4;
        if (minor > 27)
            throw 5;
        return this.readStr(minor);
    };
    CborDecoderBase.prototype.readArr = function (minor) {
        var length = this.readMinorLen(minor);
        if (length >= 0)
            return this.readArrRaw(length);
        return this.readArrIndef();
    };
    CborDecoderBase.prototype.readArrRaw = function (length) {
        var arr = [];
        for (var i = 0; i < length; i++)
            arr.push(this.val());
        return arr;
    };
    CborDecoderBase.prototype.readArrIndef = function () {
        var arr = [];
        while (this.reader.peak() !== 255)
            arr.push(this.val());
        this.reader.x++;
        return arr;
    };
    CborDecoderBase.prototype.readObj = function (minor) {
        if (minor < 28) {
            var length_2 = minor;
            switch (minor) {
                case 24:
                    length_2 = this.reader.u8();
                    break;
                case 25:
                    length_2 = this.reader.u16();
                    break;
                case 26:
                    length_2 = this.reader.u32();
                    break;
                case 27:
                    length_2 = Number(this.reader.u64());
                    break;
            }
            var obj = {};
            for (var i = 0; i < length_2; i++) {
                var key = this.key();
                if (key === '__proto__')
                    throw 6;
                var value = this.val();
                obj[key] = value;
            }
            return obj;
        }
        else if (minor === 31)
            return this.readObjIndef();
        else
            throw 1;
    };
    CborDecoderBase.prototype.readObjRaw = function (length) {
        var obj = {};
        for (var i = 0; i < length; i++) {
            var key = this.key();
            var value = this.val();
            obj[key] = value;
        }
        return obj;
    };
    CborDecoderBase.prototype.readObjIndef = function () {
        var obj = {};
        while (this.reader.peak() !== 255) {
            var key = this.key();
            if (this.reader.peak() === 255)
                throw 7;
            var value = this.val();
            obj[key] = value;
        }
        this.reader.x++;
        return obj;
    };
    CborDecoderBase.prototype.key = function () {
        var octet = this.reader.u8();
        var major = octet >> 5;
        var minor = octet & 31;
        if (major !== 3)
            return String(this.readAnyRaw(octet));
        var length = this.readStrLen(minor);
        if (length > 31)
            return this.reader.utf8(length);
        var key = this.keyDecoder.decode(this.reader.uint8, this.reader.x, length);
        this.reader.skip(length);
        return key;
    };
    CborDecoderBase.prototype.readTag = function (minor) {
        if (minor <= 23)
            return this.readTagRaw(minor);
        switch (minor) {
            case 24:
                return this.readTagRaw(this.reader.u8());
            case 25:
                return this.readTagRaw(this.reader.u16());
            case 26:
                return this.readTagRaw(this.reader.u32());
            case 27:
                return this.readTagRaw(Number(this.reader.u64()));
            default:
                throw 1;
        }
    };
    CborDecoderBase.prototype.readTagRaw = function (tag) {
        return new JsonPackExtension_1.JsonPackExtension(tag, this.val());
    };
    CborDecoderBase.prototype.readTkn = function (minor) {
        switch (minor) {
            case 0xf4 & 31:
                return false;
            case 0xf5 & 31:
                return true;
            case 0xf6 & 31:
                return null;
            case 0xf7 & 31:
                return undefined;
            case 0xf8 & 31:
                return new JsonPackValue_1.JsonPackValue(this.reader.u8());
            case 0xf9 & 31:
                return this.f16();
            case 0xfa & 31:
                return this.reader.f32();
            case 0xfb & 31:
                return this.reader.f64();
        }
        if (minor <= 23)
            return new JsonPackValue_1.JsonPackValue(minor);
        throw 1;
    };
    CborDecoderBase.prototype.f16 = function () {
        return (0, f16_1.decodeF16)(this.reader.u16());
    };
    return CborDecoderBase;
}());
exports.CborDecoderBase = CborDecoderBase;
