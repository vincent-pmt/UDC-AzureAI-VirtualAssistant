"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CborEncoder = void 0;
var tslib_1 = require("tslib");
var isFloat32_1 = require("../../util/buffers/isFloat32");
var JsonPackExtension_1 = require("../JsonPackExtension");
var CborEncoderFast_1 = require("./CborEncoderFast");
var isSafeInteger = Number.isSafeInteger;
var CborEncoder = (function (_super) {
    tslib_1.__extends(CborEncoder, _super);
    function CborEncoder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CborEncoder.prototype.writeUnknown = function (value) {
        this.writeNull();
    };
    CborEncoder.prototype.writeAny = function (value) {
        switch (typeof value) {
            case 'number':
                return this.writeNumber(value);
            case 'string':
                return this.writeStr(value);
            case 'boolean':
                return this.writer.u8(0xf4 + +value);
            case 'object': {
                if (!value)
                    return this.writer.u8(0xf6);
                var constructor = value.constructor;
                switch (constructor) {
                    case Object:
                        return this.writeObj(value);
                    case Array:
                        return this.writeArr(value);
                    case Uint8Array:
                        return this.writeBin(value);
                    case Map:
                        return this.writeMap(value);
                    case JsonPackExtension_1.JsonPackExtension:
                        return this.writeTag(value.tag, value.val);
                    default:
                        return this.writeUnknown(value);
                }
            }
            case 'undefined':
                return this.writeUndef();
            case 'bigint':
                return this.writeBigInt(value);
            default:
                return this.writeUnknown(value);
        }
    };
    CborEncoder.prototype.writeNumber = function (num) {
        if (isSafeInteger(num))
            this.writeInteger(num);
        else if (typeof num === 'bigint')
            this.writeBigInt(num);
        else
            this.writeFloat(num);
    };
    CborEncoder.prototype.writeBigInt = function (int) {
        if (int >= 0)
            this.writeBigUint(int);
        else
            this.writeBigSint(int);
    };
    CborEncoder.prototype.writeBigUint = function (uint) {
        if (uint <= Number.MAX_SAFE_INTEGER)
            return this.writeUInteger(Number(uint));
        this.writer.u8u64(0x1b, uint);
    };
    CborEncoder.prototype.writeBigSint = function (int) {
        if (int >= Number.MIN_SAFE_INTEGER)
            return this.encodeNint(Number(int));
        var uint = -BigInt(1) - int;
        this.writer.u8u64(0x3b, uint);
    };
    CborEncoder.prototype.writeFloat = function (float) {
        if ((0, isFloat32_1.isFloat32)(float))
            this.writer.u8f32(0xfa, float);
        else
            this.writer.u8f64(0xfb, float);
    };
    CborEncoder.prototype.writeMap = function (map) {
        var _this = this;
        this.writeMapHdr(map.size);
        map.forEach(function (value, key) {
            _this.writeAny(key);
            _this.writeAny(value);
        });
    };
    CborEncoder.prototype.writeUndef = function () {
        this.writer.u8(0xf7);
    };
    return CborEncoder;
}(CborEncoderFast_1.CborEncoderFast));
exports.CborEncoder = CborEncoder;
