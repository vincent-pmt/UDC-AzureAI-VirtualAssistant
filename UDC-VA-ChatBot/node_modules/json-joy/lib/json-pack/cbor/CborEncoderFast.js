"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CborEncoderFast = void 0;
var Writer_1 = require("../../util/buffers/Writer");
var CborEncoderFast = (function () {
    function CborEncoderFast(writer) {
        if (writer === void 0) { writer = new Writer_1.Writer(); }
        this.writer = writer;
    }
    CborEncoderFast.prototype.encode = function (value) {
        this.writeAny(value);
        return this.writer.flush();
    };
    CborEncoderFast.prototype.encodeToSlice = function (value) {
        this.writeAny(value);
        return this.writer.flushSlice();
    };
    CborEncoderFast.prototype.writeAny = function (value) {
        switch (typeof value) {
            case 'number':
                return this.writeNumber(value);
            case 'string':
                return this.writeStr(value);
            case 'boolean':
                return this.writer.u8(0xf4 + +value);
            case 'object': {
                if (!value)
                    return this.writer.u8(0xf6);
                var constructor = value.constructor;
                switch (constructor) {
                    case Array:
                        return this.writeArr(value);
                    default:
                        return this.writeObj(value);
                }
            }
        }
    };
    CborEncoderFast.prototype.writeCbor = function () {
        this.writer.u8u16(0xd9, 0xd9f7);
    };
    CborEncoderFast.prototype.writeEnd = function () {
        this.writer.u8(255);
    };
    CborEncoderFast.prototype.writeNull = function () {
        this.writer.u8(0xf6);
    };
    CborEncoderFast.prototype.writeBoolean = function (bool) {
        if (bool)
            this.writer.u8(0xf5);
        else
            this.writer.u8(0xf4);
    };
    CborEncoderFast.prototype.writeNumber = function (num) {
        if (num >>> 0 === num)
            return this.writeUInteger(num);
        if (num >> 0 === num)
            return this.encodeNint(num);
        this.writeFloat(num);
    };
    CborEncoderFast.prototype.writeInteger = function (int) {
        if (int >= 0)
            this.writeUInteger(int);
        else
            this.encodeNint(int);
    };
    CborEncoderFast.prototype.writeUInteger = function (uint) {
        var writer = this.writer;
        writer.ensureCapacity(9);
        var uint8 = writer.uint8;
        if (uint <= 23) {
            uint8[writer.x++] = 0 + uint;
        }
        else if (uint <= 0xff) {
            uint8[writer.x++] = 0x18;
            uint8[writer.x++] = uint;
        }
        else if (uint <= 0xffff) {
            uint8[writer.x++] = 0x19;
            writer.view.setUint16(writer.x, uint);
            writer.x += 2;
        }
        else if (uint <= 0xffffffff) {
            uint8[writer.x++] = 0x1a;
            writer.view.setUint32(writer.x, uint);
            writer.x += 4;
        }
        else {
            uint8[writer.x++] = 0x1b;
            writer.view.setBigUint64(writer.x, BigInt(uint));
            writer.x += 8;
        }
    };
    CborEncoderFast.prototype.encodeNumber = function (num) {
        this.writeNumber(num);
    };
    CborEncoderFast.prototype.encodeInteger = function (int) {
        this.writeInteger(int);
    };
    CborEncoderFast.prototype.encodeUint = function (uint) {
        this.writeUInteger(uint);
    };
    CborEncoderFast.prototype.encodeNint = function (int) {
        var uint = -1 - int;
        var writer = this.writer;
        writer.ensureCapacity(9);
        var uint8 = writer.uint8;
        if (uint < 24) {
            uint8[writer.x++] = 32 + uint;
        }
        else if (uint <= 0xff) {
            uint8[writer.x++] = 0x38;
            uint8[writer.x++] = uint;
        }
        else if (uint <= 0xffff) {
            uint8[writer.x++] = 0x39;
            writer.view.setUint16(writer.x, uint);
            writer.x += 2;
        }
        else if (uint <= 0xffffffff) {
            uint8[writer.x++] = 0x3a;
            writer.view.setUint32(writer.x, uint);
            writer.x += 4;
        }
        else {
            uint8[writer.x++] = 0x3b;
            writer.view.setBigUint64(writer.x, BigInt(uint));
            writer.x += 8;
        }
    };
    CborEncoderFast.prototype.writeFloat = function (float) {
        this.writer.u8f64(0xfb, float);
    };
    CborEncoderFast.prototype.writeBin = function (buf) {
        var length = buf.length;
        this.writeBinHdr(length);
        this.writer.buf(buf, length);
    };
    CborEncoderFast.prototype.writeBinHdr = function (length) {
        if (length <= 23)
            this.writer.u8(64 + length);
        else if (length <= 0xff)
            this.writer.u16((0x58 << 8) + length);
        else if (length <= 0xffff)
            this.writer.u8u16(0x59, length);
        else if (length <= 0xffffffff)
            this.writer.u8u32(0x5a, length);
        else
            this.writer.u8u64(0x5b, length);
    };
    CborEncoderFast.prototype.writeStartBin = function () {
        this.writer.u8(0x5f);
    };
    CborEncoderFast.prototype.writeStr = function (str) {
        var writer = this.writer;
        var length = str.length;
        var maxSize = length * 4;
        writer.ensureCapacity(5 + maxSize);
        var uint8 = writer.uint8;
        var lengthOffset = writer.x;
        if (maxSize <= 23)
            writer.x++;
        else if (maxSize <= 0xff) {
            uint8[writer.x++] = 0x78;
            lengthOffset = writer.x;
            writer.x++;
        }
        else if (maxSize <= 0xffff) {
            uint8[writer.x++] = 0x79;
            lengthOffset = writer.x;
            writer.x += 2;
        }
        else {
            uint8[writer.x++] = 0x7a;
            lengthOffset = writer.x;
            writer.x += 4;
        }
        var bytesWritten = writer.utf8(str);
        if (maxSize <= 23)
            uint8[lengthOffset] = 96 + bytesWritten;
        else if (maxSize <= 0xff)
            uint8[lengthOffset] = bytesWritten;
        else if (maxSize <= 0xffff)
            writer.view.setUint16(lengthOffset, bytesWritten);
        else
            writer.view.setUint32(lengthOffset, bytesWritten);
    };
    CborEncoderFast.prototype.writeStrHdr = function (length) {
        if (length <= 23)
            this.writer.u8(96 + length);
        else if (length <= 0xff)
            this.writer.u16((0x78 << 8) + length);
        else if (length <= 0xffff)
            this.writer.u8u16(0x79, length);
        else
            this.writer.u8u32(0x7a, length);
    };
    CborEncoderFast.prototype.writeAsciiStr = function (str) {
        this.writeStrHdr(str.length);
        this.writer.ascii(str);
    };
    CborEncoderFast.prototype.writeStartStr = function () {
        this.writer.u8(0x7f);
    };
    CborEncoderFast.prototype.writeArr = function (arr) {
        var length = arr.length;
        this.writeArrHdr(length);
        for (var i = 0; i < length; i++)
            this.writeAny(arr[i]);
    };
    CborEncoderFast.prototype.writeArrHdr = function (length) {
        if (length <= 23)
            this.writer.u8(128 + length);
        else if (length <= 0xff)
            this.writer.u16((0x98 << 8) + length);
        else if (length <= 0xffff)
            this.writer.u8u16(0x99, length);
        else if (length <= 0xffffffff)
            this.writer.u8u32(0x9a, length);
        else
            this.writer.u8u64(0x9b, length);
    };
    CborEncoderFast.prototype.writeStartArr = function () {
        this.writer.u8(0x9f);
    };
    CborEncoderFast.prototype.writeEndArr = function () {
        this.writer.u8(255);
    };
    CborEncoderFast.prototype.writeObj = function (obj) {
        var keys = Object.keys(obj);
        var length = keys.length;
        this.writeObjHdr(length);
        for (var i = 0; i < length; i++) {
            var key = keys[i];
            this.writeStr(key);
            this.writeAny(obj[key]);
        }
    };
    CborEncoderFast.prototype.writeObjHdr = function (length) {
        if (length <= 23)
            this.writer.u8(160 + length);
        else if (length <= 0xff)
            this.writer.u16((0xb8 << 8) + length);
        else if (length <= 0xffff)
            this.writer.u8u16(0xb9, length);
        else if (length <= 0xffffffff)
            this.writer.u8u32(0xba, length);
        else
            this.writer.u8u64(0xbb, length);
    };
    CborEncoderFast.prototype.writeMapHdr = function (length) {
        this.writeObjHdr(length);
    };
    CborEncoderFast.prototype.writeStartMap = function () {
        this.writer.u8(0xbf);
    };
    CborEncoderFast.prototype.writeStartObj = function () {
        this.writer.u8(0xbf);
    };
    CborEncoderFast.prototype.writeEndObj = function () {
        this.writer.u8(255);
    };
    CborEncoderFast.prototype.writeTag = function (tag, value) {
        this.writeTagHdr(tag);
        this.writeAny(value);
    };
    CborEncoderFast.prototype.writeTagHdr = function (tag) {
        if (tag <= 23)
            this.writer.u8(192 + tag);
        else if (tag <= 0xff)
            this.writer.u16((0xd8 << 8) + tag);
        else if (tag <= 0xffff)
            this.writer.u8u16(0xd9, tag);
        else if (tag <= 0xffffffff)
            this.writer.u8u32(0xda, tag);
        else
            this.writer.u8u64(0xdb, tag);
    };
    CborEncoderFast.prototype.writeTkn = function (value) {
        if (value <= 23)
            this.writer.u8(224 + value);
        else if (value <= 0xff)
            this.writer.u16((0xf8 << 8) + value);
    };
    return CborEncoderFast;
}());
exports.CborEncoderFast = CborEncoderFast;
