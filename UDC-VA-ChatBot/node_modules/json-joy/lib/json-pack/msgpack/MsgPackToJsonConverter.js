"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgPackToJsonConverter = void 0;
var asString_1 = require("../../util/strings/asString");
var toDataUri_1 = require("../../util/buffers/toDataUri");
var MsgPackToJsonConverter = (function () {
    function MsgPackToJsonConverter() {
        this.uint8 = new Uint8Array([]);
        this.view = new DataView(this.uint8.buffer);
        this.x = 0;
    }
    MsgPackToJsonConverter.prototype.reset = function (uint8) {
        this.x = 0;
        this.uint8 = uint8;
        this.view = new DataView(uint8.buffer, uint8.byteOffset, uint8.length);
    };
    MsgPackToJsonConverter.prototype.convert = function (uint8) {
        this.reset(uint8);
        return this.val();
    };
    MsgPackToJsonConverter.prototype.val = function () {
        var byte = this.u8();
        if (byte >= 0xe0)
            return (byte - 0x100).toString();
        if (byte <= 0xbf) {
            if (byte < 0x90) {
                if (byte <= 127)
                    return byte.toString();
                return this.obj(byte & 15);
            }
            else {
                if (byte < 0xa0)
                    return this.arr(byte & 15);
                else
                    return this.str(byte & 31);
            }
        }
        if (byte <= 0xd0) {
            if (byte <= 0xc8) {
                if (byte <= 0xc4) {
                    if (byte <= 0xc2)
                        return byte === 0xc2 ? 'false' : 'null';
                    else
                        return byte === 0xc4 ? this.bin(this.u8()) : 'true';
                }
                else {
                    if (byte <= 0xc6)
                        return byte === 0xc6 ? this.bin(this.u32()) : this.bin(this.u16());
                    else
                        return byte === 0xc8 ? this.ext(this.u16()) : this.ext(this.u8());
                }
            }
            else {
                return byte <= 0xcc
                    ? byte <= 0xca
                        ? byte === 0xca
                            ? this.f32().toString()
                            : this.ext(this.u32())
                        : byte === 0xcc
                            ? this.u8().toString()
                            : this.f64().toString()
                    : byte <= 0xce
                        ? byte === 0xce
                            ? this.u32().toString()
                            : this.u16().toString()
                        : byte === 0xd0
                            ? this.i8().toString()
                            : (this.u32() * 4294967296 + this.u32()).toString();
            }
        }
        else if (byte <= 0xd8) {
            return byte <= 0xd4
                ? byte <= 0xd2
                    ? byte === 0xd2
                        ? this.i32().toString()
                        : this.i16().toString()
                    : byte === 0xd4
                        ? this.ext(1)
                        : (this.i32() * 4294967296 + this.i32()).toString()
                : byte <= 0xd6
                    ? byte === 0xd6
                        ? this.ext(4)
                        : this.ext(2)
                    : byte === 0xd8
                        ? this.ext(16)
                        : this.ext(8);
        }
        else {
            switch (byte) {
                case 0xd9:
                    return this.str(this.u8());
                case 0xda:
                    return this.str(this.u16());
                case 0xdb:
                    return this.str(this.u32());
                case 0xdc:
                    return this.arr(this.u16());
                case 0xdd:
                    return this.arr(this.u32());
                case 0xde:
                    return this.obj(this.u16());
                case 0xdf:
                    return this.obj(this.u32());
            }
        }
        return '';
    };
    MsgPackToJsonConverter.prototype.str = function (size) {
        var uint8 = this.uint8;
        var end = this.x + size;
        var x = this.x;
        var str = '';
        while (x < end) {
            var b1 = uint8[x++];
            if ((b1 & 0x80) === 0) {
                str += String.fromCharCode(b1);
                continue;
            }
            else if ((b1 & 0xe0) === 0xc0) {
                str += String.fromCharCode(((b1 & 0x1f) << 6) | (uint8[x++] & 0x3f));
            }
            else if ((b1 & 0xf0) === 0xe0) {
                str += String.fromCharCode(((b1 & 0x1f) << 12) | ((uint8[x++] & 0x3f) << 6) | (uint8[x++] & 0x3f));
            }
            else if ((b1 & 0xf8) === 0xf0) {
                var b2 = uint8[x++] & 0x3f;
                var b3 = uint8[x++] & 0x3f;
                var b4 = uint8[x++] & 0x3f;
                var code = ((b1 & 0x07) << 0x12) | (b2 << 0x0c) | (b3 << 0x06) | b4;
                if (code > 0xffff) {
                    code -= 0x10000;
                    str += String.fromCharCode(((code >>> 10) & 0x3ff) | 0xd800);
                    code = 0xdc00 | (code & 0x3ff);
                }
                str += String.fromCharCode(code);
            }
            else {
                str += String.fromCharCode(b1);
            }
        }
        this.x = end;
        return (0, asString_1.asString)(str);
    };
    MsgPackToJsonConverter.prototype.obj = function (size) {
        var str = '{';
        for (var i = 0; i < size; i++) {
            if (i > 0)
                str += ',';
            str += this.key();
            str += ':';
            str += this.val();
        }
        return (str + '}');
    };
    MsgPackToJsonConverter.prototype.key = function () {
        return this.val();
    };
    MsgPackToJsonConverter.prototype.arr = function (size) {
        var str = '[';
        for (var i = 0; i < size; i++) {
            if (i > 0)
                str += ',';
            str += this.val();
        }
        return (str + ']');
    };
    MsgPackToJsonConverter.prototype.bin = function (size) {
        var end = this.x + size;
        var buf = this.uint8.subarray(this.x, end);
        this.x = end;
        return '"' + (0, toDataUri_1.toDataUri)(buf) + '"';
    };
    MsgPackToJsonConverter.prototype.ext = function (size) {
        var ext = this.u8();
        var end = this.x + size;
        var buf = this.uint8.subarray(this.x, end);
        this.x = end;
        return '"' + (0, toDataUri_1.toDataUri)(buf, { ext: ext }) + '"';
    };
    MsgPackToJsonConverter.prototype.u8 = function () {
        return this.view.getUint8(this.x++);
    };
    MsgPackToJsonConverter.prototype.u16 = function () {
        var num = this.view.getUint16(this.x);
        this.x += 2;
        return num;
    };
    MsgPackToJsonConverter.prototype.u32 = function () {
        var num = this.view.getUint32(this.x);
        this.x += 4;
        return num;
    };
    MsgPackToJsonConverter.prototype.i8 = function () {
        return this.view.getInt8(this.x++);
    };
    MsgPackToJsonConverter.prototype.i16 = function () {
        var num = this.view.getInt16(this.x);
        this.x += 2;
        return num;
    };
    MsgPackToJsonConverter.prototype.i32 = function () {
        var num = this.view.getInt32(this.x);
        this.x += 4;
        return num;
    };
    MsgPackToJsonConverter.prototype.f32 = function () {
        var pos = this.x;
        this.x += 4;
        return this.view.getFloat32(pos);
    };
    MsgPackToJsonConverter.prototype.f64 = function () {
        var pos = this.x;
        this.x += 8;
        return this.view.getFloat64(pos);
    };
    return MsgPackToJsonConverter;
}());
exports.MsgPackToJsonConverter = MsgPackToJsonConverter;
