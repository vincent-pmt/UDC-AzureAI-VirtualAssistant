"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UbjsonEncoder = void 0;
var UbjsonEncoder = (function () {
    function UbjsonEncoder(writer) {
        this.writer = writer;
    }
    UbjsonEncoder.prototype.encode = function (value) {
        var writer = this.writer;
        writer.reset();
        this.writeAny(value);
        return writer.flush();
    };
    UbjsonEncoder.prototype.writeAny = function (value) {
        switch (typeof value) {
            case 'boolean':
                return this.writeBoolean(value);
            case 'number':
                return this.writeNumber(value);
            case 'string':
                return this.writeStr(value);
            case 'object': {
                if (value === null)
                    return this.writeNull();
                var constructor = value.constructor;
                switch (constructor) {
                    case Array:
                        return this.writeArr(value);
                    case Uint8Array:
                        return this.writeBin(value);
                    default:
                        return this.writeObj(value);
                }
            }
            case 'bigint':
                return this.writeBigInt(value);
            case 'undefined':
                return this.writeUndef();
            default:
                return this.writeNull();
        }
    };
    UbjsonEncoder.prototype.writeNull = function () {
        this.writer.u8(0x5a);
    };
    UbjsonEncoder.prototype.writeUndef = function () {
        this.writer.u8(0x4e);
    };
    UbjsonEncoder.prototype.writeBoolean = function (bool) {
        this.writer.u8(bool ? 0x54 : 0x46);
    };
    UbjsonEncoder.prototype.writeNumber = function (num) {
        if (num >> 0 === num)
            return this.writeInteger(num);
        this.writeFloat(num);
    };
    UbjsonEncoder.prototype.writeInteger = function (int) {
        var writer = this.writer;
        if (int <= 0xff && 0 <= int)
            writer.u16(0x5500 | int);
        else if (int <= 127 && -128 <= int) {
            writer.u16(0x6900);
            writer.view.setInt8(writer.x - 1, int);
        }
        else if (int <= 32767 && -32768 <= int) {
            writer.ensureCapacity(3);
            writer.u8(0x49);
            writer.view.setInt16(writer.x, int, false);
            writer.x += 2;
        }
        else if (int <= 2147483647 && -2147483648 <= int) {
            writer.ensureCapacity(5);
            writer.u8(0x6c);
            writer.view.setInt32(writer.x, int, false);
            writer.x += 4;
        }
    };
    UbjsonEncoder.prototype.writeUInteger = function (uint) {
        var writer = this.writer;
        if (uint < 0xff)
            writer.u16(0x5500 + uint);
    };
    UbjsonEncoder.prototype.writeFloat = function (float) {
        var writer = this.writer;
        writer.ensureCapacity(9);
        var view = writer.view;
        var x = writer.x;
        view.setUint8(x, 0x44);
        view.setFloat64(x + 1, float, false);
        writer.x = x + 9;
    };
    UbjsonEncoder.prototype.writeBigInt = function (int) {
        var writer = this.writer;
        writer.ensureCapacity(9);
        var view = writer.view;
        var x = writer.x;
        view.setUint8(x, 0x4c);
        view.setBigInt64(x + 1, int, false);
        writer.x = x + 9;
    };
    UbjsonEncoder.prototype.writeBin = function (buf) {
        var writer = this.writer;
        var length = buf.length;
        writer.u32(1529107747);
        this.writeInteger(length);
        writer.buf(buf, length);
    };
    UbjsonEncoder.prototype.writeStr = function (str) {
        var length = str.length;
        var maxLength = length * 4;
        var capacity = maxLength + 1 + 5;
        var writer = this.writer;
        writer.ensureCapacity(capacity);
        var uint8 = writer.uint8;
        uint8[writer.x++] = 0x53;
        var x = writer.x;
        var oneByteLength = maxLength < 0xff;
        if (oneByteLength) {
            uint8[writer.x++] = 0x55;
            writer.x++;
        }
        else {
            uint8[writer.x++] = 0x6c;
            writer.x += 4;
        }
        var size = writer.utf8(str);
        if (oneByteLength)
            uint8[x + 1] = size;
        else
            writer.view.setUint32(x + 1, size);
    };
    UbjsonEncoder.prototype.writeAsciiStr = function (str) {
        this.writeStr(str);
    };
    UbjsonEncoder.prototype.writeArr = function (arr) {
        var writer = this.writer;
        writer.u8(0x5b);
        var length = arr.length;
        for (var i = 0; i < length; i++)
            this.writeAny(arr[i]);
        writer.u8(0x5d);
    };
    UbjsonEncoder.prototype.writeStartArr = function () {
        this.writer.u8(0x5b);
    };
    UbjsonEncoder.prototype.writeEndArr = function () {
        this.writer.u8(0x5d);
    };
    UbjsonEncoder.prototype.writeObj = function (obj) {
        var writer = this.writer;
        var keys = Object.keys(obj);
        var length = keys.length;
        writer.u8(0x7b);
        for (var i = 0; i < length; i++) {
            var key = keys[i];
            var value = obj[key];
            this.writeKey(key);
            this.writeAny(value);
        }
        writer.u8(0x7d);
    };
    UbjsonEncoder.prototype.writeKey = function (str) {
        var length = str.length;
        var maxLength = length * 4;
        var capacity = maxLength + 5;
        var writer = this.writer;
        writer.ensureCapacity(capacity);
        var uint8 = writer.uint8;
        var x = writer.x;
        var oneByteLength = maxLength < 0xff;
        if (oneByteLength) {
            uint8[writer.x++] = 0x55;
            writer.x++;
        }
        else {
            uint8[writer.x++] = 0x6c;
            writer.x += 4;
        }
        var size = writer.utf8(str);
        if (oneByteLength)
            uint8[x + 1] = size;
        else
            writer.view.setUint32(x + 1, size);
    };
    UbjsonEncoder.prototype.writeStartObj = function () {
        this.writer.u8(0x7b);
    };
    UbjsonEncoder.prototype.writeEndObj = function () {
        this.writer.u8(0x7d);
    };
    return UbjsonEncoder;
}());
exports.UbjsonEncoder = UbjsonEncoder;
