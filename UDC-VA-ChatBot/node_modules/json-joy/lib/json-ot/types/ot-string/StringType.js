"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transform = exports.compose = exports.apply = exports.normalize = exports.append = exports.validate = void 0;
var validate = function (op) {
    if (!(op instanceof Array))
        return 1;
    if (op.length === 0)
        return 1;
    var last;
    for (var i = 0; i < op.length; i++) {
        var component = op[i];
        switch (typeof component) {
            case 'number': {
                if (!component)
                    return 2;
                if (component !== Math.round(component))
                    return 2;
                if (component > 0) {
                    var lastComponentIsRetain = typeof last === 'number' && last > 0;
                    if (lastComponentIsRetain)
                        return 3;
                }
                else {
                    var lastComponentIsDelete = typeof last === 'number' && last < 0;
                    if (lastComponentIsDelete)
                        return 3;
                }
                break;
            }
            case 'string': {
                if (!component.length)
                    return 2;
                var lastComponentIsInsert = typeof last === 'string';
                if (lastComponentIsInsert)
                    return 3;
                break;
            }
            case 'object': {
                if (!(component instanceof Array))
                    return 2;
                if (component.length !== 1)
                    return 2;
                var lastComponentIsRetainedDelete = last instanceof Array;
                if (lastComponentIsRetainedDelete)
                    return 3;
                break;
            }
            default:
                return 2;
        }
        last = component;
    }
    var isLastRetain = typeof last === 'number' && last > 0;
    if (isLastRetain)
        return 4;
    return 0;
};
exports.validate = validate;
var append = function (op, component) {
    if (!component)
        return;
    if (!op.length) {
        op.push(component);
        return;
    }
    var lastIndex = op.length - 1;
    var last = op[lastIndex];
    switch (typeof component) {
        case 'number': {
            if (typeof last === 'number') {
                if (component > 0 && last > 0)
                    op[lastIndex] = last + component;
                else if (component < 0 && last < 0)
                    op[lastIndex] = last + component;
                else
                    op.push(component);
            }
            else
                op.push(component);
            break;
        }
        case 'string': {
            if (typeof last === 'string')
                op[lastIndex] = last + component;
            else
                op.push(component);
            break;
        }
        case 'object': {
            if (last instanceof Array)
                last[0] = last + component[0];
            else
                op.push(component);
            break;
        }
    }
};
exports.append = append;
var componentLength = function (component) {
    switch (typeof component) {
        case 'number':
            return Math.abs(component);
        case 'string':
            return component.length;
        default:
            return component[0].length;
    }
};
var idDeleteComponent = function (component) {
    switch (typeof component) {
        case 'number':
            return component < 0;
        case 'object':
            return true;
        default:
            return false;
    }
};
var trim = function (op) {
    if (!op.length)
        return;
    var last = op[op.length - 1];
    var isLastRetain = typeof last === 'number' && last > 0;
    if (isLastRetain)
        op.pop();
};
var normalize = function (op) {
    var op2 = [];
    var length = op.length;
    for (var i = 0; i < length; i++)
        (0, exports.append)(op2, op[i]);
    trim(op2);
    return op2;
};
exports.normalize = normalize;
var apply = function (str, op) {
    var length = op.length;
    var res = '';
    var offset = 0;
    for (var i = 0; i < length; i++) {
        var component = op[i];
        switch (typeof component) {
            case 'number': {
                if (component > 0) {
                    var end = offset + component;
                    res += str.substring(offset, end);
                    offset = end;
                }
                else
                    offset -= component;
                break;
            }
            case 'string':
                res += component;
                break;
            case 'object':
                offset += component[0].length;
                break;
        }
    }
    return res + str.substring(offset);
};
exports.apply = apply;
var chunk = function (component, offset, maxLength) {
    switch (typeof component) {
        case 'number': {
            return component > 0 ? Math.min(component - offset, maxLength) : -Math.min(-component - offset, maxLength);
        }
        case 'string': {
            var end = Math.min(offset + maxLength, component.length);
            return component.substring(offset, end);
        }
        case 'object': {
            var str = component[0];
            var end = Math.min(offset + maxLength, str.length);
            return [str.substring(offset, end)];
        }
    }
};
var compose = function (op1, op2) {
    var op3 = [];
    var len1 = op1.length;
    var len2 = op2.length;
    var off1 = 0;
    var i1 = 0;
    for (var i2 = 0; i2 < len2; i2++) {
        var comp2 = op2[i2];
        var doDelete = false;
        switch (typeof comp2) {
            case 'number': {
                if (comp2 > 0) {
                    var length2 = comp2;
                    while (length2 > 0) {
                        var comp1 = op1[i1];
                        var comp = i1 >= len1 ? length2 : chunk(comp1, off1, length2);
                        var compLength = componentLength(comp);
                        var isDelete = idDeleteComponent(comp);
                        var length1 = componentLength(comp1 || comp);
                        (0, exports.append)(op3, comp);
                        off1 += compLength;
                        if (off1 >= length1) {
                            i1++;
                            off1 = 0;
                        }
                        if (!isDelete)
                            length2 -= compLength;
                    }
                }
                else
                    doDelete = true;
                break;
            }
            case 'string': {
                (0, exports.append)(op3, comp2);
                break;
            }
            case 'object': {
                doDelete = true;
                break;
            }
        }
        if (doDelete) {
            var isReversible = comp2 instanceof Array;
            var length2 = isReversible ? comp2[0].length : -comp2;
            var off2 = 0;
            while (off2 < length2) {
                var remaining = length2 - off2;
                var comp1 = op1[i1];
                var comp = i1 >= len1 ? remaining : chunk(comp1, off1, remaining);
                var compLength = componentLength(comp);
                var isDelete = idDeleteComponent(comp);
                var length1 = componentLength(comp1 || comp);
                if (isDelete)
                    (0, exports.append)(op3, comp);
                else if (typeof comp === 'number')
                    (0, exports.append)(op3, isReversible ? [comp2[0].substring(off2, off2 + compLength)] : -compLength);
                off1 += compLength;
                if (off1 >= length1) {
                    i1++;
                    off1 = 0;
                }
                if (!isDelete)
                    off2 += compLength;
            }
        }
    }
    if (i1 < len1 && off1)
        (0, exports.append)(op3, chunk(op1[i1++], off1, Infinity));
    for (; i1 < len1; i1++)
        (0, exports.append)(op3, op1[i1]);
    trim(op3);
    return op3;
};
exports.compose = compose;
var transform = function (op1, op2, leftInsertFirst) {
    var op3 = [];
    var len1 = op1.length;
    var len2 = op2.length;
    var i1 = 0;
    var i2 = 0;
    var off1 = 0;
    for (; i2 < len2; i2++) {
        var comp2 = op2[i2];
        var doDelete = false;
        switch (typeof comp2) {
            case 'number': {
                if (comp2 > 0) {
                    var length2 = comp2;
                    while (length2 > 0) {
                        var comp1 = op1[i1];
                        var comp = i1 >= len1 ? length2 : chunk(comp1, off1, length2);
                        var compLength = componentLength(comp);
                        var length1 = componentLength(comp1 || comp);
                        (0, exports.append)(op3, comp);
                        off1 += compLength;
                        if (off1 >= length1) {
                            i1++;
                            off1 = 0;
                        }
                        if (typeof comp !== 'string')
                            length2 -= compLength;
                    }
                }
                else
                    doDelete = true;
                break;
            }
            case 'string': {
                if (leftInsertFirst) {
                    if (typeof op1[i1] === 'string') {
                        var comp = chunk(op1[i1++], off1, Infinity);
                        off1 = 0;
                        (0, exports.append)(op3, comp);
                    }
                }
                (0, exports.append)(op3, comp2.length);
                break;
            }
            case 'object': {
                doDelete = true;
                break;
            }
        }
        if (doDelete) {
            var isReversible = comp2 instanceof Array;
            var length2 = isReversible ? comp2[0].length : -comp2;
            var off2 = 0;
            while (off2 < length2) {
                var remaining = length2 - off2;
                var comp1 = op1[i1];
                var comp = i1 >= len1 ? remaining : chunk(comp1, off1, remaining);
                var compLength = componentLength(comp);
                var length1 = componentLength(comp1 || comp);
                if (typeof comp === 'string')
                    (0, exports.append)(op3, comp);
                else
                    off2 += compLength;
                off1 += compLength;
                if (off1 >= length1) {
                    i1++;
                    off1 = 0;
                }
            }
        }
    }
    if (i1 < len1 && off1)
        (0, exports.append)(op3, chunk(op1[i1++], off1, Infinity));
    for (; i1 < len1; i1++)
        (0, exports.append)(op3, op1[i1]);
    trim(op3);
    return op3;
};
exports.transform = transform;
