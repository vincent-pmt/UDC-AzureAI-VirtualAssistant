"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Decoder = void 0;
var tslib_1 = require("tslib");
var CrdtDecoder_1 = require("../../util/binary/CrdtDecoder");
var clock_1 = require("../../clock");
var PatchBuilder_1 = require("../../PatchBuilder");
var msgpack_1 = require("../../../json-pack/msgpack");
var Decoder = (function (_super) {
    tslib_1.__extends(Decoder, _super);
    function Decoder() {
        return _super.call(this, new CrdtDecoder_1.CrdtDecoder()) || this;
    }
    Decoder.prototype.decode = function (data) {
        this.reader.reset(data);
        var _a = tslib_1.__read(this.reader.b1vu56(), 2), isServerClock = _a[0], x = _a[1];
        var clock = isServerClock ? new clock_1.ServerVectorClock(1, x) : new clock_1.VectorClock(x, this.reader.vu57());
        this.patchId = (0, clock_1.ts)(clock.sid, clock.time);
        this.builder = new PatchBuilder_1.PatchBuilder(clock);
        this.decodeOperations();
        return this.builder.patch;
    };
    Decoder.prototype.decodeId = function () {
        var _a = tslib_1.__read(this.reader.b1vu56(), 2), isServerClock = _a[0], x = _a[1];
        if (isServerClock) {
            return (0, clock_1.ts)(1, x);
        }
        else {
            var patchId = this.patchId;
            if (x === 1) {
                var delta = this.reader.vu57();
                return (0, clock_1.ts)(patchId.sid, patchId.time + delta);
            }
            else {
                var time = this.reader.vu57();
                return (0, clock_1.ts)(x, time);
            }
        }
    };
    Decoder.prototype.decodeTss = function () {
        var id = this.decodeId();
        var span = this.reader.vu57();
        return (0, clock_1.interval)(id, 0, span);
    };
    Decoder.prototype.decodeOperations = function () {
        while (this.reader.x < this.reader.uint8.length)
            this.decodeOperation();
    };
    Decoder.prototype.decodeOperation = function () {
        var reader = this.reader;
        var opcode = reader.u8();
        switch (opcode) {
            case 3: {
                this.builder.obj();
                return;
            }
            case 5: {
                this.builder.arr();
                return;
            }
            case 4: {
                this.builder.str();
                return;
            }
            case 2: {
                this.builder.val(this.decodeId());
                return;
            }
            case 1: {
                var val = this.val();
                this.builder.const(val);
                return;
            }
            case 0: {
                this.builder.const(undefined);
                return;
            }
            case 11: {
                var object = this.decodeId();
                var fields = reader.vu57();
                var tuples = [];
                for (var i = 0; i < fields; i++) {
                    var value = this.decodeId();
                    var key = this.val();
                    if (typeof key !== 'string' && typeof key !== 'number')
                        continue;
                    tuples.push([key, value]);
                }
                this.builder.setKeys(object, tuples);
                return;
            }
            case 12: {
                var obj = this.decodeId();
                var val = this.decodeId();
                this.builder.setVal(obj, val);
                return;
            }
            case 9: {
                var obj = this.decodeId();
                var after = this.decodeId();
                var str = this.val();
                if (typeof str !== 'string')
                    return;
                this.builder.insStr(obj, after, str);
                return;
            }
            case 13: {
                var arr = this.decodeId();
                var after = this.decodeId();
                var length_1 = reader.vu57();
                var elements = [];
                for (var i = 0; i < length_1; i++)
                    elements.push(this.decodeId());
                this.builder.insArr(arr, after, elements);
                return;
            }
            case 10: {
                var obj = this.decodeId();
                var length_2 = reader.vu57();
                var what = [];
                for (var i = 0; i < length_2; i++)
                    what.push(this.decodeTss());
                this.builder.del(obj, what);
                return;
            }
            case 14: {
                var obj = this.decodeId();
                var span = this.decodeTss();
                this.builder.del(obj, [span]);
                return;
            }
            case 15: {
                this.builder.noop(1);
                return;
            }
            case 16: {
                this.builder.noop(reader.vu57());
                return;
            }
            case 6: {
                this.builder.bin();
                return;
            }
            case 17: {
                var obj = this.decodeId();
                var after = this.decodeId();
                var length_3 = this.reader.vu57();
                var data = reader.buf(length_3);
                this.builder.insBin(obj, after, data);
                return;
            }
            case 7: {
                this.builder.tup();
                return;
            }
            case 8: {
                var id = this.decodeId();
                this.builder.const(id);
                return;
            }
            default: {
                throw new Error('UNKNOWN_OP');
            }
        }
    };
    return Decoder;
}(msgpack_1.MsgPackDecoderFast));
exports.Decoder = Decoder;
