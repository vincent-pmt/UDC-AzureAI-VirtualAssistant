"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Encoder = void 0;
var tslib_1 = require("tslib");
var ArrInsOp_1 = require("../../operations/ArrInsOp");
var ArrOp_1 = require("../../operations/ArrOp");
var BinInsOp_1 = require("../../operations/BinInsOp");
var BinOp_1 = require("../../operations/BinOp");
var CrdtEncoder_1 = require("../../util/binary/CrdtEncoder");
var DelOp_1 = require("../../operations/DelOp");
var clock_1 = require("../../clock");
var NoopOp_1 = require("../../operations/NoopOp");
var ObjOp_1 = require("../../operations/ObjOp");
var ObjSetOp_1 = require("../../operations/ObjSetOp");
var StrInsOp_1 = require("../../operations/StrInsOp");
var StrOp_1 = require("../../operations/StrOp");
var ValOp_1 = require("../../operations/ValOp");
var ValSetOp_1 = require("../../operations/ValSetOp");
var ConstOp_1 = require("../../operations/ConstOp");
var MsgPackEncoder_1 = require("../../../json-pack/msgpack/MsgPackEncoder");
var TupOp_1 = require("../../operations/TupOp");
var Encoder = (function (_super) {
    tslib_1.__extends(Encoder, _super);
    function Encoder() {
        return _super.call(this, new CrdtEncoder_1.CrdtWriter()) || this;
    }
    Encoder.prototype.encode = function (patch) {
        this.writer.reset();
        var id = (this.patchId = patch.getId());
        var isServerClock = id.sid === 1;
        if (isServerClock) {
            this.writer.b1vu56(true, id.time);
        }
        else {
            this.writer.b1vu56(false, id.sid);
            this.writer.vu57(id.time);
        }
        this.encodeOperations(patch);
        return this.writer.flush();
    };
    Encoder.prototype.encodeOperations = function (patch) {
        var ops = patch.ops;
        for (var i = 0; i < ops.length; i++) {
            var op = ops[i];
            this.encodeOperation(op);
        }
    };
    Encoder.prototype.encodeId = function (id) {
        var sessionId = id.sid;
        var time = id.time;
        if (sessionId === 1) {
            this.writer.b1vu56(true, id.time);
        }
        else {
            var patchId = this.patchId;
            if (sessionId === patchId.sid && time >= patchId.time) {
                this.writer.b1vu56(false, 1);
                this.writer.vu57(time - patchId.time);
            }
            else {
                this.writer.b1vu56(false, sessionId);
                this.writer.vu57(time);
            }
        }
    };
    Encoder.prototype.encodeTss = function (span) {
        this.encodeId(span);
        this.writer.vu57(span.span);
    };
    Encoder.prototype.encodeOperation = function (op) {
        var e_1, _a;
        if (op instanceof ObjOp_1.ObjOp)
            this.writer.u8(3);
        else if (op instanceof ArrOp_1.ArrOp)
            this.writer.u8(5);
        else if (op instanceof StrOp_1.StrOp)
            this.writer.u8(4);
        else if (op instanceof ConstOp_1.ConstOp) {
            var val = op.val;
            if (val === undefined) {
                this.writer.u8(0);
            }
            else if (val instanceof clock_1.Timestamp) {
                this.writer.u8(8);
                this.encodeId(val);
            }
            else {
                this.writer.u8(1);
                this.encodeAny(op.val);
            }
        }
        else if (op instanceof ValOp_1.ValOp) {
            this.writer.u8(2);
            this.encodeId(op.val);
        }
        else if (op instanceof ObjSetOp_1.ObjSetOp) {
            this.writer.u8(11);
            this.encodeId(op.obj);
            this.writer.vu57(op.data.length);
            try {
                for (var _b = tslib_1.__values(op.data), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = tslib_1.__read(_c.value, 2), key = _d[0], value = _d[1];
                    this.encodeId(value);
                    if (typeof key === 'number')
                        this.encodeNumber(key);
                    else
                        this.encodeString(key);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else if (op instanceof ValSetOp_1.ValSetOp) {
            this.writer.u8(12);
            this.encodeId(op.obj);
            this.encodeId(op.val);
        }
        else if (op instanceof StrInsOp_1.StrInsOp) {
            this.writer.u8(9);
            this.encodeId(op.obj);
            this.encodeId(op.ref);
            this.encodeString(op.data);
        }
        else if (op instanceof ArrInsOp_1.ArrInsOp) {
            var arr = op.obj, after = op.ref, elements = op.data;
            var length_1 = elements.length;
            this.writer.u8(13);
            this.encodeId(arr);
            this.encodeId(after);
            this.writer.vu57(length_1);
            for (var i = 0; i < length_1; i++)
                this.encodeId(elements[i]);
        }
        else if (op instanceof DelOp_1.DelOp) {
            var obj = op.obj, what = op.what;
            var length_2 = what.length;
            if (length_2 > 1) {
                this.writer.u8(10);
                this.encodeId(obj);
                this.writer.vu57(length_2);
                for (var i = 0; i < length_2; i++)
                    this.encodeTss(what[i]);
            }
            else {
                this.writer.u8(14);
                this.encodeId(obj);
                this.encodeTss(what[0]);
            }
        }
        else if (op instanceof NoopOp_1.NoopOp) {
            var length_3 = op.len;
            if (length_3 > 1) {
                this.writer.u8(16);
                this.writer.vu57(length_3);
            }
            else
                this.writer.u8(15);
        }
        else if (op instanceof BinOp_1.BinOp)
            this.writer.u8(6);
        else if (op instanceof BinInsOp_1.BinInsOp) {
            var buf = op.data;
            var length_4 = buf.length;
            this.writer.u8(17);
            this.encodeId(op.obj);
            this.encodeId(op.ref);
            this.writer.vu57(length_4);
            this.writer.buf(buf, length_4);
        }
        else if (op instanceof TupOp_1.TupOp)
            this.writer.u8(7);
        else
            throw new Error('UNKNOWN_OP');
    };
    return Encoder;
}(MsgPackEncoder_1.MsgPackEncoder));
exports.Encoder = Encoder;
