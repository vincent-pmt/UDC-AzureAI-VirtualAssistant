"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encode = void 0;
var tslib_1 = require("tslib");
var ArrInsOp_1 = require("../../operations/ArrInsOp");
var ArrOp_1 = require("../../operations/ArrOp");
var BinInsOp_1 = require("../../operations/BinInsOp");
var BinOp_1 = require("../../operations/BinOp");
var ConstOp_1 = require("../../operations/ConstOp");
var DelOp_1 = require("../../operations/DelOp");
var clock_1 = require("../../clock");
var NoopOp_1 = require("../../operations/NoopOp");
var ObjOp_1 = require("../../operations/ObjOp");
var ObjSetOp_1 = require("../../operations/ObjSetOp");
var StrInsOp_1 = require("../../operations/StrInsOp");
var StrOp_1 = require("../../operations/StrOp");
var toBase64_1 = require("../../../util/base64/toBase64");
var ValOp_1 = require("../../operations/ValOp");
var ValSetOp_1 = require("../../operations/ValSetOp");
var TupOp_1 = require("../../operations/TupOp");
var encode = function (patch) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
    var id = patch.getId();
    if (!id)
        throw new Error('PATCH_EMPTY');
    var sessionId = id.sid;
    var time = id.time;
    var res = sessionId === 1 ? [time] : [[sessionId, time]];
    var pushTimestamp = function (ts) {
        var tsSessionId = ts.sid;
        if (tsSessionId === 1)
            res.push(ts.time);
        else if (tsSessionId === sessionId && ts.time >= time)
            res.push(time - ts.time - 1);
        else
            res.push([tsSessionId, ts.time]);
    };
    var pushTimespan = function (span) {
        pushTimestamp(span);
        res.push(span.span);
    };
    try {
        for (var _e = tslib_1.__values(patch.ops), _f = _e.next(); !_f.done; _f = _e.next()) {
            var op = _f.value;
            if (op instanceof ObjOp_1.ObjOp) {
                res.push(3);
            }
            else if (op instanceof ArrOp_1.ArrOp) {
                res.push(5);
            }
            else if (op instanceof StrOp_1.StrOp) {
                res.push(4);
                continue;
            }
            else if (op instanceof BinOp_1.BinOp) {
                res.push(6);
                continue;
            }
            else if (op instanceof ObjSetOp_1.ObjSetOp) {
                var object = op.obj, tuples = op.data;
                res.push(11, tuples.length);
                pushTimestamp(object);
                try {
                    for (var tuples_1 = (e_2 = void 0, tslib_1.__values(tuples)), tuples_1_1 = tuples_1.next(); !tuples_1_1.done; tuples_1_1 = tuples_1.next()) {
                        var _g = tslib_1.__read(tuples_1_1.value, 2), key = _g[0], value = _g[1];
                        res.push(key);
                        pushTimestamp(value);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (tuples_1_1 && !tuples_1_1.done && (_b = tuples_1.return)) _b.call(tuples_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            else if (op instanceof StrInsOp_1.StrInsOp) {
                var obj = op.obj, after = op.ref, substring = op.data;
                res.push(9, substring);
                pushTimestamp(obj);
                pushTimestamp(after);
            }
            else if (op instanceof BinInsOp_1.BinInsOp) {
                var obj = op.obj, after = op.ref, data = op.data;
                res.push(17, (0, toBase64_1.toBase64)(data));
                pushTimestamp(obj);
                pushTimestamp(after);
            }
            else if (op instanceof ArrInsOp_1.ArrInsOp) {
                var arr = op.obj, after = op.ref, elements = op.data;
                res.push(13, elements.length);
                pushTimestamp(arr);
                pushTimestamp(after);
                try {
                    for (var elements_1 = (e_3 = void 0, tslib_1.__values(elements)), elements_1_1 = elements_1.next(); !elements_1_1.done; elements_1_1 = elements_1.next()) {
                        var element = elements_1_1.value;
                        pushTimestamp(element);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (elements_1_1 && !elements_1_1.done && (_c = elements_1.return)) _c.call(elements_1);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
            else if (op instanceof DelOp_1.DelOp) {
                var obj = op.obj, what = op.what;
                var length_1 = what.length;
                if (length_1 === 1) {
                    res.push(14);
                    pushTimestamp(obj);
                    pushTimespan(what[0]);
                }
                else {
                    res.push(10, length_1);
                    pushTimestamp(obj);
                    try {
                        for (var what_1 = (e_4 = void 0, tslib_1.__values(what)), what_1_1 = what_1.next(); !what_1_1.done; what_1_1 = what_1.next()) {
                            var span = what_1_1.value;
                            pushTimespan(span);
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (what_1_1 && !what_1_1.done && (_d = what_1.return)) _d.call(what_1);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                }
            }
            else if (op instanceof NoopOp_1.NoopOp) {
                var length_2 = op.len;
                if (length_2 === 1)
                    res.push(15);
                else
                    res.push(16, length_2);
            }
            else if (op instanceof ConstOp_1.ConstOp) {
                if (op.val === undefined) {
                    res.push(0);
                }
                else if (op.val instanceof clock_1.Timestamp) {
                    res.push(8);
                    pushTimestamp(op.val);
                }
                else {
                    res.push(1);
                    res.push(op.val);
                }
            }
            else if (op instanceof ValOp_1.ValOp) {
                res.push(2);
                pushTimestamp(op.val);
            }
            else if (op instanceof ValSetOp_1.ValSetOp) {
                res.push(12);
                pushTimestamp(op.obj);
                pushTimestamp(op.val);
            }
            else if (op instanceof TupOp_1.TupOp) {
                res.push(7);
                continue;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return res;
};
exports.encode = encode;
