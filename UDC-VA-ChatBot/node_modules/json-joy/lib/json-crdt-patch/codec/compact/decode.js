"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decode = void 0;
var fromBase64_1 = require("../../../util/base64/fromBase64");
var clock_1 = require("../../clock");
var PatchBuilder_1 = require("../../PatchBuilder");
var decode = function (data) {
    var x = data[0];
    var clock = Array.isArray(x) ? new clock_1.VectorClock(x[0], x[1]) : new clock_1.ServerVectorClock(1, x);
    var sessionId = clock.sid;
    var time = clock.time;
    var builder = new PatchBuilder_1.PatchBuilder(clock);
    var length = data.length;
    var i = 1;
    var decodeTimestamp = function () {
        var x = data[i++];
        if (Array.isArray(x))
            return (0, clock_1.ts)(x[0], x[1]);
        else if (x < 0)
            return (0, clock_1.ts)(sessionId, time - x - 1);
        else
            return (0, clock_1.ts)(1, x);
    };
    var decodeTimespan = function () {
        var time = decodeTimestamp();
        var span = data[i++];
        return (0, clock_1.interval)(time, 0, span);
    };
    while (i < length) {
        switch (data[i++]) {
            case 3: {
                builder.obj();
                break;
            }
            case 5: {
                builder.arr();
                break;
            }
            case 4: {
                builder.str();
                break;
            }
            case 6: {
                builder.bin();
                break;
            }
            case 11: {
                var length_1 = data[i++];
                var obj = decodeTimestamp();
                var tuples = [];
                for (var j = 0; j < length_1; j++) {
                    var key = data[i++];
                    tuples.push([key, decodeTimestamp()]);
                }
                builder.setKeys(obj, tuples);
                break;
            }
            case 9: {
                var value = data[i++];
                builder.insStr(decodeTimestamp(), decodeTimestamp(), value);
                break;
            }
            case 17: {
                var value = data[i++];
                builder.insBin(decodeTimestamp(), decodeTimestamp(), (0, fromBase64_1.fromBase64)(value));
                break;
            }
            case 13: {
                var length_2 = data[i++];
                var arr = decodeTimestamp();
                var after = decodeTimestamp();
                var values = [];
                for (var j = 0; j < length_2; j++)
                    values.push(decodeTimestamp());
                builder.insArr(arr, after, values);
                break;
            }
            case 14: {
                var obj = decodeTimestamp();
                var what = decodeTimespan();
                builder.del(obj, [what]);
                break;
            }
            case 10: {
                var length_3 = data[i++];
                var obj = decodeTimestamp();
                var what = [];
                for (var i_1 = 0; i_1 < length_3; i_1++)
                    what.push(decodeTimespan());
                builder.del(obj, what);
                break;
            }
            case 15: {
                builder.noop(1);
                break;
            }
            case 16: {
                builder.noop(data[i++]);
                break;
            }
            case 1: {
                builder.const(data[i++]);
                break;
            }
            case 0: {
                builder.const(undefined);
                break;
            }
            case 8: {
                builder.const(decodeTimestamp());
                break;
            }
            case 2: {
                builder.val(decodeTimestamp());
                break;
            }
            case 12: {
                var obj = decodeTimestamp();
                var value = decodeTimestamp();
                builder.setVal(obj, value);
                break;
            }
            case 7: {
                builder.tup();
                break;
            }
        }
    }
    return builder.patch;
};
exports.decode = decode;
