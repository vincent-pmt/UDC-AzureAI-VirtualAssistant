"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encode = void 0;
var tslib_1 = require("tslib");
var ArrInsOp_1 = require("../../operations/ArrInsOp");
var ArrOp_1 = require("../../operations/ArrOp");
var BinInsOp_1 = require("../../operations/BinInsOp");
var BinOp_1 = require("../../operations/BinOp");
var ConstOp_1 = require("../../operations/ConstOp");
var DelOp_1 = require("../../operations/DelOp");
var NoopOp_1 = require("../../operations/NoopOp");
var ObjOp_1 = require("../../operations/ObjOp");
var ObjSetOp_1 = require("../../operations/ObjSetOp");
var StrInsOp_1 = require("../../operations/StrInsOp");
var StrOp_1 = require("../../operations/StrOp");
var toBase64_1 = require("../../../util/base64/toBase64");
var ValOp_1 = require("../../operations/ValOp");
var ValSetOp_1 = require("../../operations/ValSetOp");
var clock_1 = require("../../clock");
var TupOp_1 = require("../../operations/TupOp");
var encodeTimestamp = function (ts) {
    return ts.sid === 1 ? ts.time : [ts.sid, ts.time];
};
var encode = function (patch) {
    var e_1, _a;
    var id = patch.getId();
    if (!id)
        throw new Error('PATCH_EMPTY');
    var ops = [];
    var res = {
        id: encodeTimestamp(id),
        ops: ops,
    };
    try {
        for (var _b = tslib_1.__values(patch.ops), _c = _b.next(); !_c.done; _c = _b.next()) {
            var op = _c.value;
            if (op instanceof ObjOp_1.ObjOp) {
                ops.push({ op: 'obj' });
            }
            else if (op instanceof ArrOp_1.ArrOp) {
                ops.push({ op: 'arr' });
            }
            else if (op instanceof StrOp_1.StrOp) {
                ops.push({ op: 'str' });
            }
            else if (op instanceof BinOp_1.BinOp) {
                ops.push({ op: 'bin' });
            }
            else if (op instanceof ValOp_1.ValOp) {
                ops.push({ op: 'val', value: encodeTimestamp(op.val) });
            }
            else if (op instanceof ConstOp_1.ConstOp) {
                var val = op.val;
                if (val instanceof clock_1.Timestamp) {
                    ops.push({ op: 'const', timestamp: true, value: encodeTimestamp(val) });
                }
                else {
                    ops.push({ op: 'const', value: val });
                }
            }
            else if (op instanceof ObjSetOp_1.ObjSetOp) {
                ops.push({
                    op: 'obj_set',
                    obj: encodeTimestamp(op.obj),
                    tuples: op.data.map(function (_a) {
                        var _b = tslib_1.__read(_a, 2), key = _b[0], value = _b[1];
                        return [key, encodeTimestamp(value)];
                    }),
                });
            }
            else if (op instanceof ValSetOp_1.ValSetOp) {
                ops.push({
                    op: 'val_set',
                    obj: encodeTimestamp(op.obj),
                    value: encodeTimestamp(op.val),
                });
            }
            else if (op instanceof StrInsOp_1.StrInsOp) {
                ops.push({
                    op: 'str_ins',
                    obj: encodeTimestamp(op.obj),
                    after: encodeTimestamp(op.ref),
                    value: op.data,
                });
            }
            else if (op instanceof BinInsOp_1.BinInsOp) {
                ops.push({
                    op: 'bin_ins',
                    obj: encodeTimestamp(op.obj),
                    after: encodeTimestamp(op.ref),
                    value: (0, toBase64_1.toBase64)(op.data),
                });
            }
            else if (op instanceof ArrInsOp_1.ArrInsOp) {
                ops.push({
                    op: 'arr_ins',
                    obj: encodeTimestamp(op.obj),
                    after: encodeTimestamp(op.ref),
                    values: op.data.map(encodeTimestamp),
                });
            }
            else if (op instanceof DelOp_1.DelOp) {
                var encoded = {
                    op: 'del',
                    obj: encodeTimestamp(op.obj),
                    what: op.what.map(function (span) { return [span.sid, span.time, span.span]; }),
                };
                ops.push(encoded);
            }
            else if (op instanceof NoopOp_1.NoopOp) {
                var encoded = {
                    op: 'noop',
                };
                var length_1 = op.len;
                if (length_1 > 1)
                    encoded.len = length_1;
                ops.push(encoded);
            }
            else if (op instanceof TupOp_1.TupOp) {
                ops.push({ op: 'tup' });
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return res;
};
exports.encode = encode;
