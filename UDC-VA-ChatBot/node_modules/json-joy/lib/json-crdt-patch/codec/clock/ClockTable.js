"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClockTable = exports.ClockTableEntry = void 0;
var tslib_1 = require("tslib");
var clock_1 = require("../../clock");
var ClockTableEntry = (function () {
    function ClockTableEntry(index, id) {
        this.index = index;
        this.id = id;
    }
    return ClockTableEntry;
}());
exports.ClockTableEntry = ClockTableEntry;
var ClockTable = (function () {
    function ClockTable() {
        this.bySid = new Map();
        this.byIdx = [];
    }
    ClockTable.from = function (clock) {
        var table = new ClockTable();
        table.push(new clock_1.Timestamp(clock.sid, clock.time - 1));
        clock.peers.forEach(function (id) { return table.push(id); });
        return table;
    };
    ClockTable.decode = function (reader) {
        var clockTable = new ClockTable();
        var length = reader.vu57();
        var tuple = reader.u53vu39();
        clockTable.push(new clock_1.Timestamp(tuple[0], tuple[1]));
        for (var i = 1; i < length; i++) {
            var tuple_1 = reader.u53vu39();
            clockTable.push(new clock_1.Timestamp(tuple_1[0], tuple_1[1]));
        }
        return clockTable;
    };
    ClockTable.prototype.reset = function () {
        this.bySid.clear();
        this.byIdx.length = 0;
    };
    ClockTable.prototype.parseField = function (field) {
        var underscoreIndex = field.indexOf('_');
        var relativeSid = parseInt(field.slice(0, underscoreIndex), 36);
        var time = parseInt(field.slice(underscoreIndex + 1), 36);
        var clock = this.byIdx[relativeSid];
        return new clock_1.Timestamp(clock.sid, time);
    };
    ClockTable.prototype.relative = function (id) {
        var relativeSid = this.getBySid(id.sid).index;
        return new clock_1.Timestamp(relativeSid, id.time);
    };
    ClockTable.prototype.push = function (id) {
        var byIdx = this.byIdx;
        var index = byIdx.length;
        byIdx.push(id);
        this.bySid.set(id.sid, new ClockTableEntry(index, id));
    };
    ClockTable.prototype.getBySid = function (sid) {
        var entry = this.bySid.get(sid);
        if (!entry)
            throw new Error('CLOCK_NOT_FOUND');
        return entry;
    };
    ClockTable.prototype.getByIdx = function (index) {
        var clock = this.byIdx[index];
        if (!clock)
            throw new Error('CLOCK_NOT_FOUND');
        return clock;
    };
    ClockTable.prototype.write = function (writer) {
        var table = this.byIdx;
        var length = table.length;
        writer.vu39(length);
        for (var i = 0; i < length; i++) {
            var clock = table[i];
            writer.u53vu39(clock.sid, clock.time);
        }
    };
    ClockTable.prototype.read = function (reader) {
        var length = reader.vu39();
        var bySid = this.bySid;
        var byIdx = this.byIdx;
        for (var i = 0; i < length; i++) {
            var _a = tslib_1.__read(reader.u53vu39(), 2), sid = _a[0], time = _a[1];
            var index = byIdx.length;
            var clock = new clock_1.Timestamp(sid, time);
            var entry = new ClockTableEntry(index, clock);
            byIdx.push(clock);
            bySid.set(sid, entry);
        }
    };
    return ClockTable;
}());
exports.ClockTable = ClockTable;
