"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClockEncoder = void 0;
var clock_1 = require("../../clock");
var RelativeTimestamp_1 = require("./RelativeTimestamp");
var ClockTableEntry = (function () {
    function ClockTableEntry(index, clock) {
        this.index = index;
        this.clock = clock;
    }
    return ClockTableEntry;
}());
var ClockEncoder = (function () {
    function ClockEncoder() {
        this.table = new Map();
        this.index = 1;
        this.clock = null;
    }
    ClockEncoder.prototype.reset = function (clock) {
        this.index = 1;
        this.clock = clock;
        var entry = new ClockTableEntry(this.index++, (0, clock_1.tick)(clock, -1));
        this.table.clear();
        this.table.set(clock.sid, entry);
    };
    ClockEncoder.prototype.getIndex = function (sid) {
        var entry = this.table.get(sid);
        if (!entry)
            throw new Error('CLOCK_NOT_FOUND');
        return entry.index;
    };
    ClockEncoder.prototype.append = function (ts) {
        var time = ts.time;
        var sid = ts.sid;
        var entry = this.table.get(sid);
        if (!entry) {
            var clock_2 = this.clock.peers.get(sid);
            entry = new ClockTableEntry(this.index++, clock_2);
            this.table.set(sid, entry);
        }
        var clock = entry.clock;
        var timeDiff = clock.time - time;
        return new RelativeTimestamp_1.RelativeTimestamp(entry.index, timeDiff);
    };
    ClockEncoder.prototype.toJson = function () {
        var out = [];
        this.table.forEach(function (entry) {
            var clock = entry.clock;
            out.push(clock.sid, clock.time);
        });
        return out;
    };
    ClockEncoder.prototype.write = function (writer) {
        var table = this.table;
        writer.vu57(table.size);
        table.forEach(function (entry) {
            var clock = entry.clock;
            writer.u53vu39(clock.sid, clock.time);
        });
    };
    return ClockEncoder;
}());
exports.ClockEncoder = ClockEncoder;
