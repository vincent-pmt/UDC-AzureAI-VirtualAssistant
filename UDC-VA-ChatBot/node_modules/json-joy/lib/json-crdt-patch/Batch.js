"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Batch = void 0;
var clock_1 = require("./clock");
var Batch = (function () {
    function Batch(patches) {
        this.patches = patches;
    }
    Batch.prototype.getId = function () {
        if (!this.patches.length)
            return undefined;
        return this.patches[0].getId();
    };
    Batch.prototype.rebase = function (serverTime) {
        var id = this.getId();
        if (!id)
            throw new Error('BATCH_EMPTY');
        var transformHorizon = id.time;
        var patches = this.patches;
        var length = patches.length;
        var newPatches = [];
        for (var i = 0; i < length; i++) {
            var patch = patches[i];
            newPatches.push(patch.rebase(serverTime, transformHorizon));
            serverTime += patch.span();
        }
        return new Batch(newPatches);
    };
    Batch.prototype.clone = function () {
        return new Batch(this.patches.map(function (patch) { return patch.clone(); }));
    };
    Batch.prototype.toString = function (tab) {
        if (tab === void 0) { tab = ''; }
        var id = this.getId();
        var out = "".concat(this.constructor.name, " ").concat(id ? (0, clock_1.toDisplayString)(id) : '(nil)', "\n");
        for (var i = 0; i < this.patches.length; i++) {
            var patch = this.patches[i];
            var isLast = i === this.patches.length - 1;
            out += "".concat(tab).concat(isLast ? '└─' : '├─', " ").concat(patch.toString(tab + "".concat(isLast ? ' ' : '│', " ")), "\n");
        }
        return out;
    };
    return Batch;
}());
exports.Batch = Batch;
