"use strict";
var e_1, _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.testCases = void 0;
var tslib_1 = require("tslib");
var docRfc6901Section5 = {
    foo: ['bar', 'baz'],
    '': 0,
    'a/b': 1,
    'c%d': 2,
    'e^f': 3,
    'g|h': 4,
    'i\\j': 5,
    'k"l': 6,
    ' ': 7,
    'm~n': 8,
};
var pointersRfc6901Section5 = [
    ['', docRfc6901Section5],
    ['/foo', ['bar', 'baz']],
    ['/foo/0', 'bar'],
    ['/', 0],
    ['/a~1b', 1],
    ['/c%d', 2],
    ['/e^f', 3],
    ['/g|h', 4],
    ['/i\\j', 5],
    ['/k"l', 6],
    ['/ ', 7],
    ['/m~0n', 8],
];
exports.testCases = [
    {
        name: 'Retrieves first level key from object',
        doc: { foo: 'bar' },
        pointer: '/foo',
        result: 'bar',
    },
    {
        name: 'Can find number root',
        doc: 123,
        pointer: '',
        result: 123,
    },
    {
        name: 'Can find string root',
        doc: 'foo',
        pointer: '',
        result: 'foo',
    },
    {
        name: 'Returns container object and key',
        doc: { foo: { bar: { baz: 'qux', a: 1 } } },
        pointer: '/foo/bar/baz',
        result: 'qux',
    },
    {
        name: 'Can reference array element',
        doc: { a: { b: [1, 2, 3] } },
        pointer: '/a/b/1',
        result: 2,
    },
    {
        name: 'Throws "NOT_FOUND" on missing keys two levels deep',
        doc: { a: 123 },
        pointer: '/b/c',
        error: 'NOT_FOUND',
    },
    {
        name: 'Throws "INVALID_INDEX" when pointing past array boundary',
        doc: { a: { b: [1, 2, 3] } },
        pointer: '/a/b/5',
        error: 'INVALID_INDEX',
    },
    {
        name: 'Throws "INVALID_INDEX" when pointing to negative element',
        doc: { a: { b: [1, 2, 3] } },
        pointer: '/a/b/-1',
        error: 'INVALID_INDEX',
    },
];
try {
    for (var pointersRfc6901Section5_1 = tslib_1.__values(pointersRfc6901Section5), pointersRfc6901Section5_1_1 = pointersRfc6901Section5_1.next(); !pointersRfc6901Section5_1_1.done; pointersRfc6901Section5_1_1 = pointersRfc6901Section5_1.next()) {
        var _b = tslib_1.__read(pointersRfc6901Section5_1_1.value, 2), pointer = _b[0], result = _b[1];
        exports.testCases.push({
            name: "RFC6901 Section 5. \"".concat(pointer, "\""),
            doc: docRfc6901Section5,
            pointer: pointer,
            result: result,
        });
    }
}
catch (e_1_1) { e_1 = { error: e_1_1 }; }
finally {
    try {
        if (pointersRfc6901Section5_1_1 && !pointersRfc6901Section5_1_1.done && (_a = pointersRfc6901Section5_1.return)) _a.call(pointersRfc6901Section5_1);
    }
    finally { if (e_1) throw e_1.error; }
}
