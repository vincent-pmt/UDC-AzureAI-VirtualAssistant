"use strict";
var e_1, _a, e_2, _b;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var child_process_1 = require("child_process");
var msgpack_test_suite_1 = require("./test/msgpack-test-suite");
var bin = String(process.argv[2]);
if (!bin) {
    console.error('First argument should be path to json-pack binary.');
    process.exit(1);
}
console.log('');
console.log("Running json-pack tests.");
console.log('');
var cntCorrect = 0;
var cntFailed = 0;
for (var name_1 in msgpack_test_suite_1.testSuites) {
    var testSuite = msgpack_test_suite_1.testSuites[name_1];
    try {
        for (var testSuite_1 = (e_1 = void 0, tslib_1.__values(testSuite)), testSuite_1_1 = testSuite_1.next(); !testSuite_1_1.done; testSuite_1_1 = testSuite_1.next()) {
            var testCase = testSuite_1_1.value;
            var json = '';
            if (typeof testCase.nil !== 'undefined') {
                var value = testCase.nil;
                json = JSON.stringify(value);
            }
            else if (typeof testCase.bool !== 'undefined') {
                var value = testCase.bool;
                json = JSON.stringify(value);
            }
            else if (typeof testCase.string !== 'undefined') {
                var value = testCase.string;
                json = JSON.stringify(value);
            }
            else if (typeof testCase.number !== 'undefined') {
                var value = testCase.number;
                json = JSON.stringify(value);
            }
            else if (typeof testCase.array !== 'undefined') {
                var value = testCase.array;
                json = JSON.stringify(value);
            }
            else if (typeof testCase.map !== 'undefined') {
                var value = testCase.map;
                json = JSON.stringify(value);
            }
            if (!json)
                continue;
            var stdout = (0, child_process_1.spawnSync)(bin, [], { input: json }).stdout;
            var isCorrect = false;
            var result = new Uint8Array(stdout.length);
            for (var i = 0; i < result.length; i++)
                result[i] = stdout[i];
            try {
                EXPECTED: for (var _c = (e_2 = void 0, tslib_1.__values(testCase.msgpack)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var exp = _d.value;
                    var expected = new Uint8Array(exp.split('-').map(function (a) { return parseInt(a, 16); }));
                    if (expected.length !== result.length)
                        continue;
                    for (var i = 0; i < expected.length; i++)
                        if (expected[i] !== result[i])
                            continue EXPECTED;
                    isCorrect = true;
                    break EXPECTED;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
            if (isCorrect) {
                cntCorrect++;
                console.log('âœ… ' + name_1 + ' ' + json);
            }
            else {
                cntFailed++;
                console.error('ðŸ›‘ ' + name_1 + ' ' + json);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (testSuite_1_1 && !testSuite_1_1.done && (_a = testSuite_1.return)) _a.call(testSuite_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
console.log('');
console.log("Successful = ".concat(cntCorrect, ", Failed = ").concat(cntFailed, ", Total = ").concat(cntCorrect + cntFailed));
console.log('');
if (cntFailed > 0)
    process.exit(1);
