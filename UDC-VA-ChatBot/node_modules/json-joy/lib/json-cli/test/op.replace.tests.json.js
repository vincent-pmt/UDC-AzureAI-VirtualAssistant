"use strict";
var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f, e_7, _g, e_8, _h, e_9, _j, e_10, _k;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var clone_1 = require("../../json-clone/clone");
var values = [
    ['"null"', null],
    ['"false"', false],
    ['integer', 123],
    ['string', 'asdf'],
    ['simple object', { foo: 'bar' }],
    ['simple array', [1, 'a', false]],
];
var testCases = [
    {
        comment: 'Replacing non-existing object key, first level',
        doc: {},
        patch: [{ op: 'replace', path: '/foo', value: 'bar' }],
        error: 'NOT_FOUND',
    },
];
try {
    for (var values_1 = tslib_1.__values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
        var _l = tslib_1.__read(values_1_1.value, 2), name_1 = _l[0], doc = _l[1];
        try {
            for (var values_2 = (e_2 = void 0, tslib_1.__values(values)), values_2_1 = values_2.next(); !values_2_1.done; values_2_1 = values_2.next()) {
                var _m = tslib_1.__read(values_2_1.value, 2), name2 = _m[0], doc2 = _m[1];
                testCases.push({
                    comment: "Replace root ".concat(name_1, " by ").concat(name2),
                    doc: (0, clone_1.clone)(doc),
                    patch: [{ op: 'replace', path: '', value: (0, clone_1.clone)(doc2) }],
                    expected: (0, clone_1.clone)(doc2),
                });
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (values_2_1 && !values_2_1.done && (_b = values_2.return)) _b.call(values_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
}
catch (e_1_1) { e_1 = { error: e_1_1 }; }
finally {
    try {
        if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);
    }
    finally { if (e_1) throw e_1.error; }
}
try {
    for (var values_3 = tslib_1.__values(values), values_3_1 = values_3.next(); !values_3_1.done; values_3_1 = values_3.next()) {
        var _o = tslib_1.__read(values_3_1.value, 2), name_2 = _o[0], doc = _o[1];
        try {
            for (var values_4 = (e_4 = void 0, tslib_1.__values(values)), values_4_1 = values_4.next(); !values_4_1.done; values_4_1 = values_4.next()) {
                var _p = tslib_1.__read(values_4_1.value, 2), name2 = _p[0], doc2 = _p[1];
                testCases.push({
                    comment: "Replace first level object ".concat(name_2, " by ").concat(name2),
                    doc: {
                        foo: 'bar',
                        baz: 123,
                        asdf: (0, clone_1.clone)(doc),
                        gg: true,
                        aha: null,
                    },
                    patch: [{ op: 'replace', path: '/asdf', value: (0, clone_1.clone)(doc2) }],
                    expected: {
                        foo: 'bar',
                        baz: 123,
                        asdf: (0, clone_1.clone)(doc2),
                        gg: true,
                        aha: null,
                    },
                });
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (values_4_1 && !values_4_1.done && (_d = values_4.return)) _d.call(values_4);
            }
            finally { if (e_4) throw e_4.error; }
        }
    }
}
catch (e_3_1) { e_3 = { error: e_3_1 }; }
finally {
    try {
        if (values_3_1 && !values_3_1.done && (_c = values_3.return)) _c.call(values_3);
    }
    finally { if (e_3) throw e_3.error; }
}
try {
    for (var values_5 = tslib_1.__values(values), values_5_1 = values_5.next(); !values_5_1.done; values_5_1 = values_5.next()) {
        var _q = tslib_1.__read(values_5_1.value, 2), name_3 = _q[0], doc = _q[1];
        try {
            for (var values_6 = (e_6 = void 0, tslib_1.__values(values)), values_6_1 = values_6.next(); !values_6_1.done; values_6_1 = values_6.next()) {
                var _r = tslib_1.__read(values_6_1.value, 2), name2 = _r[0], doc2 = _r[1];
                testCases.push({
                    comment: "Replace first level object ".concat(name_3, " by ").concat(name2),
                    doc: {
                        foo: 'bar',
                        baz: 123,
                        test: {
                            '1': 1234,
                            '2': {
                                gg: (0, clone_1.clone)(doc),
                            },
                        },
                        gg: true,
                        aha: null,
                    },
                    patch: [{ op: 'replace', path: '/test/2/gg', value: (0, clone_1.clone)(doc2) }],
                    expected: {
                        foo: 'bar',
                        baz: 123,
                        test: {
                            '1': 1234,
                            '2': {
                                gg: (0, clone_1.clone)(doc2),
                            },
                        },
                        gg: true,
                        aha: null,
                    },
                });
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (values_6_1 && !values_6_1.done && (_f = values_6.return)) _f.call(values_6);
            }
            finally { if (e_6) throw e_6.error; }
        }
    }
}
catch (e_5_1) { e_5 = { error: e_5_1 }; }
finally {
    try {
        if (values_5_1 && !values_5_1.done && (_e = values_5.return)) _e.call(values_5);
    }
    finally { if (e_5) throw e_5.error; }
}
try {
    for (var values_7 = tslib_1.__values(values), values_7_1 = values_7.next(); !values_7_1.done; values_7_1 = values_7.next()) {
        var _s = tslib_1.__read(values_7_1.value, 2), name_4 = _s[0], doc = _s[1];
        try {
            for (var values_8 = (e_8 = void 0, tslib_1.__values(values)), values_8_1 = values_8.next(); !values_8_1.done; values_8_1 = values_8.next()) {
                var _t = tslib_1.__read(values_8_1.value, 2), name2 = _t[0], doc2 = _t[1];
                testCases.push({
                    comment: "Replace first level array ".concat(name_4, " by ").concat(name2, ", in the middle of array"),
                    doc: ['bar', 123, false, {}, [], (0, clone_1.clone)(doc), true, null],
                    patch: [{ op: 'replace', path: '/5', value: (0, clone_1.clone)(doc2) }],
                    expected: ['bar', 123, false, {}, [], (0, clone_1.clone)(doc2), true, null],
                });
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (values_8_1 && !values_8_1.done && (_h = values_8.return)) _h.call(values_8);
            }
            finally { if (e_8) throw e_8.error; }
        }
    }
}
catch (e_7_1) { e_7 = { error: e_7_1 }; }
finally {
    try {
        if (values_7_1 && !values_7_1.done && (_g = values_7.return)) _g.call(values_7);
    }
    finally { if (e_7) throw e_7.error; }
}
try {
    for (var values_9 = tslib_1.__values(values), values_9_1 = values_9.next(); !values_9_1.done; values_9_1 = values_9.next()) {
        var _u = tslib_1.__read(values_9_1.value, 2), name_5 = _u[0], doc = _u[1];
        try {
            for (var values_10 = (e_10 = void 0, tslib_1.__values(values)), values_10_1 = values_10.next(); !values_10_1.done; values_10_1 = values_10.next()) {
                var _v = tslib_1.__read(values_10_1.value, 2), name2 = _v[0], doc2 = _v[1];
                testCases.push({
                    comment: "Replace deeply nested array ".concat(name_5, " by ").concat(name2, ", at the first position"),
                    doc: [
                        'bar',
                        [
                            123,
                            {
                                hmm: [(0, clone_1.clone)(doc), 1, 2, 3, 4],
                            },
                        ],
                    ],
                    patch: [{ op: 'replace', path: '/1/1/hmm/0', value: (0, clone_1.clone)(doc2) }],
                    expected: [
                        'bar',
                        [
                            123,
                            {
                                hmm: [(0, clone_1.clone)(doc2), 1, 2, 3, 4],
                            },
                        ],
                    ],
                });
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (values_10_1 && !values_10_1.done && (_k = values_10.return)) _k.call(values_10);
            }
            finally { if (e_10) throw e_10.error; }
        }
    }
}
catch (e_9_1) { e_9 = { error: e_9_1 }; }
finally {
    try {
        if (values_9_1 && !values_9_1.done && (_j = values_9.return)) _j.call(values_9);
    }
    finally { if (e_9) throw e_9.error; }
}
exports.default = testCases;
