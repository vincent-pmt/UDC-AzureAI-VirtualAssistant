"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fs_1 = require("fs");
var msgpack_1 = require("../json-pack/msgpack");
var CborEncoder_1 = require("../json-pack/cbor/CborEncoder");
var JSONB = tslib_1.__importStar(require("../json-binary"));
var arg_1 = tslib_1.__importDefault(require("arg"));
var args = (0, arg_1.default)({
    '--format': String,
    '--cbor': Boolean,
}, {
    argv: process.argv,
});
var ALLOWED_FORMATS = new Set(['msgpack', 'messagepack', 'cbor']);
var format = args['--cbor']
    ? 'cbor'
    : String((_a = args['--format']) !== null && _a !== void 0 ? _a : 'msgpack').toLowerCase();
if (!ALLOWED_FORMATS.has(format))
    throw new Error("Unknown format: ".concat(format));
try {
    switch (format) {
        case 'msgpack':
        case 'messagepack': {
            var encoder = new msgpack_1.MsgPackEncoder();
            var buf = (0, fs_1.readFileSync)(0);
            var doc = JSONB.parse(buf.toString());
            var encoded = encoder.encode(doc);
            process.stdout.write(encoded);
            break;
        }
        case 'cbor': {
            var encoder = new CborEncoder_1.CborEncoder();
            var buf = (0, fs_1.readFileSync)(0);
            var doc = JSONB.parse(buf.toString());
            var encoded = encoder.encode(doc);
            process.stdout.write(encoded);
            break;
        }
    }
}
catch (error) {
    var output = error instanceof Error ? error.message : String(error);
    process.stderr.write(output + '\n');
    process.exit(1);
}
