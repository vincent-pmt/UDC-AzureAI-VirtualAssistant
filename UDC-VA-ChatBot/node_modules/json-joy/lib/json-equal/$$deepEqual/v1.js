"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$deepEqual = void 0;
var tslib_1 = require("tslib");
var codegenValue = function (doc, code, r) {
    var e_1, _a;
    var rr = r;
    var type = typeof doc;
    var isPrimitive = doc === null || type === 'boolean' || type === 'string' || type === 'number';
    if (isPrimitive) {
        if (doc === Infinity) {
            code.push("if(r".concat(r, " !== Infinity)return false;"));
        }
        else if (doc === -Infinity) {
            code.push("if(r".concat(r, " !== -Infinity)return false;"));
        }
        else {
            code.push("if(r".concat(r, " !== ").concat(JSON.stringify(doc), ")return false;"));
        }
        return rr;
    }
    if (Array.isArray(doc)) {
        code.push("if(!Array.isArray(r".concat(r, ") || r").concat(r, ".length !== ").concat(doc.length, ")return false;"));
        for (var i = 0; i < doc.length; i++) {
            rr++;
            code.push("var r".concat(rr, "=r").concat(r, "[").concat(i, "];"));
            rr = codegenValue(doc[i], code, rr);
        }
        return rr;
    }
    if (type === 'object' && doc) {
        var obj = doc;
        var keys = Object.keys(obj);
        code.push("if(!r".concat(r, " || typeof r").concat(r, " !== \"object\" || Array.isArray(r").concat(r, ") || Object.keys(r").concat(r, ").length !== ").concat(keys.length, ")return false;"));
        try {
            for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var key = keys_1_1.value;
                rr++;
                code.push("var r".concat(rr, "=r").concat(r, "[").concat(JSON.stringify(key), "];"));
                rr = codegenValue(obj[key], code, rr);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    if (doc === undefined) {
        code.push("if(r".concat(r, " !== undefined)return false;"));
        return rr;
    }
    return rr;
};
var $$deepEqual = function (a) {
    var code = [];
    codegenValue(a, code, 0);
    var fn = tslib_1.__spreadArray(tslib_1.__spreadArray(['(function(r0){'], tslib_1.__read(code), false), ['return true;', '})'], false);
    return fn.join('');
};
exports.$$deepEqual = $$deepEqual;
