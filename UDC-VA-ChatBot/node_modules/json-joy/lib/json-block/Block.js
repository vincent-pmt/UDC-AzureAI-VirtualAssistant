"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Branch = exports.BasicBlock = void 0;
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var BasicBlock = (function () {
    function BasicBlock(version, model) {
        this.model = model;
        this.v$ = new rxjs_1.BehaviorSubject(version);
    }
    BasicBlock.prototype.fork = function () {
        return new BasicBlock(this.v$.getValue(), this.model.fork());
    };
    BasicBlock.prototype.data$ = function () {
        var _this = this;
        return this.v$.pipe((0, operators_1.switchMap)(function () { return (0, rxjs_1.of)(_this.model.getData()); }));
    };
    BasicBlock.prototype.getData = function () {
        return this.model.getData();
    };
    BasicBlock.prototype.apply = function (patch) {
        this.model.apply(patch);
        this.v$.next(this.v$.getValue());
    };
    return BasicBlock;
}());
exports.BasicBlock = BasicBlock;
var Branch = (function () {
    function Branch(base) {
        this.batches = [];
        this.base$ = new rxjs_1.BehaviorSubject(base);
        this.patches = [];
        this.head$ = new rxjs_1.BehaviorSubject(base.fork());
    }
    Branch.prototype.cutBatch = function () {
        this.batches.push(this.patches);
        this.patches = [];
    };
    Branch.prototype.commit = function (patch) {
        this.patches.push(patch);
        this.head$.getValue().apply(patch);
    };
    Branch.prototype.rebase = function (patches) {
        var e_1, _a, e_2, _b;
        var base = this.base$.getValue();
        try {
            for (var patches_1 = tslib_1.__values(patches), patches_1_1 = patches_1.next(); !patches_1_1.done; patches_1_1 = patches_1.next()) {
                var patch = patches_1_1.value;
                base.apply(patch);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (patches_1_1 && !patches_1_1.done && (_a = patches_1.return)) _a.call(patches_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var head = base.fork();
        try {
            for (var _c = tslib_1.__values(this.patches), _d = _c.next(); !_d.done; _d = _c.next()) {
                var patch = _d.value;
                head.apply(patch);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this.head$.next(head);
    };
    Branch.prototype.reset = function (base) {
        this.base$.next(base);
        var patches = this.patches;
        this.patches = [];
        this.head$.next(base.fork());
        return patches;
    };
    return Branch;
}());
exports.Branch = Branch;
