"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encode = void 0;
const ArrInsOp_1 = require("../../operations/ArrInsOp");
const ArrOp_1 = require("../../operations/ArrOp");
const BinInsOp_1 = require("../../operations/BinInsOp");
const BinOp_1 = require("../../operations/BinOp");
const ConstOp_1 = require("../../operations/ConstOp");
const DelOp_1 = require("../../operations/DelOp");
const NoopOp_1 = require("../../operations/NoopOp");
const ObjOp_1 = require("../../operations/ObjOp");
const ObjSetOp_1 = require("../../operations/ObjSetOp");
const StrInsOp_1 = require("../../operations/StrInsOp");
const StrOp_1 = require("../../operations/StrOp");
const toBase64_1 = require("../../../util/base64/toBase64");
const ValOp_1 = require("../../operations/ValOp");
const ValSetOp_1 = require("../../operations/ValSetOp");
const clock_1 = require("../../clock");
const TupOp_1 = require("../../operations/TupOp");
const encodeTimestamp = (ts) => ts.sid === 1 ? ts.time : [ts.sid, ts.time];
const encode = (patch) => {
    const id = patch.getId();
    if (!id)
        throw new Error('PATCH_EMPTY');
    const ops = [];
    const res = {
        id: encodeTimestamp(id),
        ops,
    };
    for (const op of patch.ops) {
        if (op instanceof ObjOp_1.ObjOp) {
            ops.push({ op: 'obj' });
        }
        else if (op instanceof ArrOp_1.ArrOp) {
            ops.push({ op: 'arr' });
        }
        else if (op instanceof StrOp_1.StrOp) {
            ops.push({ op: 'str' });
        }
        else if (op instanceof BinOp_1.BinOp) {
            ops.push({ op: 'bin' });
        }
        else if (op instanceof ValOp_1.ValOp) {
            ops.push({ op: 'val', value: encodeTimestamp(op.val) });
        }
        else if (op instanceof ConstOp_1.ConstOp) {
            const val = op.val;
            if (val instanceof clock_1.Timestamp) {
                ops.push({ op: 'const', timestamp: true, value: encodeTimestamp(val) });
            }
            else {
                ops.push({ op: 'const', value: val });
            }
        }
        else if (op instanceof ObjSetOp_1.ObjSetOp) {
            ops.push({
                op: 'obj_set',
                obj: encodeTimestamp(op.obj),
                tuples: op.data.map(([key, value]) => [key, encodeTimestamp(value)]),
            });
        }
        else if (op instanceof ValSetOp_1.ValSetOp) {
            ops.push({
                op: 'val_set',
                obj: encodeTimestamp(op.obj),
                value: encodeTimestamp(op.val),
            });
        }
        else if (op instanceof StrInsOp_1.StrInsOp) {
            ops.push({
                op: 'str_ins',
                obj: encodeTimestamp(op.obj),
                after: encodeTimestamp(op.ref),
                value: op.data,
            });
        }
        else if (op instanceof BinInsOp_1.BinInsOp) {
            ops.push({
                op: 'bin_ins',
                obj: encodeTimestamp(op.obj),
                after: encodeTimestamp(op.ref),
                value: (0, toBase64_1.toBase64)(op.data),
            });
        }
        else if (op instanceof ArrInsOp_1.ArrInsOp) {
            ops.push({
                op: 'arr_ins',
                obj: encodeTimestamp(op.obj),
                after: encodeTimestamp(op.ref),
                values: op.data.map(encodeTimestamp),
            });
        }
        else if (op instanceof DelOp_1.DelOp) {
            const encoded = {
                op: 'del',
                obj: encodeTimestamp(op.obj),
                what: op.what.map((span) => [span.sid, span.time, span.span]),
            };
            ops.push(encoded);
        }
        else if (op instanceof NoopOp_1.NoopOp) {
            const encoded = {
                op: 'noop',
            };
            const length = op.len;
            if (length > 1)
                encoded.len = length;
            ops.push(encoded);
        }
        else if (op instanceof TupOp_1.TupOp) {
            ops.push({ op: 'tup' });
        }
    }
    return res;
};
exports.encode = encode;
