"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Decoder = void 0;
const CrdtDecoder_1 = require("../../util/binary/CrdtDecoder");
const clock_1 = require("../../clock");
const PatchBuilder_1 = require("../../PatchBuilder");
const msgpack_1 = require("../../../json-pack/msgpack");
class Decoder extends msgpack_1.MsgPackDecoderFast {
    constructor() {
        super(new CrdtDecoder_1.CrdtDecoder());
    }
    decode(data) {
        this.reader.reset(data);
        const [isServerClock, x] = this.reader.b1vu56();
        const clock = isServerClock ? new clock_1.ServerVectorClock(1, x) : new clock_1.VectorClock(x, this.reader.vu57());
        this.patchId = (0, clock_1.ts)(clock.sid, clock.time);
        this.builder = new PatchBuilder_1.PatchBuilder(clock);
        this.decodeOperations();
        return this.builder.patch;
    }
    decodeId() {
        const [isServerClock, x] = this.reader.b1vu56();
        if (isServerClock) {
            return (0, clock_1.ts)(1, x);
        }
        else {
            const patchId = this.patchId;
            if (x === 1) {
                const delta = this.reader.vu57();
                return (0, clock_1.ts)(patchId.sid, patchId.time + delta);
            }
            else {
                const time = this.reader.vu57();
                return (0, clock_1.ts)(x, time);
            }
        }
    }
    decodeTss() {
        const id = this.decodeId();
        const span = this.reader.vu57();
        return (0, clock_1.interval)(id, 0, span);
    }
    decodeOperations() {
        while (this.reader.x < this.reader.uint8.length)
            this.decodeOperation();
    }
    decodeOperation() {
        const reader = this.reader;
        const opcode = reader.u8();
        switch (opcode) {
            case 3: {
                this.builder.obj();
                return;
            }
            case 5: {
                this.builder.arr();
                return;
            }
            case 4: {
                this.builder.str();
                return;
            }
            case 2: {
                this.builder.val(this.decodeId());
                return;
            }
            case 1: {
                const val = this.val();
                this.builder.const(val);
                return;
            }
            case 0: {
                this.builder.const(undefined);
                return;
            }
            case 11: {
                const object = this.decodeId();
                const fields = reader.vu57();
                const tuples = [];
                for (let i = 0; i < fields; i++) {
                    const value = this.decodeId();
                    const key = this.val();
                    if (typeof key !== 'string' && typeof key !== 'number')
                        continue;
                    tuples.push([key, value]);
                }
                this.builder.setKeys(object, tuples);
                return;
            }
            case 12: {
                const obj = this.decodeId();
                const val = this.decodeId();
                this.builder.setVal(obj, val);
                return;
            }
            case 9: {
                const obj = this.decodeId();
                const after = this.decodeId();
                const str = this.val();
                if (typeof str !== 'string')
                    return;
                this.builder.insStr(obj, after, str);
                return;
            }
            case 13: {
                const arr = this.decodeId();
                const after = this.decodeId();
                const length = reader.vu57();
                const elements = [];
                for (let i = 0; i < length; i++)
                    elements.push(this.decodeId());
                this.builder.insArr(arr, after, elements);
                return;
            }
            case 10: {
                const obj = this.decodeId();
                const length = reader.vu57();
                const what = [];
                for (let i = 0; i < length; i++)
                    what.push(this.decodeTss());
                this.builder.del(obj, what);
                return;
            }
            case 14: {
                const obj = this.decodeId();
                const span = this.decodeTss();
                this.builder.del(obj, [span]);
                return;
            }
            case 15: {
                this.builder.noop(1);
                return;
            }
            case 16: {
                this.builder.noop(reader.vu57());
                return;
            }
            case 6: {
                this.builder.bin();
                return;
            }
            case 17: {
                const obj = this.decodeId();
                const after = this.decodeId();
                const length = this.reader.vu57();
                const data = reader.buf(length);
                this.builder.insBin(obj, after, data);
                return;
            }
            case 7: {
                this.builder.tup();
                return;
            }
            case 8: {
                const id = this.decodeId();
                this.builder.const(id);
                return;
            }
            default: {
                throw new Error('UNKNOWN_OP');
            }
        }
    }
}
exports.Decoder = Decoder;
