import { ArrInsOp } from './operations/ArrInsOp';
import { ArrOp } from './operations/ArrOp';
import { BinInsOp } from './operations/BinInsOp';
import { BinOp } from './operations/BinOp';
import { ConstOp } from './operations/ConstOp';
import { DelOp } from './operations/DelOp';
import { ITimestampStruct } from './clock';
import { NoopOp } from './operations/NoopOp';
import { ObjOp } from './operations/ObjOp';
import { ObjSetOp } from './operations/ObjSetOp';
import { StrInsOp } from './operations/StrInsOp';
import { StrOp } from './operations/StrOp';
import { ValOp } from './operations/ValOp';
import { ValSetOp } from './operations/ValSetOp';
import { TupOp } from './operations/TupOp';
export type JsonCrdtPatchOperation = DelOp | ArrInsOp | StrInsOp | BinInsOp | ArrOp | TupOp | ConstOp | ObjOp | StrOp | BinOp | ValOp | NoopOp | ValSetOp | ObjSetOp;
export declare class Patch {
    static fromBinary(data: Uint8Array): Patch;
    readonly ops: JsonCrdtPatchOperation[];
    getId(): ITimestampStruct | undefined;
    span(): number;
    nextTime(): number;
    rewriteTime(ts: (id: ITimestampStruct) => ITimestampStruct): Patch;
    rebase(serverTime: number, transformHorizon: number): Patch;
    clone(): Patch;
    toString(tab?: string): string;
    toBinary(): Uint8Array;
}
