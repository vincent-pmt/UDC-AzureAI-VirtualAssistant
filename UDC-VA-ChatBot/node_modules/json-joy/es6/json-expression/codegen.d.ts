import type { Expr, ExprAnd, ExprAsterisk, ExprBool, ExprCat, ExprCeil, ExprContains, ExprDefined, ExprEnds, ExprEquals, ExprFloor, ExprGet, ExprGreaterThan, ExprGreaterThanOrEqual, ExprIf, ExprIn, ExprInt, ExprLessThan, ExprLessThanOrEqual, ExprMatches, ExprMax, ExprMin, ExprMinus, ExprMod, ExprNot, ExprNotEquals, ExprNum, ExprOr, ExprPlus, ExprRound, ExprSlash, ExprStarts, ExprStr, ExprSubstr, ExprType, JsonExpressionCodegenContext, JsonExpressionExecutionContext } from './types';
import { Codegen } from '../util/codegen/Codegen';
import { ExprBetweenEqEq, ExprBetweenEqNe, ExprBetweenNeEq, ExprBetweenNeNe } from '.';
declare const linkable: {
    get: (path: string, data: unknown) => unknown;
    throwOnUndef: (value: unknown, def?: unknown) => {} | null;
    deepEqual: (a: unknown, b: unknown) => boolean;
    type: (value: unknown) => string;
    str: (value: unknown) => string;
    starts: (outer: unknown, inner: unknown) => boolean;
    contains: (outer: unknown, inner: unknown) => boolean;
    ends: (outer: unknown, inner: unknown) => boolean;
    isInContainer: (what: unknown, container: unknown[]) => boolean;
    substr: (probablyString: unknown, from: unknown, length?: unknown) => string;
    slash: (a: unknown, b: unknown) => number;
    betweenNeNe: (val: number, min: number, max: number) => boolean;
    betweenEqNe: (val: number, min: number, max: number) => boolean;
    betweenNeEq: (val: number, min: number, max: number) => boolean;
    betweenEqEq: (val: number, min: number, max: number) => boolean;
};
export type JsonExpressionFn = (ctx: JsonExpressionExecutionContext) => unknown;
declare class Literal {
    val: unknown;
    constructor(val: unknown);
    toString(): string;
}
declare class Expression {
    val: string;
    constructor(val: string);
    toString(): string;
}
type ExpressionResult = Literal | Expression;
export interface JsonExpressionCodegenOptions extends JsonExpressionCodegenContext {
    expression: Expr;
}
export declare class JsonExpressionCodegen {
    protected options: JsonExpressionCodegenOptions;
    protected codegen: Codegen<JsonExpressionFn, typeof linkable>;
    constructor(options: JsonExpressionCodegenOptions);
    protected onGet(expr: ExprGet): ExpressionResult;
    protected onEqualsLiteralLiteral(a: Literal, b: Literal): ExpressionResult;
    protected onEqualsLiteralExpression(literal: Literal, expression: Expression): ExpressionResult;
    protected onEquals(expr: ExprEquals): ExpressionResult;
    protected onNotEquals(expr: ExprNotEquals): ExpressionResult;
    protected onNot(expr: ExprNot): ExpressionResult;
    protected onIf(expr: ExprIf): ExpressionResult;
    protected onAnd(expr: ExprAnd): ExpressionResult;
    protected onOr(expr: ExprOr): ExpressionResult;
    protected onType(expr: ExprType): ExpressionResult;
    protected onBool(expr: ExprBool): ExpressionResult;
    protected onNum(expr: ExprNum): ExpressionResult;
    protected onInt(expr: ExprInt): ExpressionResult;
    protected onStr(expr: ExprStr): ExpressionResult;
    protected onStarts(expr: ExprStarts): ExpressionResult;
    protected onContains(expr: ExprContains): ExpressionResult;
    protected onEnds(expr: ExprEnds): ExpressionResult;
    protected onMatches(expr: ExprMatches): ExpressionResult;
    protected onDefined(expr: ExprDefined): ExpressionResult;
    protected onIn(expr: ExprIn): ExpressionResult;
    protected onCat(expr: ExprCat): ExpressionResult;
    protected onSubstr(expr: ExprSubstr): ExpressionResult;
    protected onLessThan(expr: ExprLessThan): ExpressionResult;
    protected onLessThanOrEqual(expr: ExprLessThanOrEqual): ExpressionResult;
    protected onGreaterThan(expr: ExprGreaterThan): ExpressionResult;
    protected onGreaterThanOrEqual(expr: ExprGreaterThanOrEqual): ExpressionResult;
    protected onBetweenNeNe(expr: ExprBetweenNeNe): ExpressionResult;
    protected onBetweenEqNe(expr: ExprBetweenEqNe): ExpressionResult;
    protected onBetweenNeEq(expr: ExprBetweenNeEq): ExpressionResult;
    protected onBetweenEqEq(expr: ExprBetweenEqEq): ExpressionResult;
    protected onMin(expr: ExprMin): ExpressionResult;
    protected onMax(expr: ExprMax): ExpressionResult;
    protected onPlus(expr: ExprPlus): ExpressionResult;
    protected onMinus(expr: ExprMinus): ExpressionResult;
    protected onAsterisk(expr: ExprAsterisk): ExpressionResult;
    protected onSlash(expr: ExprSlash): ExpressionResult;
    protected onMod(expr: ExprMod): ExpressionResult;
    protected onRound(expr: ExprRound): ExpressionResult;
    protected onCeil(expr: ExprCeil): ExpressionResult;
    protected onFloor(expr: ExprFloor): ExpressionResult;
    protected onExpression(expr: Expr | unknown): ExpressionResult;
    run(): this;
    generate(): import("../util/codegen").JavaScriptLinked<JsonExpressionFn, unknown[]>;
    compile(): JsonExpressionFn;
}
export {};
