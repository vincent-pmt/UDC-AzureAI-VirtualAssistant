"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isLiteral = exports.substr = exports.slash = exports.betweenEqEq = exports.betweenEqNe = exports.betweenNeEq = exports.betweenNeNe = exports.int = exports.num = exports.isInContainer = exports.ends = exports.contains = exports.starts = exports.str = exports.type = exports.throwOnUndef = exports.get = void 0;
const deepEqual_1 = require("../json-equal/deepEqual");
const json_pointer_1 = require("../json-pointer");
const get = (path, data) => (0, json_pointer_1.get)(data, (0, json_pointer_1.toPath)(path));
exports.get = get;
const throwOnUndef = (value, def) => {
    if (value !== undefined)
        return value;
    if (def === undefined)
        throw new Error('NOT_FOUND');
    return def;
};
exports.throwOnUndef = throwOnUndef;
const type = (value) => {
    if (value === null)
        return 'null';
    if (value instanceof Array)
        return 'array';
    return typeof value;
};
exports.type = type;
const str = (value) => {
    if (typeof value !== 'object')
        return '' + value;
    return JSON.stringify(value);
};
exports.str = str;
const starts = (outer, inner) => {
    return (0, exports.str)(outer).indexOf((0, exports.str)(inner)) === 0;
};
exports.starts = starts;
const contains = (outer, inner) => {
    return (0, exports.str)(outer).indexOf((0, exports.str)(inner)) > -1;
};
exports.contains = contains;
const ends = (outer, inner) => {
    const o = (0, exports.str)(outer);
    const i = (0, exports.str)(inner);
    return o.indexOf(i) === o.length - i.length;
};
exports.ends = ends;
const isInContainer = (what, container) => {
    const length = container.length;
    for (let i = 0; i < length; i++)
        if ((0, deepEqual_1.deepEqual)(container[i], what))
            return true;
    return false;
};
exports.isInContainer = isInContainer;
const num = (value) => +value || 0;
exports.num = num;
const int = (value) => ~~value;
exports.int = int;
const betweenNeNe = (val, min, max) => val > min && val < max;
exports.betweenNeNe = betweenNeNe;
const betweenNeEq = (val, min, max) => val > min && val <= max;
exports.betweenNeEq = betweenNeEq;
const betweenEqNe = (val, min, max) => val >= min && val < max;
exports.betweenEqNe = betweenEqNe;
const betweenEqEq = (val, min, max) => val >= min && val <= max;
exports.betweenEqEq = betweenEqEq;
const slash = (a, b) => {
    const res = (0, exports.num)(a) / (0, exports.num)(b);
    return Number.isFinite(res) ? res : 0;
};
exports.slash = slash;
const substr = (probablyString, from, length) => (0, exports.str)(probablyString).substr((0, exports.int)(from), (0, exports.int)(length));
exports.substr = substr;
const isLiteral = (value) => {
    if (value instanceof Array)
        return value.length === 1 && value[0] instanceof Array;
    else
        return true;
};
exports.isLiteral = isLiteral;
