export interface JsonCrdtSnapshot {
    time: JsonCrdtServerTimestamp | JsonCrdtLogicalTimestamp[];
    root: ValueJsonCrdtNode;
}
export type JsonCrdtTimestamp = JsonCrdtServerTimestamp | JsonCrdtLogicalTimestamp;
export type JsonCrdtLogicalTimestamp = [sessionId: number, time: number];
export type JsonCrdtServerTimestamp = number;
export interface ObjectJsonCrdtNode {
    type: 'obj';
    id: JsonCrdtTimestamp;
    keys: Record<string, JsonCrdtNode>;
}
export interface TupleJsonCrdtNode {
    type: 'tup';
    id: JsonCrdtTimestamp;
    components: (null | JsonCrdtNode)[];
}
export interface ArrayJsonCrdtNode {
    type: 'arr';
    id: JsonCrdtTimestamp;
    chunks: (ArrayJsonCrdtChunk | JsonCrdtRgaTombstone)[];
}
export interface ArrayJsonCrdtChunk {
    id: JsonCrdtTimestamp;
    nodes: JsonCrdtNode[];
}
export interface StringJsonCrdtNode {
    type: 'str';
    id: JsonCrdtTimestamp;
    chunks: (StringJsonCrdtChunk | JsonCrdtRgaTombstone)[];
}
export interface StringJsonCrdtChunk {
    id: JsonCrdtTimestamp;
    value: string;
}
export interface BinaryJsonCrdtNode {
    type: 'bin';
    id: JsonCrdtTimestamp;
    chunks: (BinaryJsonCrdtChunk | JsonCrdtRgaTombstone)[];
}
export interface BinaryJsonCrdtChunk {
    id: JsonCrdtTimestamp;
    value: string;
}
export interface JsonCrdtRgaTombstone {
    id: JsonCrdtTimestamp;
    span: number;
}
export interface ValueJsonCrdtNode {
    type: 'val';
    id: JsonCrdtTimestamp;
    node: JsonCrdtNode;
}
export interface ConstantJsonCrdtNode {
    type: 'const';
    id: JsonCrdtTimestamp;
    timestamp?: boolean;
    value?: unknown | JsonCrdtTimestamp;
}
export type JsonCrdtNode = ObjectJsonCrdtNode | TupleJsonCrdtNode | ArrayJsonCrdtNode | StringJsonCrdtNode | BinaryJsonCrdtNode | ValueJsonCrdtNode | ConstantJsonCrdtNode;
