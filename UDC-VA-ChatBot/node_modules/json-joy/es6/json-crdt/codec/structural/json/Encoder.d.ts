import { ArrayRga, ArrayChunk } from '../../../types/rga-array/ArrayRga';
import { BinaryRga, BinaryChunk } from '../../../types/rga-binary/BinaryRga';
import { Const } from '../../../types/const/Const';
import { JsonNode } from '../../../types';
import { ObjectLww } from '../../../types/lww-object/ObjectLww';
import { StringRga, StringChunk } from '../../../types/rga-string/StringRga';
import { ValueLww } from '../../../types/lww-value/ValueLww';
import { ITimestampStruct, IVectorClock } from '../../../../json-crdt-patch/clock';
import { Model } from '../../../model';
import type { JsonCrdtNode, ObjectJsonCrdtNode, ArrayJsonCrdtNode, ArrayJsonCrdtChunk, JsonCrdtRgaTombstone, ValueJsonCrdtNode, StringJsonCrdtNode, StringJsonCrdtChunk, ConstantJsonCrdtNode, BinaryJsonCrdtNode, BinaryJsonCrdtChunk, JsonCrdtLogicalTimestamp, JsonCrdtServerTimestamp, JsonCrdtSnapshot } from './types';
export declare class Encoder {
    protected model: Model;
    encode(model: Model): JsonCrdtSnapshot;
    cClock(clock: IVectorClock): JsonCrdtLogicalTimestamp[];
    cTs(ts: ITimestampStruct): JsonCrdtLogicalTimestamp | JsonCrdtServerTimestamp;
    cNode(node: JsonNode): JsonCrdtNode;
    cObj(obj: ObjectLww): ObjectJsonCrdtNode;
    cArr(obj: ArrayRga): ArrayJsonCrdtNode;
    cArrChunk(chunk: ArrayChunk): ArrayJsonCrdtChunk | JsonCrdtRgaTombstone;
    cStr(obj: StringRga): StringJsonCrdtNode;
    cStrChunk(chunk: StringChunk): StringJsonCrdtChunk | JsonCrdtRgaTombstone;
    cBin(obj: BinaryRga): BinaryJsonCrdtNode;
    cBinChunk(chunk: BinaryChunk): BinaryJsonCrdtChunk | JsonCrdtRgaTombstone;
    cVal(obj: ValueLww): ValueJsonCrdtNode;
    cConst(obj: Const): ConstantJsonCrdtNode;
}
